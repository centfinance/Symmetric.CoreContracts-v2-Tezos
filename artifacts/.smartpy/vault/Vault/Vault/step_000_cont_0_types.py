import smartpy as sp

tstorage = sp.TRecord(admin = sp.TAddress, isPoolRegistered = sp.TBigMap(sp.TPair(sp.TAddress, sp.TNat), sp.TUnit), metadata = sp.TBigMap(sp.TString, sp.TBytes), nextPoolNonce = sp.TNat, poolsBalances = sp.TBigMap(sp.TPair(sp.TAddress, sp.TNat), sp.TMap(sp.TPair(sp.TAddress, sp.TOption(sp.TNat)), sp.TPair(sp.TNat, sp.TNat))), poolsTokens = sp.TBigMap(sp.TPair(sp.TAddress, sp.TNat), sp.TMap(sp.TNat, sp.TPair(sp.TAddress, sp.TOption(sp.TNat)))), proposed_admin = sp.TOption(sp.TAddress), settings = sp.TRecord(paused = sp.TBool).layout("paused")).layout(((("admin", "isPoolRegistered"), ("metadata", "nextPoolNonce")), (("poolsBalances", "poolsTokens"), ("proposed_admin", "settings"))))
tparameter = sp.TVariant(accept_admin = sp.TUnit, batchSwap = sp.TRecord(assets = sp.TMap(sp.TNat, sp.TPair(sp.TAddress, sp.TOption(sp.TNat))), deadline = sp.TTimestamp, funds = sp.TRecord(recipient = sp.TAddress, sender = sp.TAddress).layout(("recipient", "sender")), kind = sp.TNat, limits = sp.TMap(sp.TNat, sp.TInt), swaps = sp.TMap(sp.TNat, sp.TRecord(amount = sp.TNat, assetInIndex = sp.TNat, assetOutIndex = sp.TNat, poolId = sp.TPair(sp.TAddress, sp.TNat)).layout((("amount", "assetInIndex"), ("assetOutIndex", "poolId"))))).layout((("assets", ("deadline", "funds")), ("kind", ("limits", "swaps")))), exitPool = sp.TRecord(poolId = sp.TPair(sp.TAddress, sp.TNat), recipient = sp.TAddress, request = sp.TRecord(assets = sp.TMap(sp.TNat, sp.TPair(sp.TAddress, sp.TOption(sp.TNat))), limits = sp.TMap(sp.TNat, sp.TNat), userData = sp.TRecord(amountsOut = sp.TOption(sp.TMap(sp.TNat, sp.TNat)), kind = sp.TNat, maxSPTAmountIn = sp.TOption(sp.TNat), recoveryModeExit = sp.TBool, sptAmountIn = sp.TOption(sp.TNat), tokenIndex = sp.TOption(sp.TNat)).layout((("amountsOut", ("kind", "maxSPTAmountIn")), ("recoveryModeExit", ("sptAmountIn", "tokenIndex"))))).layout(("assets", ("limits", "userData"))), sender = sp.TAddress).layout((("poolId", "recipient"), ("request", "sender"))), joinPool = sp.TRecord(poolId = sp.TPair(sp.TAddress, sp.TNat), recipient = sp.TAddress, request = sp.TRecord(assets = sp.TMap(sp.TNat, sp.TPair(sp.TAddress, sp.TOption(sp.TNat))), limits = sp.TMap(sp.TNat, sp.TNat), userData = sp.TRecord(allT = sp.TOption(sp.TNat), amountsIn = sp.TOption(sp.TMap(sp.TNat, sp.TNat)), kind = sp.TNat, minSPTAmountOut = sp.TOption(sp.TNat), sptAmountOut = sp.TOption(sp.TNat), tokenIndex = sp.TOption(sp.TNat)).layout((("allT", ("amountsIn", "kind")), ("minSPTAmountOut", ("sptAmountOut", "tokenIndex"))))).layout(("assets", ("limits", "userData"))), sender = sp.TAddress).layout((("poolId", "recipient"), ("request", "sender"))), registerPool = sp.TUnit, registerTokens = sp.TRecord(assetManagers = sp.TOption(sp.TMap(sp.TNat, sp.TAddress)), poolId = sp.TPair(sp.TAddress, sp.TNat), tokens = sp.TMap(sp.TNat, sp.TPair(sp.TAddress, sp.TOption(sp.TNat)))).layout(("assetManagers", ("poolId", "tokens"))), run_lambda = sp.TLambda(sp.TUnit, sp.TList(sp.TOperation), with_storage="read-write", tstorage=sp.TRecord(admin = sp.TAddress, isPoolRegistered = sp.TBigMap(sp.TPair(sp.TAddress, sp.TNat), sp.TUnit), metadata = sp.TBigMap(sp.TString, sp.TBytes), nextPoolNonce = sp.TNat, poolsBalances = sp.TBigMap(sp.TPair(sp.TAddress, sp.TNat), sp.TMap(sp.TPair(sp.TAddress, sp.TOption(sp.TNat)), sp.TPair(sp.TNat, sp.TNat))), poolsTokens = sp.TBigMap(sp.TPair(sp.TAddress, sp.TNat), sp.TMap(sp.TNat, sp.TPair(sp.TAddress, sp.TOption(sp.TNat)))), proposed_admin = sp.TOption(sp.TAddress), settings = sp.TRecord(paused = sp.TBool).layout("paused")).layout(((("admin", "isPoolRegistered"), ("metadata", "nextPoolNonce")), (("poolsBalances", "poolsTokens"), ("proposed_admin", "settings")))), with_operations=True), set_paused = sp.TBool, swap = sp.TRecord(deadline = sp.TTimestamp, funds = sp.TRecord(recipient = sp.TAddress, sender = sp.TAddress).layout(("recipient", "sender")), limit = sp.TNat, singleSwap = sp.TRecord(amount = sp.TNat, assetIn = sp.TPair(sp.TAddress, sp.TOption(sp.TNat)), assetOut = sp.TPair(sp.TAddress, sp.TOption(sp.TNat)), kind = sp.TNat, poolId = sp.TPair(sp.TAddress, sp.TNat)).layout((("amount", "assetIn"), ("assetOut", ("kind", "poolId"))))).layout((("deadline", "funds"), ("limit", "singleSwap"))), transfer_admin = sp.TAddress).layout(((("accept_admin", "batchSwap"), ("exitPool", ("joinPool", "registerPool"))), (("registerTokens", "run_lambda"), ("set_paused", ("swap", "transfer_admin")))))
tprivates = { "_castToInt": sp.TLambda(sp.TRecord(amounts = sp.TMap(sp.TNat, sp.TNat), positive = sp.TBool).layout(("amounts", "positive")), sp.TMap(sp.TNat, sp.TInt)), "_validateTokensAndGetBalances": sp.TLambda(sp.TRecord(expectedTokens = sp.TMap(sp.TNat, sp.TPair(sp.TAddress, sp.TOption(sp.TNat))), limits = sp.TMap(sp.TNat, sp.TNat), poolId = sp.TPair(sp.TAddress, sp.TNat)).layout(("expectedTokens", ("limits", "poolId"))), sp.TMap(sp.TNat, sp.TPair(sp.TNat, sp.TNat)), with_storage="read-only", tstorage=sp.TRecord(admin = sp.TAddress, isPoolRegistered = sp.TBigMap(sp.TPair(sp.TAddress, sp.TNat), sp.TUnit), metadata = sp.TBigMap(sp.TString, sp.TBytes), nextPoolNonce = sp.TNat, poolsBalances = sp.TBigMap(sp.TPair(sp.TAddress, sp.TNat), sp.TMap(sp.TPair(sp.TAddress, sp.TOption(sp.TNat)), sp.TPair(sp.TNat, sp.TNat))), poolsTokens = sp.TBigMap(sp.TPair(sp.TAddress, sp.TNat), sp.TMap(sp.TNat, sp.TPair(sp.TAddress, sp.TOption(sp.TNat)))), proposed_admin = sp.TOption(sp.TAddress), settings = sp.TRecord(paused = sp.TBool).layout("paused")).layout(((("admin", "isPoolRegistered"), ("metadata", "nextPoolNonce")), (("poolsBalances", "poolsTokens"), ("proposed_admin", "settings"))))) }
tviews = { "getNextPoolNonce": ((), sp.TNat), "getPoolTokens": (sp.TPair(sp.TAddress, sp.TNat), sp.TPair(sp.TMap(sp.TNat, sp.TPair(sp.TAddress, sp.TOption(sp.TNat))), sp.TMap(sp.TNat, sp.TNat))) }
