import smartpy as sp

tstorage = sp.TRecord(fixedPoint = sp.TBigMap(sp.TNat, sp.TLambda(sp.TPair(sp.TNat, sp.TNat), sp.TNat))).layout("fixedPoint")
tparameter = sp.TUnit
tprivates = { }
tviews = { "getPostJoinExitProtocolFees": (sp.TRecord(balanceDeltas = sp.TMap(sp.TNat, sp.TNat), normalizedWeights = sp.TMap(sp.TNat, sp.TNat), postJoinExitSupply = sp.TNat, preBalances = sp.TMap(sp.TNat, sp.TNat), preJoinExitInvariant = sp.TNat, preJoinExitSupply = sp.TNat, swapFee = sp.TNat).layout((("balanceDeltas", ("normalizedWeights", "postJoinExitSupply")), (("preBalances", "preJoinExitInvariant"), ("preJoinExitSupply", "swapFee")))), sp.TPair(sp.TNat, sp.TNat)), "getPreJoinExitProtocolFees": (sp.TRecord(athRateProduct = sp.TNat, exemptFromYieldFees = sp.TBool, normalizedWeights = sp.TMap(sp.TNat, sp.TNat), postJoinExitInvariant = sp.TNat, preJoinExitInvariant = sp.TNat, preJoinExitSupply = sp.TNat, rateProviders = sp.TOption(sp.TMap(sp.TNat, sp.TOption(sp.TAddress))), swapFee = sp.TNat, yieldFee = sp.TNat).layout(((("athRateProduct", "exemptFromYieldFees"), ("normalizedWeights", "postJoinExitInvariant")), (("preJoinExitInvariant", "preJoinExitSupply"), ("rateProviders", ("swapFee", "yieldFee"))))), sp.TPair(sp.TNat, sp.TNat)), "getRateProduct": (sp.TRecord(normalizedWeights = sp.TMap(sp.TNat, sp.TNat), rateProviders = sp.TMap(sp.TNat, sp.TOption(sp.TAddress))).layout(("normalizedWeights", "rateProviders")), sp.TNat) }
