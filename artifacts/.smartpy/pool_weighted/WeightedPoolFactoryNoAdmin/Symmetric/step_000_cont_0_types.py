import smartpy as sp

tstorage = sp.TRecord(admin = sp.TAddress, balances = sp.TBigMap(sp.TAddress, sp.TRecord(approvals = sp.TMap(sp.TAddress, sp.TNat), balance = sp.TNat).layout(("approvals", "balance"))), entries = sp.TBigMap(sp.TIntOrNat, sp.TNat), exemptFromYieldFees = sp.TBool, feeCache = sp.TPair(sp.TNat, sp.TNat), fixedPoint = sp.TBigMap(sp.TNat, sp.TLambda(sp.TPair(sp.TNat, sp.TNat), sp.TNat)), getTokenValue = sp.TLambda(sp.TTuple(sp.TPair(sp.TAddress, sp.TOption(sp.TNat)), sp.TMap(sp.TNat, sp.TPair(sp.TAddress, sp.TOption(sp.TNat))), sp.TMap(sp.TNat, sp.TNat)), sp.TNat), initialized = sp.TBool, metadata = sp.TBigMap(sp.TString, sp.TBytes), normalizedWeights = sp.TMap(sp.TNat, sp.TNat), poolId = sp.TOption(sp.TPair(sp.TAddress, sp.TNat)), proposed_admin = sp.TOption(sp.TAddress), protocolFeesCollector = sp.TAddress, rateProviders = sp.TOption(sp.TMap(sp.TNat, sp.TOption(sp.TAddress))), recoveryMode = sp.TBool, scalingFactors = sp.TMap(sp.TNat, sp.TNat), scaling_helpers = sp.TBigMap(sp.TIntOrNat, sp.TLambda(sp.TTuple(sp.TMap(sp.TNat, sp.TNat), sp.TMap(sp.TNat, sp.TNat), sp.TLambda(sp.TPair(sp.TNat, sp.TNat), sp.TNat)), sp.TMap(sp.TNat, sp.TNat))), settings = sp.TRecord(paused = sp.TBool).layout("paused"), token_metadata = sp.TBigMap(sp.TNat, sp.TRecord(token_id = sp.TNat, token_info = sp.TMap(sp.TString, sp.TBytes)).layout(("token_id", "token_info"))), tokens = sp.TMap(sp.TNat, sp.TPair(sp.TAddress, sp.TOption(sp.TNat))), totalSupply = sp.TNat, vault = sp.TAddress, weightedMathLib = sp.TAddress, weightedProtocolFeesLib = sp.TAddress).layout((((("admin", ("balances", "entries")), ("exemptFromYieldFees", ("feeCache", "fixedPoint"))), (("getTokenValue", ("initialized", "metadata")), ("normalizedWeights", ("poolId", "proposed_admin")))), ((("protocolFeesCollector", ("rateProviders", "recoveryMode")), ("scalingFactors", ("scaling_helpers", "settings"))), (("token_metadata", ("tokens", "totalSupply")), ("vault", ("weightedMathLib", "weightedProtocolFeesLib"))))))
tparameter = sp.TVariant(accept_admin = sp.TUnit, afterExitPool = sp.TRecord(amountsOut = sp.TMap(sp.TNat, sp.TNat), balances = sp.TMap(sp.TNat, sp.TNat), invariant = sp.TNat, poolId = sp.TPair(sp.TAddress, sp.TNat), recoveryModeExit = sp.TBool, sender = sp.TAddress, sptAmountIn = sp.TNat).layout((("amountsOut", ("balances", "invariant")), (("poolId", "recoveryModeExit"), ("sender", "sptAmountIn")))), afterJoinPool = sp.TRecord(amountsIn = sp.TMap(sp.TNat, sp.TNat), balances = sp.TMap(sp.TNat, sp.TNat), invariant = sp.TNat, poolId = sp.TPair(sp.TAddress, sp.TNat), recipient = sp.TAddress, sptAmountOut = sp.TNat).layout((("amountsIn", ("balances", "invariant")), ("poolId", ("recipient", "sptAmountOut")))), approve = sp.TRecord(spender = sp.TAddress, value = sp.TNat).layout(("spender", "value")), disableRecoveryMode = sp.TUnit, enableRecoveryMode = sp.TUnit, initializePool = sp.TUnit, run_lambda = sp.TLambda(sp.TUnit, sp.TList(sp.TOperation), with_storage="read-write", tstorage=sp.TRecord(admin = sp.TAddress, balances = sp.TBigMap(sp.TAddress, sp.TRecord(approvals = sp.TMap(sp.TAddress, sp.TNat), balance = sp.TNat).layout(("approvals", "balance"))), entries = sp.TBigMap(sp.TIntOrNat, sp.TNat), exemptFromYieldFees = sp.TBool, feeCache = sp.TPair(sp.TNat, sp.TNat), fixedPoint = sp.TBigMap(sp.TNat, sp.TLambda(sp.TPair(sp.TNat, sp.TNat), sp.TNat)), getTokenValue = sp.TLambda(sp.TTuple(sp.TPair(sp.TAddress, sp.TOption(sp.TNat)), sp.TMap(sp.TNat, sp.TPair(sp.TAddress, sp.TOption(sp.TNat))), sp.TMap(sp.TNat, sp.TNat)), sp.TNat), initialized = sp.TBool, metadata = sp.TBigMap(sp.TString, sp.TBytes), normalizedWeights = sp.TMap(sp.TNat, sp.TNat), poolId = sp.TOption(sp.TPair(sp.TAddress, sp.TNat)), proposed_admin = sp.TOption(sp.TAddress), protocolFeesCollector = sp.TAddress, rateProviders = sp.TOption(sp.TMap(sp.TNat, sp.TOption(sp.TAddress))), recoveryMode = sp.TBool, scalingFactors = sp.TMap(sp.TNat, sp.TNat), scaling_helpers = sp.TBigMap(sp.TIntOrNat, sp.TLambda(sp.TTuple(sp.TMap(sp.TNat, sp.TNat), sp.TMap(sp.TNat, sp.TNat), sp.TLambda(sp.TPair(sp.TNat, sp.TNat), sp.TNat)), sp.TMap(sp.TNat, sp.TNat))), settings = sp.TRecord(paused = sp.TBool).layout("paused"), token_metadata = sp.TBigMap(sp.TNat, sp.TRecord(token_id = sp.TNat, token_info = sp.TMap(sp.TString, sp.TBytes)).layout(("token_id", "token_info"))), tokens = sp.TMap(sp.TNat, sp.TPair(sp.TAddress, sp.TOption(sp.TNat))), totalSupply = sp.TNat, vault = sp.TAddress, weightedMathLib = sp.TAddress, weightedProtocolFeesLib = sp.TAddress).layout((((("admin", ("balances", "entries")), ("exemptFromYieldFees", ("feeCache", "fixedPoint"))), (("getTokenValue", ("initialized", "metadata")), ("normalizedWeights", ("poolId", "proposed_admin")))), ((("protocolFeesCollector", ("rateProviders", "recoveryMode")), ("scalingFactors", ("scaling_helpers", "settings"))), (("token_metadata", ("tokens", "totalSupply")), ("vault", ("weightedMathLib", "weightedProtocolFeesLib")))))), with_operations=True), setSwapFeePercentage = sp.TNat, set_paused = sp.TBool, transfer = sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), transfer_admin = sp.TAddress, updateProtocolFeePercentageCache = sp.TUnit).layout(((("accept_admin", ("afterExitPool", "afterJoinPool")), ("approve", ("disableRecoveryMode", "enableRecoveryMode"))), (("initializePool", ("run_lambda", "setSwapFeePercentage")), (("set_paused", "transfer"), ("transfer_admin", "updateProtocolFeePercentageCache")))))
tprivates = { "onlyVault": sp.TLambda(sp.TOption(sp.TPair(sp.TAddress, sp.TNat)), sp.TUnit, with_storage="read-only", tstorage=sp.TRecord(admin = sp.TAddress, balances = sp.TBigMap(sp.TAddress, sp.TRecord(approvals = sp.TMap(sp.TAddress, sp.TNat), balance = sp.TNat).layout(("approvals", "balance"))), entries = sp.TBigMap(sp.TIntOrNat, sp.TNat), exemptFromYieldFees = sp.TBool, feeCache = sp.TPair(sp.TNat, sp.TNat), fixedPoint = sp.TBigMap(sp.TNat, sp.TLambda(sp.TPair(sp.TNat, sp.TNat), sp.TNat)), getTokenValue = sp.TLambda(sp.TTuple(sp.TPair(sp.TAddress, sp.TOption(sp.TNat)), sp.TMap(sp.TNat, sp.TPair(sp.TAddress, sp.TOption(sp.TNat))), sp.TMap(sp.TNat, sp.TNat)), sp.TNat), initialized = sp.TBool, metadata = sp.TBigMap(sp.TString, sp.TBytes), normalizedWeights = sp.TMap(sp.TNat, sp.TNat), poolId = sp.TOption(sp.TPair(sp.TAddress, sp.TNat)), proposed_admin = sp.TOption(sp.TAddress), protocolFeesCollector = sp.TAddress, rateProviders = sp.TOption(sp.TMap(sp.TNat, sp.TOption(sp.TAddress))), recoveryMode = sp.TBool, scalingFactors = sp.TMap(sp.TNat, sp.TNat), scaling_helpers = sp.TBigMap(sp.TIntOrNat, sp.TLambda(sp.TTuple(sp.TMap(sp.TNat, sp.TNat), sp.TMap(sp.TNat, sp.TNat), sp.TLambda(sp.TPair(sp.TNat, sp.TNat), sp.TNat)), sp.TMap(sp.TNat, sp.TNat))), settings = sp.TRecord(paused = sp.TBool).layout("paused"), token_metadata = sp.TBigMap(sp.TNat, sp.TRecord(token_id = sp.TNat, token_info = sp.TMap(sp.TString, sp.TBytes)).layout(("token_id", "token_info"))), tokens = sp.TMap(sp.TNat, sp.TPair(sp.TAddress, sp.TOption(sp.TNat))), totalSupply = sp.TNat, vault = sp.TAddress, weightedMathLib = sp.TAddress, weightedProtocolFeesLib = sp.TAddress).layout((((("admin", ("balances", "entries")), ("exemptFromYieldFees", ("feeCache", "fixedPoint"))), (("getTokenValue", ("initialized", "metadata")), ("normalizedWeights", ("poolId", "proposed_admin")))), ((("protocolFeesCollector", ("rateProviders", "recoveryMode")), ("scalingFactors", ("scaling_helpers", "settings"))), (("token_metadata", ("tokens", "totalSupply")), ("vault", ("weightedMathLib", "weightedProtocolFeesLib"))))))) }
tviews = { "beforeExitPool": (sp.TRecord(balances = sp.TMap(sp.TNat, sp.TNat), userData = sp.TRecord(amountsOut = sp.TOption(sp.TMap(sp.TNat, sp.TNat)), kind = sp.TNat, maxSPTAmountIn = sp.TOption(sp.TNat), recoveryModeExit = sp.TBool, sptAmountIn = sp.TOption(sp.TNat), tokenIndex = sp.TOption(sp.TNat)).layout((("amountsOut", ("kind", "maxSPTAmountIn")), ("recoveryModeExit", ("sptAmountIn", "tokenIndex"))))).layout(("balances", "userData")), sp.TTuple(sp.TNat, sp.TMap(sp.TNat, sp.TNat), sp.TNat)), "beforeJoinPool": (sp.TRecord(balances = sp.TMap(sp.TNat, sp.TNat), userData = sp.TRecord(allT = sp.TOption(sp.TNat), amountsIn = sp.TOption(sp.TMap(sp.TNat, sp.TNat)), kind = sp.TNat, minSPTAmountOut = sp.TOption(sp.TNat), sptAmountOut = sp.TOption(sp.TNat), tokenIndex = sp.TOption(sp.TNat)).layout((("allT", ("amountsIn", "kind")), ("minSPTAmountOut", ("sptAmountOut", "tokenIndex"))))).layout(("balances", "userData")), sp.TTuple(sp.TNat, sp.TMap(sp.TNat, sp.TNat), sp.TNat)), "getActualSupply": ((), sp.TNat), "getAllowance": (sp.TRecord(owner = sp.TAddress, spender = sp.TAddress).layout(("owner", "spender")), sp.TNat), "getBalance": (sp.TAddress, sp.TNat), "getInvariant": ((), sp.TNat), "getTotalSupply": ((), sp.TNat), "getVault": ((), sp.TAddress), "onSwap": (sp.TRecord(balanceTokenIn = sp.TNat, balanceTokenOut = sp.TNat, request = sp.TRecord(amount = sp.TNat, kind = sp.TNat, tokenIn = sp.TPair(sp.TAddress, sp.TOption(sp.TNat)), tokenOut = sp.TPair(sp.TAddress, sp.TOption(sp.TNat))).layout((("amount", "kind"), ("tokenIn", "tokenOut")))).layout(("balanceTokenIn", ("balanceTokenOut", "request"))), sp.TNat) }
