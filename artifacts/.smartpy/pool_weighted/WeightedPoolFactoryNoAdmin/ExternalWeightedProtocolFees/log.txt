Creating contract KT1TezoooozzSmartPyzzSTATiCzzzwwBFA1
 -> {Elt 20 { PUSH nat 1000000000000000000; SWAP; UNPAIR; MUL; EDIV; IF_NONE { PUSH int 27; FAILWITH } { CAR } }; Elt 22 { PUSH nat 0; DUP 2; CDR; COMPARE; NEQ; IF {} { PUSH string "WrongCondition: sp.snd(_x2) != 0"; FAILWITH }; DUP; CDR; PUSH nat 1000000000000000000; DIG 2; CAR; MUL; EDIV; IF_NONE { PUSH int 63; FAILWITH } { CAR } }; Elt 24 { DUP; UNPAIR; PUSH nat 0; PUSH nat 1000000000000000000; DUP 4; COMPARE; EQ; IF { DROP; DUP } {}; PUSH nat 2000000000000000000; DUP 4; COMPARE; EQ; IF { DROP; PUSH nat 1000000000000000000; DUP 2; DUP 3; MUL; EDIV; IF_NONE { PUSH int 93; FAILWITH } { CAR } } {}; PUSH nat 4000000000000000000; DUP 4; COMPARE; EQ; IF { DROP; PUSH nat 1000000000000000000; DUP; DUP 3; DUP 4; MUL; EDIV; IF_NONE { PUSH int 93; FAILWITH } { CAR }; PUSH nat 1000000000000000000; DUP 4; DUP 5; MUL; EDIV; IF_NONE { PUSH int 93; FAILWITH } { CAR }; MUL; EDIV; IF_NONE { PUSH int 93; FAILWITH } { CAR } } {}; PUSH nat 1000000000000000000; DUP 4; COMPARE; NEQ; IF { PUSH nat 2000000000000000000; DUP 4; COMPARE; NEQ } { PUSH bool False }; IF { PUSH nat 4000000000000000000; DUP 4; COMPARE; NEQ } { PUSH bool False }; IF { DUP 2; PUSH int 0; PUSH nat 0; DUP 5; COMPARE; LE; IF { PUSH string "PRBMath_SD59x18_Log_InputTooSmall"; FAILWITH } {}; PUSH nat 1000000000000000000; DUP 5; COMPARE; GE; IF { PUSH int 1 } { SWAP; DROP; PUSH int -1; DUP 4; PUSH nat 1000000000000000000000000000000000000; EDIV; IF_NONE { PUSH int 174; FAILWITH } { CAR }; DUG 2 }; PUSH nat 0; PUSH nat 1000000000000000000; DUP 5; EDIV; IF_NONE { PUSH int 176; FAILWITH } { CAR }; PUSH nat 340282366920938463463374607431768211455; DUP 2; COMPARE; GT; IF { PUSH nat 128; SWAP; LSR; SWAP; PUSH nat 128; OR; SWAP } {}; PUSH nat 18446744073709551615; DUP 2; COMPARE; GT; IF { PUSH nat 64; SWAP; LSR; SWAP; PUSH nat 64; OR; SWAP } {}; PUSH nat 4294967295; DUP 2; COMPARE; GT; IF { PUSH nat 32; SWAP; LSR; SWAP; PUSH nat 32; OR; SWAP } {}; PUSH nat 65535; DUP 2; COMPARE; GT; IF { PUSH nat 16; SWAP; LSR; SWAP; PUSH nat 16; OR; SWAP } {}; PUSH nat 255; DUP 2; COMPARE; GT; IF { PUSH nat 8; SWAP; LSR; SWAP; PUSH nat 8; OR; SWAP } {}; PUSH nat 15; DUP 2; COMPARE; GT; IF { PUSH nat 4; SWAP; LSR; SWAP; PUSH nat 4; OR; SWAP } {}; PUSH nat 3; DUP 2; COMPARE; GT; IF { PUSH nat 2; SWAP; LSR; SWAP; PUSH nat 2; OR; SWAP } {}; PUSH nat 1; DUP 2; COMPARE; GT; IF { PUSH nat 1; SWAP; LSR; SWAP; PUSH nat 1; OR; SWAP } {}; PUSH nat 1000000000000000000; INT; DUP 3; INT; MUL; DUP 3; DUP 7; LSR; PUSH nat 1000000000000000000; DUP 2; COMPARE; EQ; IF { DIG 5; DROP; DUP 5; DUP 3; MUL; DUG 5 } {}; PUSH int 0; DUP 7; COMPARE; EQ; IF { PUSH nat 500000000000000000; PUSH nat 0; DUP 2; COMPARE; GT; LOOP { PUSH nat 1000000000000000000; DIG 2; DUP; MUL; EDIV; IF_NONE { PUSH int 187; FAILWITH } { CAR }; SWAP; PUSH nat 2000000000000000000; DUP 3; COMPARE; GE; IF { DIG 2; DUP 2; INT; ADD; DUG 2; PUSH nat 1; DIG 2; LSR; SWAP } {}; PUSH nat 1; SWAP; LSR; PUSH nat 0; DUP 2; COMPARE; GT }; DIG 6; DROP 2; DUP 5; DUP 3; MUL; DUG 5 } {}; PUSH nat 0; PUSH int -59794705707972522261; PUSH int 1000000000000000000; DUP 9; DUP 14; INT; MUL; EDIV; IF_NONE { PUSH int 11; FAILWITH } { CAR }; COMPARE; LT; IF { DROP; DIG 7; DROP; PUSH nat 0 } { DIG 7; DROP; PUSH nat 0; DUG 7; PUSH bool False; PUSH int 0; PUSH int 1000000000000000000; DUP 10; DUP 15; INT; MUL; EDIV; IF_NONE { PUSH int 11; FAILWITH } { CAR }; COMPARE; LT; IF { DROP; DIG 7; DROP; PUSH bool True; PUSH int 1000000000000000000; DUP 9; DUP 13; INT; MUL; EDIV; IF_NONE { PUSH int 11; FAILWITH } { CAR }; ABS; DUG 8 } { DIG 8; DROP; PUSH int 1000000000000000000; DUP 9; DUP 13; INT; MUL; EDIV; IF_NONE { PUSH int 11; FAILWITH } { CAR }; ISNAT; IF_NONE { PUSH int 128; FAILWITH } {}; DUG 8 }; PUSH nat 192000000000000000000; DUP 10; COMPARE; GE; IF { PUSH string "PRBMath_SD59x18_Exp2_InputTooBig"; FAILWITH } { PUSH bool True; DUP 2; COMPARE; EQ; IF { PUSH nat 3138550867693340381917894711603833208051177722232017256448; PUSH (list (pair nat (list (pair nat nat)))) {Pair 18374686479671623680 {Pair 9223372036854775808 26087635650665564425; Pair 4611686018427387904 21936999301089678047; Pair 2305843009213693952 20116317054877281742; Pair 1152921504606846976 19263451207323153962; Pair 576460752303423488 18850675170876015534; Pair 288230376151711744 18647615946650685159; Pair 144115188075855872 18546908069882975960; Pair 72057594037927936 18496758270674070881}; Pair 71776119061217280 {Pair 36028797018963968 18471734244850835106; Pair 18014398509481984 18459234930309000272; Pair 9007199254740992 18452988445124272033; Pair 4503599627370496 18449865995240371898; Pair 2251799813685248 18448304968436414829; Pair 1125899906842624 18447524504564044946; Pair 562949953421312 18447134285009651015; Pair 281474976710656 18446939178327825412}; Pair 280375465082880 {Pair 140737488355328 18446841625760745902; Pair 70368744177664 18446792849670663277; Pair 35184372088832 18446768461673986097; Pair 17592186044416 18446756267687738522; Pair 8796093022208 18446750170697637486; Pair 4398046511104 18446747122203342655; Pair 2199023255552 18446745597956384162; Pair 1099511627776 18446744835832952145}; Pair 1095216660480 {Pair 549755813888 18446744454771247945; Pair 274877906944 18446744264240398796; Pair 137438953472 18446744168974974960; Pair 68719476736 18446744121342263227; Pair 34359738368 18446744097525907406; Pair 17179869184 18446744085617729507; Pair 8589934592 18446744079663640561; Pair 4294967296 18446744076686596088}; Pair 4278190080 {Pair 2147483648 18446744075198073852; Pair 1073741824 18446744074453812734; Pair 536870912 18446744074081682175; Pair 268435456 18446744073895616895; Pair 134217728 18446744073802584256; Pair 67108864 18446744073756067936; Pair 33554432 18446744073732809776; Pair 16777216 18446744073721180696}; Pair 16711680 {Pair 8388608 18446744073715366156; Pair 4194304 18446744073712458886; Pair 2097152 18446744073711005251; Pair 1048576 18446744073710278433; Pair 524288 18446744073709915025; Pair 262144 18446744073709733320; Pair 131072 18446744073709642468; Pair 65536 18446744073709597042}; Pair 65280 {Pair 32768 18446744073709574329; Pair 16384 18446744073709562973; Pair 8192 18446744073709557294; Pair 4096 18446744073709554455; Pair 2048 18446744073709553036; Pair 1024 18446744073709552326; Pair 512 18446744073709551971; Pair 256 18446744073709551793}; Pair 4080 {Pair 128 18446744073709551705; Pair 64 18446744073709551660; Pair 32 18446744073709551638; Pair 16 18446744073709551627; Pair 8 18446744073709551622; Pair 4 18446744073709551619; Pair 2 18446744073709551617; Pair 1 18446744073709551617}}; ITER { DUP; UNPAIR; PUSH nat 0; DUP 2; PUSH nat 1000000000000000000; PUSH nat 64; DUP 17; LSL; EDIV; IF_NONE { PUSH int 134; FAILWITH } { CAR }; AND; COMPARE; GT; IF { DUP 2; ITER { DUP; UNPAIR; PUSH nat 0; SWAP; PUSH nat 1000000000000000000; PUSH nat 64; DUP 19; LSL; EDIV; IF_NONE { PUSH int 134; FAILWITH } { CAR }; AND; COMPARE; GT; IF { SWAP; DROP; PUSH nat 64; SWAP; DIG 5; MUL; LSR; DUG 3 } { DROP 2 } }; DROP 3 } { DROP 3 } }; SWAP; DROP; SWAP; DROP; DIG 8; DROP; PUSH nat 1000000000000000000; SWAP; MUL; PUSH nat 64; PUSH nat 1000000000000000000; PUSH nat 64; DUP 11; LSL; EDIV; IF_NONE { PUSH int 134; FAILWITH } { CAR }; LSR; PUSH nat 191; SUB; ISNAT; IF_NONE { PUSH int 108; FAILWITH } {}; SWAP; LSR; PUSH nat 1000000000000000000000000000000000000; EDIV; IF_NONE { PUSH int 137; FAILWITH } { CAR } } { PUSH nat 3138550867693340381917894711603833208051177722232017256448; PUSH (list (pair nat (list (pair nat nat)))) {Pair 18374686479671623680 {Pair 9223372036854775808 26087635650665564425; Pair 4611686018427387904 21936999301089678047; Pair 2305843009213693952 20116317054877281742; Pair 1152921504606846976 19263451207323153962; Pair 576460752303423488 18850675170876015534; Pair 288230376151711744 18647615946650685159; Pair 144115188075855872 18546908069882975960; Pair 72057594037927936 18496758270674070881}; Pair 71776119061217280 {Pair 36028797018963968 18471734244850835106; Pair 18014398509481984 18459234930309000272; Pair 9007199254740992 18452988445124272033; Pair 4503599627370496 18449865995240371898; Pair 2251799813685248 18448304968436414829; Pair 1125899906842624 18447524504564044946; Pair 562949953421312 18447134285009651015; Pair 281474976710656 18446939178327825412}; Pair 280375465082880 {Pair 140737488355328 18446841625760745902; Pair 70368744177664 18446792849670663277; Pair 35184372088832 18446768461673986097; Pair 17592186044416 18446756267687738522; Pair 8796093022208 18446750170697637486; Pair 4398046511104 18446747122203342655; Pair 2199023255552 18446745597956384162; Pair 1099511627776 18446744835832952145}; Pair 1095216660480 {Pair 549755813888 18446744454771247945; Pair 274877906944 18446744264240398796; Pair 137438953472 18446744168974974960; Pair 68719476736 18446744121342263227; Pair 34359738368 18446744097525907406; Pair 17179869184 18446744085617729507; Pair 8589934592 18446744079663640561; Pair 4294967296 18446744076686596088}; Pair 4278190080 {Pair 2147483648 18446744075198073852; Pair 1073741824 18446744074453812734; Pair 536870912 18446744074081682175; Pair 268435456 18446744073895616895; Pair 134217728 18446744073802584256; Pair 67108864 18446744073756067936; Pair 33554432 18446744073732809776; Pair 16777216 18446744073721180696}; Pair 16711680 {Pair 8388608 18446744073715366156; Pair 4194304 18446744073712458886; Pair 2097152 18446744073711005251; Pair 1048576 18446744073710278433; Pair 524288 18446744073709915025; Pair 262144 18446744073709733320; Pair 131072 18446744073709642468; Pair 65536 18446744073709597042}; Pair 65280 {Pair 32768 18446744073709574329; Pair 16384 18446744073709562973; Pair 8192 18446744073709557294; Pair 4096 18446744073709554455; Pair 2048 18446744073709553036; Pair 1024 18446744073709552326; Pair 512 18446744073709551971; Pair 256 18446744073709551793}; Pair 4080 {Pair 128 18446744073709551705; Pair 64 18446744073709551660; Pair 32 18446744073709551638; Pair 16 18446744073709551627; Pair 8 18446744073709551622; Pair 4 18446744073709551619; Pair 2 18446744073709551617; Pair 1 18446744073709551617}}; ITER { DUP; UNPAIR; PUSH nat 0; DUP 2; PUSH nat 1000000000000000000; PUSH nat 64; DUP 17; LSL; EDIV; IF_NONE { PUSH int 134; FAILWITH } { CAR }; AND; COMPARE; GT; IF { DUP 2; ITER { DUP; UNPAIR; PUSH nat 0; SWAP; PUSH nat 1000000000000000000; PUSH nat 64; DUP 19; LSL; EDIV; IF_NONE { PUSH int 134; FAILWITH } { CAR }; AND; COMPARE; GT; IF { SWAP; DROP; PUSH nat 64; SWAP; DIG 5; MUL; LSR; DUG 3 } { DROP 2 } }; DROP 3 } { DROP 3 } }; SWAP; DROP; SWAP; DROP; DIG 8; DROP; PUSH nat 1000000000000000000; SWAP; MUL; PUSH nat 64; PUSH nat 1000000000000000000; PUSH nat 64; DUP 11; LSL; EDIV; IF_NONE { PUSH int 134; FAILWITH } { CAR }; LSR; PUSH nat 191; SUB; ISNAT; IF_NONE { PUSH int 108; FAILWITH } {}; SWAP; LSR } } }; PUSH nat 1; PUSH int 1; PUSH nat 1000000000000000000; PUSH nat 1; PUSH nat 10000; DUP 6; MUL; SUB; EDIV; IF_NONE { PUSH int 95; FAILWITH } {}; CAR; ADD; ISNAT; IF_NONE { PUSH int 94; FAILWITH } {}; ADD; DUP 2; COMPARE; LT; IF { DROP 11; PUSH nat 0 } { SWAP; DROP; SWAP; DROP; SWAP; DROP; SWAP; DROP; SWAP; DROP; SWAP; DROP; SWAP; DROP; SWAP; DROP; SWAP; DROP; SWAP; DROP; PUSH nat 1; PUSH int 1; PUSH nat 1000000000000000000; PUSH nat 1; PUSH nat 10000; DUP 6; MUL; SUB; EDIV; IF_NONE { PUSH int 95; FAILWITH } {}; CAR; ADD; ISNAT; IF_NONE { PUSH int 94; FAILWITH } {}; ADD; SWAP; SUB; ISNAT; IF_NONE { PUSH int 117; FAILWITH } {} } } { SWAP; DROP; SWAP; DROP; SWAP; DROP } }}
 => /Users/stephen/Documents/GitHub/symmetric-tezos-contracts/artifacts/.smartpy/pool_weighted/WeightedPoolFactoryNoAdmin/ExternalWeightedProtocolFees/step_000_cont_0_storage.tz 1
 => /Users/stephen/Documents/GitHub/symmetric-tezos-contracts/artifacts/.smartpy/pool_weighted/WeightedPoolFactoryNoAdmin/ExternalWeightedProtocolFees/step_000_cont_0_storage.json 1067
 => /Users/stephen/Documents/GitHub/symmetric-tezos-contracts/artifacts/.smartpy/pool_weighted/WeightedPoolFactoryNoAdmin/ExternalWeightedProtocolFees/step_000_cont_0_sizes.csv 2
 => /Users/stephen/Documents/GitHub/symmetric-tezos-contracts/artifacts/.smartpy/pool_weighted/WeightedPoolFactoryNoAdmin/ExternalWeightedProtocolFees/step_000_cont_0_storage.py 1
 => /Users/stephen/Documents/GitHub/symmetric-tezos-contracts/artifacts/.smartpy/pool_weighted/WeightedPoolFactoryNoAdmin/ExternalWeightedProtocolFees/step_000_cont_0_types.py 7
 => /Users/stephen/Documents/GitHub/symmetric-tezos-contracts/artifacts/.smartpy/pool_weighted/WeightedPoolFactoryNoAdmin/ExternalWeightedProtocolFees/step_000_cont_0_contract.tz 1259
 => /Users/stephen/Documents/GitHub/symmetric-tezos-contracts/artifacts/.smartpy/pool_weighted/WeightedPoolFactoryNoAdmin/ExternalWeightedProtocolFees/step_000_cont_0_contract.json 988
 => /Users/stephen/Documents/GitHub/symmetric-tezos-contracts/artifacts/.smartpy/pool_weighted/WeightedPoolFactoryNoAdmin/ExternalWeightedProtocolFees/step_000_cont_0_contract.py 8
 => /Users/stephen/Documents/GitHub/symmetric-tezos-contracts/artifacts/.smartpy/pool_weighted/WeightedPoolFactoryNoAdmin/ExternalWeightedProtocolFees/step_000_cont_0_contract.py.html 1918
 => /Users/stephen/Documents/GitHub/symmetric-tezos-contracts/artifacts/.smartpy/pool_weighted/WeightedPoolFactoryNoAdmin/ExternalWeightedProtocolFees/log.html 1919
