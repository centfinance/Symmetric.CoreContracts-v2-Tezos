import smartpy as sp

tstorage = sp.TRecord(fixedPoint = sp.TBigMap(sp.TNat, sp.TLambda(sp.TPair(sp.TNat, sp.TNat), sp.TNat))).layout("fixedPoint")
tparameter = sp.TUnit
tprivates = { }
tviews = { "calcInGivenOut": (sp.TRecord(amountOut = sp.TNat, balanceIn = sp.TNat, balanceOut = sp.TNat, weightIn = sp.TNat, weightOut = sp.TNat).layout((("amountOut", "balanceIn"), ("balanceOut", ("weightIn", "weightOut")))), sp.TNat), "calcOutGivenIn": (sp.TRecord(amountIn = sp.TNat, balanceIn = sp.TNat, balanceOut = sp.TNat, weightIn = sp.TNat, weightOut = sp.TNat).layout((("amountIn", "balanceIn"), ("balanceOut", ("weightIn", "weightOut")))), sp.TNat), "calcSptInGivenExactTokensOut": (sp.TRecord(amountsOut = sp.TMap(sp.TNat, sp.TNat), balances = sp.TMap(sp.TNat, sp.TNat), normalizedWeights = sp.TMap(sp.TNat, sp.TNat), swapFeePercentage = sp.TNat, totalSupply = sp.TNat).layout((("amountsOut", "balances"), ("normalizedWeights", ("swapFeePercentage", "totalSupply")))), sp.TNat), "calcSptOutGivenExactTokensIn": (sp.TRecord(amountsIn = sp.TMap(sp.TNat, sp.TNat), balances = sp.TMap(sp.TNat, sp.TNat), normalizedWeights = sp.TMap(sp.TNat, sp.TNat), swapFeePercentage = sp.TNat, totalSupply = sp.TNat).layout((("amountsIn", "balances"), ("normalizedWeights", ("swapFeePercentage", "totalSupply")))), sp.TNat), "calcTokenInGivenExactSptOut": (sp.TRecord(balance = sp.TNat, normalizedWeight = sp.TNat, sptAmountOut = sp.TNat, sptTotalSupply = sp.TNat, swapFeePercentage = sp.TNat).layout((("balance", "normalizedWeight"), ("sptAmountOut", ("sptTotalSupply", "swapFeePercentage")))), sp.TNat), "calcTokenOutGivenExactSptIn": (sp.TRecord(balance = sp.TNat, normalizedWeight = sp.TNat, sptAmountIn = sp.TNat, sptTotalSupply = sp.TNat, swapFeePercentage = sp.TNat).layout((("balance", "normalizedWeight"), ("sptAmountIn", ("sptTotalSupply", "swapFeePercentage")))), sp.TNat), "calculateInvariant": (sp.TRecord(balances = sp.TMap(sp.TNat, sp.TNat), normalizedWeights = sp.TMap(sp.TNat, sp.TNat)).layout(("balances", "normalizedWeights")), sp.TNat) }
