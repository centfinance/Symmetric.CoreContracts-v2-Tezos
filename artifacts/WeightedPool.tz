parameter (or (or (or (unit %accept_admin) (or (pair %afterExitPool (pair (map %amountsOut nat nat) (pair (map %balances nat nat) (nat %invariant))) (pair (pair (pair %poolId address nat) (bool %recoveryModeExit)) (pair (address %sender) (nat %sptAmountIn)))) (pair %afterJoinPool (pair (map %amountsIn nat nat) (pair (map %balances nat nat) (nat %invariant))) (pair (pair %poolId address nat) (pair (address %recipient) (nat %sptAmountOut)))))) (or (pair %approve (address %spender) (nat %value)) (or (unit %disableRecoveryMode) (unit %enableRecoveryMode)))) (or (or (unit %initializePool) (or (lambda %run_lambda (pair unit (pair (list operation) (pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))))) (pair (list operation) (pair (list operation) (pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))))))) (nat %setSwapFeePercentage))) (or (or (bool %set_paused) (pair %transfer (address %from) (pair (address %to) (nat %value)))) (or (address %transfer_admin) (unit %updateProtocolFeePercentageCache)))));
storage   (pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))));
code
  {
    # Private variable: onlyVault # pair @parameter @storage
    LAMBDA
      (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
      (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
      {
        UNPAIR;     # option (pair address nat) : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))
        # sp.verify(sp.sender == self.data.vault) # option (pair address nat) : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))
        DUP 2;      # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))) : option (pair address nat) : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))
        GET 7;      # address : option (pair address nat) : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))
        SENDER;     # @sender : address : option (pair address nat) : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))
        COMPARE;    # int : option (pair address nat) : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))
        EQ;         # bool : option (pair address nat) : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))
        IF
          {}
          {
            PUSH string "WrongCondition: sp.sender == self.data.vault"; # string : option (pair address nat) : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))
            FAILWITH;   # FAILED
          }; # option (pair address nat) : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))
        # sp.verify(_x0 == self.data.poolId) # option (pair address nat) : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))
        DUP 2;      # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))) : option (pair address nat) : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))
        CAR;        # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address)))) : option (pair address nat) : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))
        GET 7;      # option (pair address nat) : option (pair address nat) : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))
        COMPARE;    # int : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))
        EQ;         # bool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))
        IF
          {}
          {
            PUSH string "WrongCondition: _x0 == self.data.poolId"; # string : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))
            FAILWITH;   # FAILED
          }; # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))
        UNIT;       # unit : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))
        PAIR;       # pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))
      }; # lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) : pair @parameter @storage
    SWAP;       # pair @parameter @storage : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
    UNPAIR;     # @parameter : @storage : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
    IF_LEFT
      {
        IF_LEFT
          {
            DIG 2;      # lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) : @parameter.left.left : @storage
            DROP;       # @parameter.left.left : @storage
            IF_LEFT
              {
                DROP;       # @storage
                # == accept_admin ==
                # sp.verify(sp.some(sp.sender) == self.data.proposed_admin, 'NOT_PROPOSED_ADMIN') # @storage
                DUP;        # @storage : @storage
                CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @storage
                GET 8;      # option address : @storage
                SENDER;     # @sender : option address : @storage
                SOME;       # option address : option address : @storage
                COMPARE;    # int : @storage
                EQ;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "NOT_PROPOSED_ADMIN"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # self.data.admin = sp.sender # @storage
                UNPAIR;     # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                UNPAIR;     # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                UNPAIR;     # pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                CDR;        # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                SENDER;     # @sender : pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                PAIR;       # pair @sender (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                PAIR;       # pair (pair @sender (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                SWAP;       # pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair @sender (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                # self.data.proposed_admin = sp.none # pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair @sender (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                UNPAIR;     # pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)) : pair (pair @sender (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                SWAP;       # pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)) : pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : pair (pair @sender (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                UNPAIR;     # map nat nat : pair (option %poolId (pair address nat)) (option %proposed_admin address) : pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : pair (pair @sender (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                SWAP;       # pair (option %poolId (pair address nat)) (option %proposed_admin address) : map nat nat : pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : pair (pair @sender (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                CAR;        # option (pair address nat) : map nat nat : pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : pair (pair @sender (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                NONE address; # option address : option (pair address nat) : map nat nat : pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : pair (pair @sender (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                SWAP;       # option (pair address nat) : option address : map nat nat : pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : pair (pair @sender (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                PAIR;       # pair (option (pair address nat)) (option address) : map nat nat : pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : pair (pair @sender (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                SWAP;       # map nat nat : pair (option (pair address nat)) (option address) : pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : pair (pair @sender (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                PAIR;       # pair (map nat nat) (pair (option (pair address nat)) (option address)) : pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : pair (pair @sender (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                SWAP;       # pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : pair (map nat nat) (pair (option (pair address nat)) (option address)) : pair (pair @sender (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                PAIR;       # pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))) : pair (pair @sender (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                SWAP;       # pair (pair @sender (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                PAIR;       # pair (pair (pair @sender (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                PAIR;       # pair (pair (pair (pair @sender (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
              }
              {
                IF_LEFT
                  {
                    # == afterExitPool ==
                    # sp.verify(self.data.settings.paused == False, 'ONLY_UNPAUSED') # @parameter%afterExitPool : @storage
                    PUSH bool False; # bool : @parameter%afterExitPool : @storage
                    DUP 3;      # @storage : bool : @parameter%afterExitPool : @storage
                    GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : bool : @parameter%afterExitPool : @storage
                    GET 6;      # bool : bool : @parameter%afterExitPool : @storage
                    COMPARE;    # int : @parameter%afterExitPool : @storage
                    EQ;         # bool : @parameter%afterExitPool : @storage
                    IF
                      {}
                      {
                        PUSH string "ONLY_UNPAUSED"; # string : @parameter%afterExitPool : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%afterExitPool : @storage
                    # if params.recoveryModeExit: # @parameter%afterExitPool : @storage
                    DUP;        # @parameter%afterExitPool : @parameter%afterExitPool : @storage
                    GET 3;      # pair (pair %poolId address nat) (bool %recoveryModeExit) : @parameter%afterExitPool : @storage
                    CDR;        # bool : @parameter%afterExitPool : @storage
                    IF
                      {
                        # sp.verify(self.data.recoveryMode == True, 438) # @parameter%afterExitPool : @storage
                        PUSH bool True; # bool : @parameter%afterExitPool : @storage
                        DUP 3;      # @storage : bool : @parameter%afterExitPool : @storage
                        GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : bool : @parameter%afterExitPool : @storage
                        CAR;        # pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode)) : bool : @parameter%afterExitPool : @storage
                        GET 4;      # bool : bool : @parameter%afterExitPool : @storage
                        COMPARE;    # int : @parameter%afterExitPool : @storage
                        EQ;         # bool : @parameter%afterExitPool : @storage
                        IF
                          {}
                          {
                            PUSH int 438; # int : @parameter%afterExitPool : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%afterExitPool : @storage
                        # sp.verify(self.data.balances[params.sender].balance >= params.sptAmountIn) # @parameter%afterExitPool : @storage
                        DUP;        # @parameter%afterExitPool : @parameter%afterExitPool : @storage
                        GET 6;      # nat : @parameter%afterExitPool : @storage
                        DUP 3;      # @storage : nat : @parameter%afterExitPool : @storage
                        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : @parameter%afterExitPool : @storage
                        CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : nat : @parameter%afterExitPool : @storage
                        CAR;        # pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat)) : nat : @parameter%afterExitPool : @storage
                        GET 3;      # big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%afterExitPool : @storage
                        DUP 3;      # @parameter%afterExitPool : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%afterExitPool : @storage
                        GET 5;      # address : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%afterExitPool : @storage
                        GET;        # option (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%afterExitPool : @storage
                        IF_NONE
                          {
                            PUSH int 129; # int : nat : @parameter%afterExitPool : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : @parameter%afterExitPool : @storage
                        CDR;        # nat : nat : @parameter%afterExitPool : @storage
                        COMPARE;    # int : @parameter%afterExitPool : @storage
                        GE;         # bool : @parameter%afterExitPool : @storage
                        IF
                          {}
                          {
                            PUSH string "WrongCondition: self.data.balances[params.sender].balance >= params.sptAmountIn"; # string : @parameter%afterExitPool : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%afterExitPool : @storage
                        # self.data.balances[params.sender].balance = sp.as_nat(self.data.balances[params.sender].balance - params.sptAmountIn) # @parameter%afterExitPool : @storage
                        DUP;        # @parameter%afterExitPool : @parameter%afterExitPool : @storage
                        GET 6;      # nat : @parameter%afterExitPool : @storage
                        DUP 3;      # @storage : nat : @parameter%afterExitPool : @storage
                        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : @parameter%afterExitPool : @storage
                        CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : nat : @parameter%afterExitPool : @storage
                        CAR;        # pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat)) : nat : @parameter%afterExitPool : @storage
                        GET 3;      # big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%afterExitPool : @storage
                        DUP 3;      # @parameter%afterExitPool : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%afterExitPool : @storage
                        GET 5;      # address : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%afterExitPool : @storage
                        GET;        # option (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%afterExitPool : @storage
                        IF_NONE
                          {
                            PUSH int 131; # int : nat : @parameter%afterExitPool : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : @parameter%afterExitPool : @storage
                        CDR;        # nat : nat : @parameter%afterExitPool : @storage
                        SUB;        # int : @parameter%afterExitPool : @storage
                        ISNAT;      # option nat : @parameter%afterExitPool : @storage
                        IF_NONE
                          {
                            PUSH int 130; # int : @parameter%afterExitPool : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @parameter%afterExitPool : @storage
                        DIG 2;      # @storage : @some : @parameter%afterExitPool
                        UNPAIR;     # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%afterExitPool
                        UNPAIR;     # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%afterExitPool
                        UNPAIR;     # pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%afterExitPool
                        UNPAIR;     # address : pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%afterExitPool
                        SWAP;       # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%afterExitPool
                        UNPAIR;     # big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%afterExitPool
                        DUP;        # big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%afterExitPool
                        DUP 9;      # @parameter%afterExitPool : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%afterExitPool
                        GET 5;      # address : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%afterExitPool
                        DUP;        # address : address : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%afterExitPool
                        DUG 2;      # address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%afterExitPool
                        GET;        # option (pair (map %approvals address nat) (nat %balance)) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%afterExitPool
                        IF_NONE
                          {
                            PUSH int 130; # int : address : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%afterExitPool
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : address : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%afterExitPool
                        DIG 8;      # @some : @some : address : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterExitPool
                        UPDATE 2;   # @some : address : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterExitPool
                        SOME;       # option (pair (map %approvals address nat) (nat %balance)) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterExitPool
                        SWAP;       # address : option (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterExitPool
                        UPDATE;     # big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterExitPool
                        PAIR;       # pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterExitPool
                        SWAP;       # address : pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterExitPool
                        PAIR;       # pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterExitPool
                        PAIR;       # pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterExitPool
                        PAIR;       # pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterExitPool
                        PAIR;       # pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @parameter%afterExitPool
                        SWAP;       # @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        # self.data.totalSupply = sp.as_nat(self.data.totalSupply - params.sptAmountIn) # @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GET 6;      # nat : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP 2;      # pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : nat : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GET 5;      # pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply)) : nat : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GET 4;      # nat : nat : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        SUB;        # int : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        ISNAT;      # option nat : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        IF_NONE
                          {
                            PUSH int 132; # int : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        SWAP;       # pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @some
                        UNPAIR;     # pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some
                        SWAP;       # pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some
                        UNPAIR;     # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some
                        SWAP;       # pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some
                        UNPAIR;     # pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some
                        UNPAIR;     # big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (map %tokens nat (pair address (option nat))) (nat %totalSupply) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some
                        SWAP;       # pair (map %tokens nat (pair address (option nat))) (nat %totalSupply) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some
                        CAR;        # map nat (pair address (option nat)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some
                        DIG 5;      # @some : map nat (pair address (option nat)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                        SWAP;       # map nat (pair address (option nat)) : @some : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                        PAIR;       # pair (map nat (pair address (option nat))) @some : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                        SWAP;       # big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (map nat (pair address (option nat))) @some : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                        PAIR;       # pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) @some) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                        PAIR;       # pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) @some)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                        SWAP;       # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) @some)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                        PAIR;       # pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) @some)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                        SWAP;       # pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) @some)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                        PAIR;       # pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) @some)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                      }
                      {
                        # compute_BasePool_357 = sp.local("compute_BasePool_357", self.data.scaling_helpers[0]((params.balances, self.data.scalingFactors, self.data.fixedPoint[20]))) # @parameter%afterExitPool : @storage
                        DUP 2;      # @storage : @parameter%afterExitPool : @storage
                        GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : @parameter%afterExitPool : @storage
                        GET 5;      # big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : @parameter%afterExitPool : @storage
                        PUSH int 0; # int : big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : @parameter%afterExitPool : @storage
                        GET;        # option (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : @parameter%afterExitPool : @storage
                        IF_NONE
                          {
                            PUSH int 357; # int : @parameter%afterExitPool : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @parameter%afterExitPool : @storage
                        DUP 3;      # @storage : @some : @parameter%afterExitPool : @storage
                        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : @parameter%afterExitPool : @storage
                        CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @some : @parameter%afterExitPool : @storage
                        GET 6;      # big_map nat (lambda (pair nat nat) nat) : @some : @parameter%afterExitPool : @storage
                        PUSH nat 20; # nat : big_map nat (lambda (pair nat nat) nat) : @some : @parameter%afterExitPool : @storage
                        GET;        # option (lambda (pair nat nat) nat) : @some : @parameter%afterExitPool : @storage
                        IF_NONE
                          {
                            PUSH int 358; # int : @some : @parameter%afterExitPool : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @some : @parameter%afterExitPool : @storage
                        DUP 4;      # @storage : @some : @some : @parameter%afterExitPool : @storage
                        GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : @some : @some : @parameter%afterExitPool : @storage
                        GET 3;      # map nat nat : @some : @some : @parameter%afterExitPool : @storage
                        PAIR;       # pair (map nat nat) @some : @some : @parameter%afterExitPool : @storage
                        DUP 3;      # @parameter%afterExitPool : pair (map nat nat) @some : @some : @parameter%afterExitPool : @storage
                        CAR;        # pair (map %amountsOut nat nat) (pair (map %balances nat nat) (nat %invariant)) : pair (map nat nat) @some : @some : @parameter%afterExitPool : @storage
                        GET 3;      # map nat nat : pair (map nat nat) @some : @some : @parameter%afterExitPool : @storage
                        PAIR;       # pair (map nat nat) (pair (map nat nat) @some) : @some : @parameter%afterExitPool : @storage
                        EXEC;       # map nat nat : @parameter%afterExitPool : @storage
                        # compute_BasePool_360 = sp.local("compute_BasePool_360", self.data.scaling_helpers[0]((params.amountsOut, self.data.scalingFactors, self.data.fixedPoint[20]))) # map nat nat : @parameter%afterExitPool : @storage
                        DUP 3;      # @storage : map nat nat : @parameter%afterExitPool : @storage
                        GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : map nat nat : @parameter%afterExitPool : @storage
                        GET 5;      # big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : map nat nat : @parameter%afterExitPool : @storage
                        PUSH int 0; # int : big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : map nat nat : @parameter%afterExitPool : @storage
                        GET;        # option (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : map nat nat : @parameter%afterExitPool : @storage
                        IF_NONE
                          {
                            PUSH int 360; # int : map nat nat : @parameter%afterExitPool : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : map nat nat : @parameter%afterExitPool : @storage
                        DUP 4;      # @storage : @some : map nat nat : @parameter%afterExitPool : @storage
                        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : map nat nat : @parameter%afterExitPool : @storage
                        CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @some : map nat nat : @parameter%afterExitPool : @storage
                        GET 6;      # big_map nat (lambda (pair nat nat) nat) : @some : map nat nat : @parameter%afterExitPool : @storage
                        PUSH nat 20; # nat : big_map nat (lambda (pair nat nat) nat) : @some : map nat nat : @parameter%afterExitPool : @storage
                        GET;        # option (lambda (pair nat nat) nat) : @some : map nat nat : @parameter%afterExitPool : @storage
                        IF_NONE
                          {
                            PUSH int 361; # int : @some : map nat nat : @parameter%afterExitPool : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @some : map nat nat : @parameter%afterExitPool : @storage
                        DUP 5;      # @storage : @some : @some : map nat nat : @parameter%afterExitPool : @storage
                        GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : @some : @some : map nat nat : @parameter%afterExitPool : @storage
                        GET 3;      # map nat nat : @some : @some : map nat nat : @parameter%afterExitPool : @storage
                        PAIR;       # pair (map nat nat) @some : @some : map nat nat : @parameter%afterExitPool : @storage
                        DUP 4;      # @parameter%afterExitPool : pair (map nat nat) @some : @some : map nat nat : @parameter%afterExitPool : @storage
                        CAR;        # pair (map %amountsOut nat nat) (pair (map %balances nat nat) (nat %invariant)) : pair (map nat nat) @some : @some : map nat nat : @parameter%afterExitPool : @storage
                        CAR;        # map nat nat : pair (map nat nat) @some : @some : map nat nat : @parameter%afterExitPool : @storage
                        PAIR;       # pair (map nat nat) (pair (map nat nat) @some) : @some : map nat nat : @parameter%afterExitPool : @storage
                        EXEC;       # map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        # compute_BaseWeightedPool_375 = sp.local("compute_BaseWeightedPool_375", self.data.normalizedWeights) # map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        DUP 4;      # @storage : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        GET 5;      # map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        # match_pair_WeightedPoolProtocolFees_55_fst, match_pair_WeightedPoolProtocolFees_55_snd = sp.match_tuple(self.data.feeCache, "match_pair_WeightedPoolProtocolFees_55_fst", "match_pair_WeightedPoolProtocolFees_55_snd") # map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        DUP 5;      # @storage : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        GET 5;      # pair nat nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        UNPAIR;     # nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        # compute_WeightedPoolProtocolFees_57 = sp.local("compute_WeightedPoolProtocolFees_57", self.data.entries) # nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        DUP 7;      # @storage : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        CAR;        # pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat)) : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        GET 4;      # big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        # compute_WeightedPoolProtocolFees_64 = sp.local("compute_WeightedPoolProtocolFees_64", self.data.rateProviders) # big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        DUP 8;      # @storage : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        CAR;        # pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        GET 3;      # option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        # compute_ExternalWeightedProtocolFees_48 = sp.local("compute_ExternalWeightedProtocolFees_48", sp.view("getPreJoinExitProtocolFees", sp.record(athRateProduct = compute_WeightedPoolProtocolFees_57.value[11], exemptFromYieldFees = self.data.exemptFromYieldFees, normalizedWeights = compute_BaseWeightedPool_375.value, postJoinExitInvariant = compute_WeightedPoolProtocolFees_57.value[12], preJoinExitInvariant = params.invariant, preJoinExitSupply = self.data.totalSupply, rateProviders = compute_WeightedPoolProtocolFees_64.value, swapFee = match_pair_WeightedPoolProtocolFees_55_fst, yieldFee = match_pair_WeightedPoolProtocolFees_55_snd), self.data.weightedProtocolFeesLib, sp.TPair(sp.TNat, sp.TNat)).open_some(message = 807)) # option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        DUP 9;      # @storage : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        GET 10;     # address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        DUP 5;      # nat : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        DUP 5;      # nat : nat : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        PAIR;       # pair nat nat : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        DUP 3;      # option (map nat (option address)) : pair nat nat : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        PAIR;       # pair (option (map nat (option address))) (pair nat nat) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        DUP 11;     # @storage : pair (option (map nat (option address))) (pair nat nat) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        GET 5;      # pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply)) : pair (option (map nat (option address))) (pair nat nat) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        GET 4;      # nat : pair (option (map nat (option address))) (pair nat nat) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        DUP 11;     # @parameter%afterExitPool : nat : pair (option (map nat (option address))) (pair nat nat) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        CAR;        # pair (map %amountsOut nat nat) (pair (map %balances nat nat) (nat %invariant)) : nat : pair (option (map nat (option address))) (pair nat nat) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        GET 4;      # nat : nat : pair (option (map nat (option address))) (pair nat nat) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        PAIR;       # pair nat nat : pair (option (map nat (option address))) (pair nat nat) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        PAIR;       # pair (pair nat nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        DUP 4;      # big_map int nat : pair (pair nat nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        PUSH int 12; # int : big_map int nat : pair (pair nat nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        GET;        # option nat : pair (pair nat nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        IF_NONE
                          {
                            PUSH int 62; # int : pair (pair nat nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : pair (pair nat nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        DUP 8;      # map nat nat : @some : pair (pair nat nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        PAIR;       # pair (map nat nat) @some : pair (pair nat nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        DUP 12;     # @storage : pair (map nat nat) @some : pair (pair nat nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (map nat nat) @some : pair (pair nat nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (map nat nat) @some : pair (pair nat nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        GET 3;      # bool : pair (map nat nat) @some : pair (pair nat nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        DUP 6;      # big_map int nat : bool : pair (map nat nat) @some : pair (pair nat nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        PUSH int 11; # int : big_map int nat : bool : pair (map nat nat) @some : pair (pair nat nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        GET;        # option nat : bool : pair (map nat nat) @some : pair (pair nat nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        IF_NONE
                          {
                            PUSH int 65; # int : bool : pair (map nat nat) @some : pair (pair nat nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : bool : pair (map nat nat) @some : pair (pair nat nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        PAIR;       # pair @some bool : pair (map nat nat) @some : pair (pair nat nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        PAIR;       # pair (pair @some bool) (pair (map nat nat) @some) : pair (pair nat nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        PAIR;       # pair (pair (pair @some bool) (pair (map nat nat) @some)) (pair (pair nat nat) (pair (option (map nat (option address))) (pair nat nat))) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        VIEW "getPreJoinExitProtocolFees" (pair nat nat); # option (pair nat nat) : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        IF_NONE
                          {
                            PUSH int 807; # int : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        # match_pair_WeightedPool_299_fst, match_pair_WeightedPool_299_snd = sp.match_tuple((sp.fst(compute_ExternalWeightedProtocolFees_48.value), sp.snd(compute_ExternalWeightedProtocolFees_48.value)), "match_pair_WeightedPool_299_fst", "match_pair_WeightedPool_299_snd") # @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        DUP;        # @some : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        CDR;        # nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        DUP 2;      # @some : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        CAR;        # nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        # if match_pair_WeightedPool_299_snd > 0: # nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        PUSH nat 0; # nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        DUP 3;      # nat : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        COMPARE;    # int : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        GT;         # bool : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                        IF
                          {
                            # compute_WeightedPool_303 = sp.local("compute_WeightedPool_303", match_pair_WeightedPool_299_snd) # nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                            DUP 2;      # nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                            # self.data.entries[11] = compute_WeightedPool_303.value # nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : @storage
                            DIG 12;     # @storage : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            UNPAIR;     # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            UNPAIR;     # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            UNPAIR;     # pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            UNPAIR;     # address : pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            SWAP;       # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            UNPAIR;     # big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            SWAP;       # big_map int nat : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            DIG 6;      # nat : big_map int nat : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            SOME;       # option nat : big_map int nat : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            PUSH int 11; # int : option nat : big_map int nat : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            UPDATE;     # big_map int nat : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            SWAP;       # big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            PAIR;       # pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            SWAP;       # address : pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            PAIR;       # pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            PAIR;       # pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            PAIR;       # pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            PAIR;       # pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            DUG 11;     # nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                          }
                          {}; # nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        # compute_WeightedPool_305 = sp.local("compute_WeightedPool_305", match_pair_WeightedPool_299_fst) # nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP;        # nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        # if compute_WeightedPool_305.value > 0: # nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        PUSH nat 0; # nat : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP 2;      # nat : nat : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        COMPARE;    # int : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GT;         # bool : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        IF
                          {
                            # if ~ (self.data.balances.contains(self.data.protocolFeesCollector)): # nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DUP 13;     # pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            CAR;        # pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            CAR;        # pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            CAR;        # pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat)) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            GET 3;      # big_map address (pair (map %approvals address nat) (nat %balance)) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DUP 14;     # pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            CAR;        # pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode)) : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            MEM;        # bool : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            IF
                              {}
                              {
                                # self.data.balances[self.data.protocolFeesCollector] = sp.record(approvals = {}, balance = 0) # nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                                DUP 13;     # pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                                UNPAIR;     # pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                                UNPAIR;     # pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                                UNPAIR;     # pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                                UNPAIR;     # address : pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                                SWAP;       # pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                                UNPAIR;     # big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                                PUSH (option (pair (map address nat) nat)) (Some (Pair {} 0)); # option (pair (map address nat) nat) : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                                DIG 19;     # pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : option (pair (map address nat) nat) : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                                GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : option (pair (map address nat) nat) : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                                CAR;        # pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode)) : option (pair (map address nat) nat) : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                                CAR;        # address : option (pair (map address nat) nat) : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                                UPDATE;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                                PAIR;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                                SWAP;       # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                                PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                                PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                                PAIR;       # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                                PAIR;       # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                                DUG 12;     # nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                              }; # nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            # self.data.balances[self.data.protocolFeesCollector].balance += compute_WeightedPool_305.value # nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DUP 13;     # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            UNPAIR;     # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            UNPAIR;     # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            UNPAIR;     # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            UNPAIR;     # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            SWAP;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            UNPAIR;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DUP;        # big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DIG 19;     # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            CAR;        # pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode)) : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            CAR;        # address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            DUP;        # address : address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            DUG 2;      # address : big_map address (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            GET;        # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            IF_NONE
                              {
                                PUSH int 123; # int : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            DUP;        # @some : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            CDR;        # nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            DUP 10;     # nat : nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            ADD;        # nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            UPDATE 2;   # @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            SOME;       # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            SWAP;       # address : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            UPDATE;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            PAIR;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            SWAP;       # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            PAIR;       # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            SWAP;       # pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            # self.data.totalSupply += compute_WeightedPool_305.value # pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            UNPAIR;     # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            SWAP;       # pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            UNPAIR;     # pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            UNPAIR;     # big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (map %tokens nat (pair address (option nat))) (nat %totalSupply) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            SWAP;       # pair (map %tokens nat (pair address (option nat))) (nat %totalSupply) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            UNPAIR;     # map nat (pair address (option nat)) : nat : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            SWAP;       # nat : map nat (pair address (option nat)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            DUP 7;      # nat : nat : map nat (pair address (option nat)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            ADD;        # nat : map nat (pair address (option nat)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            SWAP;       # map nat (pair address (option nat)) : nat : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            PAIR;       # pair (map nat (pair address (option nat))) nat : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            SWAP;       # big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (map nat (pair address (option nat))) nat : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            PAIR;       # pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            PAIR;       # pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            SWAP;       # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            PAIR;       # pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            SWAP;       # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            PAIR;       # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                            DUG 12;     # nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                          }
                          {}; # nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        # compute_ExternalWeightedProtocolFees_54 = sp.local("compute_ExternalWeightedProtocolFees_54", sp.view("getPostJoinExitProtocolFees", sp.record(balanceDeltas = compute_BasePool_360.value, normalizedWeights = compute_BaseWeightedPool_375.value, postJoinExitSupply = sp.as_nat((self.data.totalSupply + match_pair_WeightedPool_299_fst) - params.sptAmountIn), preBalances = compute_BasePool_357.value, preJoinExitInvariant = params.invariant, preJoinExitSupply = self.data.totalSupply + match_pair_WeightedPool_299_fst, swapFee = sp.fst(self.data.feeCache)), self.data.weightedProtocolFeesLib, sp.TPair(sp.TNat, sp.TNat)).open_some(message = 808)) # nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP 13;     # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GET 10;     # address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP 14;     # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        CAR;        # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        CAR;        # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GET 5;      # pair nat nat : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        CAR;        # nat : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP 4;      # nat : nat : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP 16;     # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : nat : nat : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GET 5;      # pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat) : nat : nat : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GET 4;      # nat : nat : nat : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        ADD;        # nat : nat : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        PAIR;       # pair nat nat : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP 14;     # @parameter%afterExitPool : pair nat nat : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        CAR;        # pair (map %amountsOut nat nat) (pair (map %balances nat nat) (nat %invariant)) : pair nat nat : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GET 4;      # nat : pair nat nat : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP 14;     # map nat nat : nat : pair nat nat : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        PAIR;       # pair (map nat nat) nat : pair nat nat : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        PAIR;       # pair (pair (map nat nat) nat) (pair nat nat) : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP 14;     # @parameter%afterExitPool : pair (pair (map nat nat) nat) (pair nat nat) : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GET 6;      # nat : pair (pair (map nat nat) nat) (pair nat nat) : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP 5;      # nat : nat : pair (pair (map nat nat) nat) (pair nat nat) : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP 17;     # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : nat : nat : pair (pair (map nat nat) nat) (pair nat nat) : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GET 5;      # pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat) : nat : nat : pair (pair (map nat nat) nat) (pair nat nat) : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GET 4;      # nat : nat : nat : pair (pair (map nat nat) nat) (pair nat nat) : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        ADD;        # nat : nat : pair (pair (map nat nat) nat) (pair nat nat) : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        SUB;        # int : pair (pair (map nat nat) nat) (pair nat nat) : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        ISNAT;      # option nat : pair (pair (map nat nat) nat) (pair nat nat) : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        IF_NONE
                          {
                            PUSH int 386; # int : pair (pair (map nat nat) nat) (pair nat nat) : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : pair (pair (map nat nat) nat) (pair nat nat) : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP 12;     # map nat nat : @some : pair (pair (map nat nat) nat) (pair nat nat) : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        PAIR;       # pair (map nat nat) @some : pair (pair (map nat nat) nat) (pair nat nat) : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP 13;     # map nat nat : pair (map nat nat) @some : pair (pair (map nat nat) nat) (pair nat nat) : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        PAIR;       # pair (map nat nat) (pair (map nat nat) @some) : pair (pair (map nat nat) nat) (pair nat nat) : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        PAIR;       # pair (pair (map nat nat) (pair (map nat nat) @some)) (pair (pair (map nat nat) nat) (pair nat nat)) : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        VIEW "getPostJoinExitProtocolFees" (pair nat nat); # option (pair nat nat) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        IF_NONE
                          {
                            PUSH int 808; # int : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        # self.data.entries[12] = sp.snd(compute_ExternalWeightedProtocolFees_54.value) # @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DIG 13;     # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                        UNPAIR;     # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                        UNPAIR;     # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                        UNPAIR;     # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                        UNPAIR;     # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                        SWAP;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                        UNPAIR;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                        SWAP;       # big_map int nat : big_map address (pair (map address nat) nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                        DUP 7;      # @some : big_map int nat : big_map address (pair (map address nat) nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                        CDR;        # nat : big_map int nat : big_map address (pair (map address nat) nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                        SOME;       # option nat : big_map int nat : big_map address (pair (map address nat) nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                        PUSH int 12; # int : option nat : big_map int nat : big_map address (pair (map address nat) nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                        UPDATE;     # big_map int nat : big_map address (pair (map address nat) nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                        SWAP;       # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                        PAIR;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                        SWAP;       # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                        PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                        PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                        PAIR;       # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                        PAIR;       # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool
                        DUG 13;     # @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        # compute_WeightedPool_327 = sp.local("compute_WeightedPool_327", sp.fst(compute_ExternalWeightedProtocolFees_54.value)) # @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP;        # @some : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        CAR;        # nat : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        # if compute_WeightedPool_327.value > 0: # nat : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        PUSH nat 0; # nat : nat : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP 2;      # nat : nat : nat : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        COMPARE;    # int : nat : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GT;         # bool : nat : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        IF
                          {
                            SWAP;       # @some : nat : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DROP;       # nat : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            SWAP;       # nat : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DROP;       # nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            SWAP;       # nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DROP;       # nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            SWAP;       # nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DROP;       # nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            SWAP;       # @some : nat : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DROP;       # nat : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            SWAP;       # option (map nat (option address)) : nat : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DROP;       # nat : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            SWAP;       # big_map int nat : nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DROP;       # nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            SWAP;       # nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DROP;       # nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            SWAP;       # nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DROP;       # nat : map nat nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            SWAP;       # map nat nat : nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DROP;       # nat : map nat nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            SWAP;       # map nat nat : nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DROP;       # nat : map nat nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            SWAP;       # map nat nat : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DROP;       # nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            # if ~ (self.data.balances.contains(self.data.protocolFeesCollector)): # nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DUP 3;      # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            CAR;        # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            CAR;        # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            CAR;        # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            GET 3;      # big_map address (pair (map address nat) nat) : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DUP 4;      # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : big_map address (pair (map address nat) nat) : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : big_map address (pair (map address nat) nat) : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            CAR;        # pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode)) : big_map address (pair (map address nat) nat) : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            CAR;        # address : big_map address (pair (map address nat) nat) : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            MEM;        # bool : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            IF
                              {}
                              {
                                # self.data.balances[self.data.protocolFeesCollector] = sp.record(approvals = {}, balance = 0) # nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                                DUP 3;      # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                                UNPAIR;     # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                                UNPAIR;     # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                                UNPAIR;     # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                                UNPAIR;     # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                                SWAP;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                                UNPAIR;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                                PUSH (option (pair (map address nat) nat)) (Some (Pair {} 0)); # option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                                DIG 9;      # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool
                                GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool
                                CAR;        # pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode)) : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool
                                CAR;        # address : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool
                                UPDATE;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool
                                PAIR;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool
                                SWAP;       # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool
                                PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool
                                PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool
                                PAIR;       # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool
                                PAIR;       # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : nat : @parameter%afterExitPool
                                DUG 2;      # nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                              }; # nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            # self.data.balances[self.data.protocolFeesCollector].balance += compute_WeightedPool_327.value # nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DUP 3;      # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            UNPAIR;     # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            UNPAIR;     # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            UNPAIR;     # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            UNPAIR;     # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            SWAP;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            UNPAIR;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DUP;        # big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DIG 9;      # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool
                            GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool
                            CAR;        # pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode)) : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool
                            CAR;        # address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool
                            DUP;        # address : address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool
                            DUG 2;      # address : big_map address (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool
                            GET;        # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool
                            IF_NONE
                              {
                                PUSH int 123; # int : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool
                            DUP;        # @some : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool
                            CDR;        # nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool
                            DUP 10;     # nat : nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool
                            ADD;        # nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool
                            UPDATE 2;   # @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool
                            SOME;       # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool
                            SWAP;       # address : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool
                            UPDATE;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool
                            PAIR;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool
                            SWAP;       # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool
                            PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool
                            PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool
                            PAIR;       # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterExitPool
                            SWAP;       # pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : @parameter%afterExitPool
                            # self.data.totalSupply += compute_WeightedPool_327.value # pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : @parameter%afterExitPool
                            UNPAIR;     # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : @parameter%afterExitPool
                            SWAP;       # pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : @parameter%afterExitPool
                            UNPAIR;     # pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : @parameter%afterExitPool
                            UNPAIR;     # big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (map nat (pair address (option nat))) nat : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : @parameter%afterExitPool
                            SWAP;       # pair (map nat (pair address (option nat))) nat : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : @parameter%afterExitPool
                            UNPAIR;     # map nat (pair address (option nat)) : nat : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : @parameter%afterExitPool
                            SWAP;       # nat : map nat (pair address (option nat)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : @parameter%afterExitPool
                            DIG 6;      # nat : nat : map nat (pair address (option nat)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterExitPool
                            ADD;        # nat : map nat (pair address (option nat)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterExitPool
                            SWAP;       # map nat (pair address (option nat)) : nat : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterExitPool
                            PAIR;       # pair (map nat (pair address (option nat))) nat : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterExitPool
                            SWAP;       # big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (map nat (pair address (option nat))) nat : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterExitPool
                            PAIR;       # pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterExitPool
                            PAIR;       # pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterExitPool
                            SWAP;       # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterExitPool
                            PAIR;       # pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterExitPool
                            SWAP;       # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterExitPool
                            PAIR;       # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @parameter%afterExitPool
                            SWAP;       # @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                          }
                          {
                            DROP 13;    # @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                          }; # @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        # sp.verify(self.data.balances[params.sender].balance >= params.sptAmountIn) # @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP;        # @parameter%afterExitPool : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GET 6;      # nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP 3;      # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        CAR;        # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        CAR;        # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        CAR;        # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GET 3;      # big_map address (pair (map address nat) nat) : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP 3;      # @parameter%afterExitPool : big_map address (pair (map address nat) nat) : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GET 5;      # address : big_map address (pair (map address nat) nat) : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GET;        # option (pair (map address nat) nat) : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        IF_NONE
                          {
                            PUSH int 129; # int : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        CDR;        # nat : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        COMPARE;    # int : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GE;         # bool : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        IF
                          {}
                          {
                            PUSH string "WrongCondition: self.data.balances[params.sender].balance >= params.sptAmountIn"; # string : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            FAILWITH;   # FAILED
                          }; # @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        # self.data.balances[params.sender].balance = sp.as_nat(self.data.balances[params.sender].balance - params.sptAmountIn) # @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP;        # @parameter%afterExitPool : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GET 6;      # nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP 3;      # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        CAR;        # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        CAR;        # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        CAR;        # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GET 3;      # big_map address (pair (map address nat) nat) : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP 3;      # @parameter%afterExitPool : big_map address (pair (map address nat) nat) : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GET 5;      # address : big_map address (pair (map address nat) nat) : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GET;        # option (pair (map address nat) nat) : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        IF_NONE
                          {
                            PUSH int 131; # int : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        CDR;        # nat : nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        SUB;        # int : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        ISNAT;      # option nat : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        IF_NONE
                          {
                            PUSH int 130; # int : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DIG 2;      # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @some : @parameter%afterExitPool
                        UNPAIR;     # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%afterExitPool
                        UNPAIR;     # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%afterExitPool
                        UNPAIR;     # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%afterExitPool
                        UNPAIR;     # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%afterExitPool
                        SWAP;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%afterExitPool
                        UNPAIR;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%afterExitPool
                        DUP;        # big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%afterExitPool
                        DUP 9;      # @parameter%afterExitPool : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%afterExitPool
                        GET 5;      # address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%afterExitPool
                        DUP;        # address : address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%afterExitPool
                        DUG 2;      # address : big_map address (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%afterExitPool
                        GET;        # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%afterExitPool
                        IF_NONE
                          {
                            PUSH int 130; # int : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%afterExitPool
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%afterExitPool
                        DIG 8;      # @some : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterExitPool
                        UPDATE 2;   # @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterExitPool
                        SOME;       # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterExitPool
                        SWAP;       # address : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterExitPool
                        UPDATE;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterExitPool
                        PAIR;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterExitPool
                        SWAP;       # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterExitPool
                        PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterExitPool
                        PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterExitPool
                        PAIR;       # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterExitPool
                        PAIR;       # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @parameter%afterExitPool
                        SWAP;       # @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        # self.data.totalSupply = sp.as_nat(self.data.totalSupply - params.sptAmountIn) # @parameter%afterExitPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GET 6;      # nat : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP 2;      # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : nat : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GET 5;      # pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat) : nat : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GET 4;      # nat : nat : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        SUB;        # int : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        ISNAT;      # option nat : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        IF_NONE
                          {
                            PUSH int 132; # int : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        SWAP;       # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @some
                        UNPAIR;     # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some
                        SWAP;       # pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some
                        UNPAIR;     # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some
                        SWAP;       # pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some
                        UNPAIR;     # pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some
                        UNPAIR;     # big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (map nat (pair address (option nat))) nat : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some
                        SWAP;       # pair (map nat (pair address (option nat))) nat : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some
                        CAR;        # map nat (pair address (option nat)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some
                        DIG 5;      # @some : map nat (pair address (option nat)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                        SWAP;       # map nat (pair address (option nat)) : @some : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                        PAIR;       # pair (map nat (pair address (option nat))) @some : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                        SWAP;       # big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (map nat (pair address (option nat))) @some : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                        PAIR;       # pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) @some) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                        PAIR;       # pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) @some)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                        SWAP;       # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) @some)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                        PAIR;       # pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) @some)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                        SWAP;       # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) @some)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                        PAIR;       # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) @some)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                      }; # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) @some)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                  }
                  {
                    # == afterJoinPool ==
                    # sp.verify(self.data.settings.paused == False, 'ONLY_UNPAUSED') # @parameter%afterJoinPool : @storage
                    PUSH bool False; # bool : @parameter%afterJoinPool : @storage
                    DUP 3;      # @storage : bool : @parameter%afterJoinPool : @storage
                    GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : bool : @parameter%afterJoinPool : @storage
                    GET 6;      # bool : bool : @parameter%afterJoinPool : @storage
                    COMPARE;    # int : @parameter%afterJoinPool : @storage
                    EQ;         # bool : @parameter%afterJoinPool : @storage
                    IF
                      {}
                      {
                        PUSH string "ONLY_UNPAUSED"; # string : @parameter%afterJoinPool : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%afterJoinPool : @storage
                    # if self.data.totalSupply == 0: # @parameter%afterJoinPool : @storage
                    PUSH nat 0; # nat : @parameter%afterJoinPool : @storage
                    DUP 3;      # @storage : nat : @parameter%afterJoinPool : @storage
                    GET 5;      # pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply)) : nat : @parameter%afterJoinPool : @storage
                    GET 4;      # nat : nat : @parameter%afterJoinPool : @storage
                    COMPARE;    # int : @parameter%afterJoinPool : @storage
                    EQ;         # bool : @parameter%afterJoinPool : @storage
                    IF
                      {
                        # if self.data.exemptFromYieldFees == False: # @parameter%afterJoinPool : @storage
                        PUSH bool False; # bool : @parameter%afterJoinPool : @storage
                        DUP 3;      # @storage : bool : @parameter%afterJoinPool : @storage
                        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : bool : @parameter%afterJoinPool : @storage
                        CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : bool : @parameter%afterJoinPool : @storage
                        GET 3;      # bool : bool : @parameter%afterJoinPool : @storage
                        COMPARE;    # int : @parameter%afterJoinPool : @storage
                        EQ;         # bool : @parameter%afterJoinPool : @storage
                        IF
                          {
                            # compute_ExternalWeightedProtocolFees_60 = sp.local("compute_ExternalWeightedProtocolFees_60", sp.view("getRateProduct", sp.record(normalizedWeights = self.data.normalizedWeights, rateProviders = self.data.rateProviders.open_some()), self.data.weightedProtocolFeesLib, sp.TNat).open_some(message = 809)) # @parameter%afterJoinPool : @storage
                            DUP 2;      # @storage : @parameter%afterJoinPool : @storage
                            GET 10;     # address : @parameter%afterJoinPool : @storage
                            DUP 3;      # @storage : address : @parameter%afterJoinPool : @storage
                            GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : address : @parameter%afterJoinPool : @storage
                            CAR;        # pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode)) : address : @parameter%afterJoinPool : @storage
                            GET 3;      # option (map nat (option address)) : address : @parameter%afterJoinPool : @storage
                            IF_NONE
                              {
                                PUSH int 261; # int : address : @parameter%afterJoinPool : @storage
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : address : @parameter%afterJoinPool : @storage
                            DUP 4;      # @storage : @some : address : @parameter%afterJoinPool : @storage
                            CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : address : @parameter%afterJoinPool : @storage
                            GET 5;      # map nat nat : @some : address : @parameter%afterJoinPool : @storage
                            PAIR;       # pair (map nat nat) @some : address : @parameter%afterJoinPool : @storage
                            VIEW "getRateProduct" nat; # option nat : @parameter%afterJoinPool : @storage
                            IF_NONE
                              {
                                PUSH int 809; # int : @parameter%afterJoinPool : @storage
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : @parameter%afterJoinPool : @storage
                            # self.data.entries[11] = compute_ExternalWeightedProtocolFees_60.value # @some : @parameter%afterJoinPool : @storage
                            DIG 2;      # @storage : @some : @parameter%afterJoinPool
                            UNPAIR;     # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%afterJoinPool
                            UNPAIR;     # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%afterJoinPool
                            UNPAIR;     # pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%afterJoinPool
                            UNPAIR;     # address : pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%afterJoinPool
                            SWAP;       # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%afterJoinPool
                            UNPAIR;     # big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%afterJoinPool
                            SWAP;       # big_map int nat : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%afterJoinPool
                            DIG 6;      # @some : big_map int nat : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            SOME;       # option nat : big_map int nat : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            PUSH int 11; # int : option nat : big_map int nat : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            UPDATE;     # big_map int nat : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            SWAP;       # big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            PAIR;       # pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            SWAP;       # address : pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            PAIR;       # pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            PAIR;       # pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            PAIR;       # pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            PAIR;       # pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @parameter%afterJoinPool
                            SWAP;       # @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                          }
                          {}; # @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        SWAP;       # pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @parameter%afterJoinPool
                        # self.data.entries[12] = params.invariant # pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @parameter%afterJoinPool
                        UNPAIR;     # pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        UNPAIR;     # pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        UNPAIR;     # pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        UNPAIR;     # address : pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        SWAP;       # pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        UNPAIR;     # big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        SWAP;       # big_map int nat : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        DUP 7;      # @parameter%afterJoinPool : big_map int nat : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        CAR;        # pair (map %amountsIn nat nat) (pair (map %balances nat nat) (nat %invariant)) : big_map int nat : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        GET 4;      # nat : big_map int nat : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        SOME;       # option nat : big_map int nat : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        PUSH int 12; # int : option nat : big_map int nat : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        UPDATE;     # big_map int nat : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        SWAP;       # big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        PAIR;       # pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        SWAP;       # address : pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        PAIR;       # pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        PAIR;       # pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        PAIR;       # pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        PAIR;       # pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @parameter%afterJoinPool
                        SWAP;       # @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        # sp.verify(params.sptAmountOut >= 1000000, 204) # @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        PUSH nat 1000000; # nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP 2;      # @parameter%afterJoinPool : nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GET 6;      # nat : nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        COMPARE;    # int : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GE;         # bool : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        IF
                          {}
                          {
                            PUSH int 204; # int : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            FAILWITH;   # FAILED
                          }; # @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        # if ~ (self.data.balances.contains(sp.address('tz1Ke2h7sDdakHJQh8WX4Z372du1KChsksyU'))): # @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP 2;      # pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        CAR;        # pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        CAR;        # pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        CAR;        # pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat)) : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GET 3;      # big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        PUSH address "tz1Ke2h7sDdakHJQh8WX4Z372du1KChsksyU"; # address : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        MEM;        # bool : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        IF
                          {}
                          {
                            SWAP;       # pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @parameter%afterJoinPool
                            # self.data.balances[sp.address('tz1Ke2h7sDdakHJQh8WX4Z372du1KChsksyU')] = sp.record(approvals = {}, balance = 0) # pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @parameter%afterJoinPool
                            UNPAIR;     # pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            UNPAIR;     # pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            UNPAIR;     # pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            UNPAIR;     # address : pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            SWAP;       # pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            UNPAIR;     # big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            PUSH (option (pair (map address nat) nat)) (Some (Pair {} 0)); # option (pair (map address nat) nat) : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            PUSH address "tz1Ke2h7sDdakHJQh8WX4Z372du1KChsksyU"; # address : option (pair (map address nat) nat) : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            UPDATE;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            PAIR;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            SWAP;       # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            PAIR;       # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            PAIR;       # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @parameter%afterJoinPool
                            SWAP;       # @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                          }; # @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        SWAP;       # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @parameter%afterJoinPool
                        # self.data.balances[sp.address('tz1Ke2h7sDdakHJQh8WX4Z372du1KChsksyU')].balance += 1000000 # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @parameter%afterJoinPool
                        UNPAIR;     # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        UNPAIR;     # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        UNPAIR;     # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        UNPAIR;     # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        SWAP;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        UNPAIR;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        DUP;        # big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        PUSH address "tz1Ke2h7sDdakHJQh8WX4Z372du1KChsksyU"; # address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        DUP;        # address : address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        DUG 2;      # address : big_map address (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        GET;        # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        IF_NONE
                          {
                            PUSH int 123; # int : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        DUP;        # @some : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        CDR;        # nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        PUSH nat 1000000; # nat : nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        ADD;        # nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        UPDATE 2;   # @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        SOME;       # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        SWAP;       # address : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        UPDATE;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        PAIR;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        SWAP;       # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        PAIR;       # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        SWAP;       # pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                        # self.data.totalSupply += 1000000 # pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                        UNPAIR;     # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                        SWAP;       # pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                        UNPAIR;     # pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                        UNPAIR;     # big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (map %tokens nat (pair address (option nat))) (nat %totalSupply) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                        SWAP;       # pair (map %tokens nat (pair address (option nat))) (nat %totalSupply) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                        UNPAIR;     # map nat (pair address (option nat)) : nat : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                        SWAP;       # nat : map nat (pair address (option nat)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                        PUSH nat 1000000; # nat : nat : map nat (pair address (option nat)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                        ADD;        # nat : map nat (pair address (option nat)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                        SWAP;       # map nat (pair address (option nat)) : nat : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                        PAIR;       # pair (map nat (pair address (option nat))) nat : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                        SWAP;       # big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (map nat (pair address (option nat))) nat : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                        PAIR;       # pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                        PAIR;       # pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                        SWAP;       # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                        PAIR;       # pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                        SWAP;       # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        PAIR;       # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @parameter%afterJoinPool
                        SWAP;       # @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        # if ~ (self.data.balances.contains(params.recipient)): # @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP 2;      # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        CAR;        # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        CAR;        # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        CAR;        # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GET 3;      # big_map address (pair (map address nat) nat) : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP 2;      # @parameter%afterJoinPool : big_map address (pair (map address nat) nat) : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GET 5;      # address : big_map address (pair (map address nat) nat) : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        MEM;        # bool : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        IF
                          {}
                          {
                            SWAP;       # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @parameter%afterJoinPool
                            # self.data.balances[params.recipient] = sp.record(approvals = {}, balance = 0) # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @parameter%afterJoinPool
                            UNPAIR;     # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            UNPAIR;     # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            UNPAIR;     # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            UNPAIR;     # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            SWAP;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            UNPAIR;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            PUSH (option (pair (map address nat) nat)) (Some (Pair {} 0)); # option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            DUP 8;      # @parameter%afterJoinPool : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            GET 5;      # address : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            UPDATE;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            PAIR;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            SWAP;       # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            PAIR;       # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            PAIR;       # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @parameter%afterJoinPool
                            SWAP;       # @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                          }; # @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        SWAP;       # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @parameter%afterJoinPool
                        # self.data.balances[params.recipient].balance += sp.as_nat(params.sptAmountOut - 1000000) # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @parameter%afterJoinPool
                        UNPAIR;     # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        UNPAIR;     # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        UNPAIR;     # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        UNPAIR;     # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        SWAP;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        UNPAIR;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        DUP;        # big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        DUP 8;      # @parameter%afterJoinPool : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        GET 5;      # address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        DUP;        # address : address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        DUG 2;      # address : big_map address (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        GET;        # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        IF_NONE
                          {
                            PUSH int 123; # int : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        DUP;        # @some : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        CDR;        # nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        PUSH nat 1000000; # nat : nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        DUP 11;     # @parameter%afterJoinPool : nat : nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        GET 6;      # nat : nat : nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        SUB;        # int : nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        ISNAT;      # option nat : nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        IF_NONE
                          {
                            PUSH int 302; # int : nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        ADD;        # nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        UPDATE 2;   # @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        SOME;       # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        SWAP;       # address : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        UPDATE;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        PAIR;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        SWAP;       # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        PAIR;       # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        SWAP;       # pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                        # self.data.totalSupply += sp.as_nat(params.sptAmountOut - 1000000) # pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                        UNPAIR;     # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                        SWAP;       # pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                        UNPAIR;     # pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                        UNPAIR;     # big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (map nat (pair address (option nat))) nat : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                        SWAP;       # pair (map nat (pair address (option nat))) nat : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                        UNPAIR;     # map nat (pair address (option nat)) : nat : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                        SWAP;       # nat : map nat (pair address (option nat)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                        PUSH nat 1000000; # nat : nat : map nat (pair address (option nat)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                        DIG 7;      # @parameter%afterJoinPool : nat : nat : map nat (pair address (option nat)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                        GET 6;      # nat : nat : nat : map nat (pair address (option nat)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                        SUB;        # int : nat : map nat (pair address (option nat)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                        ISNAT;      # option nat : nat : map nat (pair address (option nat)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                        IF_NONE
                          {
                            PUSH int 302; # int : nat : map nat (pair address (option nat)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : map nat (pair address (option nat)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                        ADD;        # nat : map nat (pair address (option nat)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                        SWAP;       # map nat (pair address (option nat)) : nat : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                        PAIR;       # pair (map nat (pair address (option nat))) nat : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                        SWAP;       # big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (map nat (pair address (option nat))) nat : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                        PAIR;       # pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                        PAIR;       # pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                        SWAP;       # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                        PAIR;       # pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                        SWAP;       # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                        PAIR;       # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                      }
                      {
                        # compute_BasePool_307 = sp.local("compute_BasePool_307", self.data.scaling_helpers[0]((params.balances, self.data.scalingFactors, self.data.fixedPoint[20]))) # @parameter%afterJoinPool : @storage
                        DUP 2;      # @storage : @parameter%afterJoinPool : @storage
                        GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : @parameter%afterJoinPool : @storage
                        GET 5;      # big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : @parameter%afterJoinPool : @storage
                        PUSH int 0; # int : big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : @parameter%afterJoinPool : @storage
                        GET;        # option (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : @parameter%afterJoinPool : @storage
                        IF_NONE
                          {
                            PUSH int 307; # int : @parameter%afterJoinPool : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @parameter%afterJoinPool : @storage
                        DUP 3;      # @storage : @some : @parameter%afterJoinPool : @storage
                        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : @parameter%afterJoinPool : @storage
                        CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @some : @parameter%afterJoinPool : @storage
                        GET 6;      # big_map nat (lambda (pair nat nat) nat) : @some : @parameter%afterJoinPool : @storage
                        PUSH nat 20; # nat : big_map nat (lambda (pair nat nat) nat) : @some : @parameter%afterJoinPool : @storage
                        GET;        # option (lambda (pair nat nat) nat) : @some : @parameter%afterJoinPool : @storage
                        IF_NONE
                          {
                            PUSH int 308; # int : @some : @parameter%afterJoinPool : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @some : @parameter%afterJoinPool : @storage
                        DUP 4;      # @storage : @some : @some : @parameter%afterJoinPool : @storage
                        GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : @some : @some : @parameter%afterJoinPool : @storage
                        GET 3;      # map nat nat : @some : @some : @parameter%afterJoinPool : @storage
                        PAIR;       # pair (map nat nat) @some : @some : @parameter%afterJoinPool : @storage
                        DUP 3;      # @parameter%afterJoinPool : pair (map nat nat) @some : @some : @parameter%afterJoinPool : @storage
                        CAR;        # pair (map %amountsIn nat nat) (pair (map %balances nat nat) (nat %invariant)) : pair (map nat nat) @some : @some : @parameter%afterJoinPool : @storage
                        GET 3;      # map nat nat : pair (map nat nat) @some : @some : @parameter%afterJoinPool : @storage
                        PAIR;       # pair (map nat nat) (pair (map nat nat) @some) : @some : @parameter%afterJoinPool : @storage
                        EXEC;       # map nat nat : @parameter%afterJoinPool : @storage
                        # compute_BasePool_310 = sp.local("compute_BasePool_310", self.data.scaling_helpers[0]((params.amountsIn, self.data.scalingFactors, self.data.fixedPoint[20]))) # map nat nat : @parameter%afterJoinPool : @storage
                        DUP 3;      # @storage : map nat nat : @parameter%afterJoinPool : @storage
                        GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : map nat nat : @parameter%afterJoinPool : @storage
                        GET 5;      # big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : map nat nat : @parameter%afterJoinPool : @storage
                        PUSH int 0; # int : big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : map nat nat : @parameter%afterJoinPool : @storage
                        GET;        # option (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : map nat nat : @parameter%afterJoinPool : @storage
                        IF_NONE
                          {
                            PUSH int 310; # int : map nat nat : @parameter%afterJoinPool : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : map nat nat : @parameter%afterJoinPool : @storage
                        DUP 4;      # @storage : @some : map nat nat : @parameter%afterJoinPool : @storage
                        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : map nat nat : @parameter%afterJoinPool : @storage
                        CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @some : map nat nat : @parameter%afterJoinPool : @storage
                        GET 6;      # big_map nat (lambda (pair nat nat) nat) : @some : map nat nat : @parameter%afterJoinPool : @storage
                        PUSH nat 20; # nat : big_map nat (lambda (pair nat nat) nat) : @some : map nat nat : @parameter%afterJoinPool : @storage
                        GET;        # option (lambda (pair nat nat) nat) : @some : map nat nat : @parameter%afterJoinPool : @storage
                        IF_NONE
                          {
                            PUSH int 311; # int : @some : map nat nat : @parameter%afterJoinPool : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @some : map nat nat : @parameter%afterJoinPool : @storage
                        DUP 5;      # @storage : @some : @some : map nat nat : @parameter%afterJoinPool : @storage
                        GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : @some : @some : map nat nat : @parameter%afterJoinPool : @storage
                        GET 3;      # map nat nat : @some : @some : map nat nat : @parameter%afterJoinPool : @storage
                        PAIR;       # pair (map nat nat) @some : @some : map nat nat : @parameter%afterJoinPool : @storage
                        DUP 4;      # @parameter%afterJoinPool : pair (map nat nat) @some : @some : map nat nat : @parameter%afterJoinPool : @storage
                        CAR;        # pair (map %amountsIn nat nat) (pair (map %balances nat nat) (nat %invariant)) : pair (map nat nat) @some : @some : map nat nat : @parameter%afterJoinPool : @storage
                        CAR;        # map nat nat : pair (map nat nat) @some : @some : map nat nat : @parameter%afterJoinPool : @storage
                        PAIR;       # pair (map nat nat) (pair (map nat nat) @some) : @some : map nat nat : @parameter%afterJoinPool : @storage
                        EXEC;       # map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        # compute_BaseWeightedPool_227 = sp.local("compute_BaseWeightedPool_227", self.data.normalizedWeights) # map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        DUP 4;      # @storage : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        GET 5;      # map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        # match_pair_WeightedPoolProtocolFees_55_fst, match_pair_WeightedPoolProtocolFees_55_snd = sp.match_tuple(self.data.feeCache, "match_pair_WeightedPoolProtocolFees_55_fst", "match_pair_WeightedPoolProtocolFees_55_snd") # map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        DUP 5;      # @storage : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        GET 5;      # pair nat nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        UNPAIR;     # nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        # compute_WeightedPoolProtocolFees_57 = sp.local("compute_WeightedPoolProtocolFees_57", self.data.entries) # nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        DUP 7;      # @storage : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        CAR;        # pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat)) : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        GET 4;      # big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        # compute_WeightedPoolProtocolFees_64 = sp.local("compute_WeightedPoolProtocolFees_64", self.data.rateProviders) # big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        DUP 8;      # @storage : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        CAR;        # pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        GET 3;      # option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        # compute_ExternalWeightedProtocolFees_48 = sp.local("compute_ExternalWeightedProtocolFees_48", sp.view("getPreJoinExitProtocolFees", sp.record(athRateProduct = compute_WeightedPoolProtocolFees_57.value[11], exemptFromYieldFees = self.data.exemptFromYieldFees, normalizedWeights = compute_BaseWeightedPool_227.value, postJoinExitInvariant = compute_WeightedPoolProtocolFees_57.value[12], preJoinExitInvariant = params.invariant, preJoinExitSupply = self.data.totalSupply, rateProviders = compute_WeightedPoolProtocolFees_64.value, swapFee = match_pair_WeightedPoolProtocolFees_55_fst, yieldFee = match_pair_WeightedPoolProtocolFees_55_snd), self.data.weightedProtocolFeesLib, sp.TPair(sp.TNat, sp.TNat)).open_some(message = 807)) # option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        DUP 9;      # @storage : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        GET 10;     # address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        DUP 5;      # nat : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        DUP 5;      # nat : nat : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        PAIR;       # pair nat nat : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        DUP 3;      # option (map nat (option address)) : pair nat nat : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        PAIR;       # pair (option (map nat (option address))) (pair nat nat) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        DUP 11;     # @storage : pair (option (map nat (option address))) (pair nat nat) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        GET 5;      # pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply)) : pair (option (map nat (option address))) (pair nat nat) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        GET 4;      # nat : pair (option (map nat (option address))) (pair nat nat) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        DUP 11;     # @parameter%afterJoinPool : nat : pair (option (map nat (option address))) (pair nat nat) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        CAR;        # pair (map %amountsIn nat nat) (pair (map %balances nat nat) (nat %invariant)) : nat : pair (option (map nat (option address))) (pair nat nat) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        GET 4;      # nat : nat : pair (option (map nat (option address))) (pair nat nat) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        PAIR;       # pair nat nat : pair (option (map nat (option address))) (pair nat nat) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        PAIR;       # pair (pair nat nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        DUP 4;      # big_map int nat : pair (pair nat nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        PUSH int 12; # int : big_map int nat : pair (pair nat nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        GET;        # option nat : pair (pair nat nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        IF_NONE
                          {
                            PUSH int 62; # int : pair (pair nat nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : pair (pair nat nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        DUP 8;      # map nat nat : @some : pair (pair nat nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        PAIR;       # pair (map nat nat) @some : pair (pair nat nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        DUP 12;     # @storage : pair (map nat nat) @some : pair (pair nat nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (map nat nat) @some : pair (pair nat nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (map nat nat) @some : pair (pair nat nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        GET 3;      # bool : pair (map nat nat) @some : pair (pair nat nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        DUP 6;      # big_map int nat : bool : pair (map nat nat) @some : pair (pair nat nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        PUSH int 11; # int : big_map int nat : bool : pair (map nat nat) @some : pair (pair nat nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        GET;        # option nat : bool : pair (map nat nat) @some : pair (pair nat nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        IF_NONE
                          {
                            PUSH int 65; # int : bool : pair (map nat nat) @some : pair (pair nat nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : bool : pair (map nat nat) @some : pair (pair nat nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        PAIR;       # pair @some bool : pair (map nat nat) @some : pair (pair nat nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        PAIR;       # pair (pair @some bool) (pair (map nat nat) @some) : pair (pair nat nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        PAIR;       # pair (pair (pair @some bool) (pair (map nat nat) @some)) (pair (pair nat nat) (pair (option (map nat (option address))) (pair nat nat))) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        VIEW "getPreJoinExitProtocolFees" (pair nat nat); # option (pair nat nat) : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        IF_NONE
                          {
                            PUSH int 807; # int : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        # match_pair_WeightedPool_299_fst, match_pair_WeightedPool_299_snd = sp.match_tuple((sp.fst(compute_ExternalWeightedProtocolFees_48.value), sp.snd(compute_ExternalWeightedProtocolFees_48.value)), "match_pair_WeightedPool_299_fst", "match_pair_WeightedPool_299_snd") # @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        DUP;        # @some : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        CDR;        # nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        DUP 2;      # @some : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        CAR;        # nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        # if match_pair_WeightedPool_299_snd > 0: # nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        PUSH nat 0; # nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        DUP 3;      # nat : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        COMPARE;    # int : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        GT;         # bool : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                        IF
                          {
                            # compute_WeightedPool_303 = sp.local("compute_WeightedPool_303", match_pair_WeightedPool_299_snd) # nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                            DUP 2;      # nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                            # self.data.entries[11] = compute_WeightedPool_303.value # nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : @storage
                            DIG 12;     # @storage : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            UNPAIR;     # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            UNPAIR;     # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            UNPAIR;     # pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            UNPAIR;     # address : pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            SWAP;       # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            UNPAIR;     # big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            SWAP;       # big_map int nat : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            DIG 6;      # nat : big_map int nat : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            SOME;       # option nat : big_map int nat : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            PUSH int 11; # int : option nat : big_map int nat : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            UPDATE;     # big_map int nat : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            SWAP;       # big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            PAIR;       # pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            SWAP;       # address : pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            PAIR;       # pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            PAIR;       # pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            PAIR;       # pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            PAIR;       # pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            DUG 11;     # nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                          }
                          {}; # nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        # compute_WeightedPool_305 = sp.local("compute_WeightedPool_305", match_pair_WeightedPool_299_fst) # nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP;        # nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        # if compute_WeightedPool_305.value > 0: # nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        PUSH nat 0; # nat : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP 2;      # nat : nat : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        COMPARE;    # int : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GT;         # bool : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        IF
                          {
                            # if ~ (self.data.balances.contains(self.data.protocolFeesCollector)): # nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DUP 13;     # pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            CAR;        # pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            CAR;        # pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            CAR;        # pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat)) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            GET 3;      # big_map address (pair (map %approvals address nat) (nat %balance)) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DUP 14;     # pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            CAR;        # pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode)) : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            MEM;        # bool : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            IF
                              {}
                              {
                                # self.data.balances[self.data.protocolFeesCollector] = sp.record(approvals = {}, balance = 0) # nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                                DUP 13;     # pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                                UNPAIR;     # pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                                UNPAIR;     # pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                                UNPAIR;     # pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                                UNPAIR;     # address : pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                                SWAP;       # pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                                UNPAIR;     # big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                                PUSH (option (pair (map address nat) nat)) (Some (Pair {} 0)); # option (pair (map address nat) nat) : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                                DIG 19;     # pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : option (pair (map address nat) nat) : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                                GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : option (pair (map address nat) nat) : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                                CAR;        # pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode)) : option (pair (map address nat) nat) : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                                CAR;        # address : option (pair (map address nat) nat) : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                                UPDATE;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                                PAIR;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                                SWAP;       # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                                PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                                PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                                PAIR;       # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                                PAIR;       # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                                DUG 12;     # nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                              }; # nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            # self.data.balances[self.data.protocolFeesCollector].balance += compute_WeightedPool_305.value # nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DUP 13;     # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            UNPAIR;     # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            UNPAIR;     # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            UNPAIR;     # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            UNPAIR;     # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            SWAP;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            UNPAIR;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DUP;        # big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DIG 19;     # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            CAR;        # pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode)) : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            CAR;        # address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            DUP;        # address : address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            DUG 2;      # address : big_map address (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            GET;        # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            IF_NONE
                              {
                                PUSH int 123; # int : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            DUP;        # @some : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            CDR;        # nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            DUP 10;     # nat : nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            ADD;        # nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            UPDATE 2;   # @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            SOME;       # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            SWAP;       # address : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            UPDATE;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            PAIR;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            SWAP;       # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            PAIR;       # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            SWAP;       # pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            # self.data.totalSupply += compute_WeightedPool_305.value # pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            UNPAIR;     # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            SWAP;       # pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            UNPAIR;     # pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            UNPAIR;     # big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (map %tokens nat (pair address (option nat))) (nat %totalSupply) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            SWAP;       # pair (map %tokens nat (pair address (option nat))) (nat %totalSupply) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            UNPAIR;     # map nat (pair address (option nat)) : nat : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            SWAP;       # nat : map nat (pair address (option nat)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            DUP 7;      # nat : nat : map nat (pair address (option nat)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            ADD;        # nat : map nat (pair address (option nat)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            SWAP;       # map nat (pair address (option nat)) : nat : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            PAIR;       # pair (map nat (pair address (option nat))) nat : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            SWAP;       # big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (map nat (pair address (option nat))) nat : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            PAIR;       # pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            PAIR;       # pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            SWAP;       # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            PAIR;       # pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            SWAP;       # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            PAIR;       # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                            DUG 12;     # nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                          }
                          {}; # nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        # compute_ExternalWeightedProtocolFees_54 = sp.local("compute_ExternalWeightedProtocolFees_54", sp.view("getPostJoinExitProtocolFees", sp.record(balanceDeltas = compute_BasePool_310.value, normalizedWeights = compute_BaseWeightedPool_227.value, postJoinExitSupply = (self.data.totalSupply + match_pair_WeightedPool_299_fst) + params.sptAmountOut, preBalances = compute_BasePool_307.value, preJoinExitInvariant = params.invariant, preJoinExitSupply = self.data.totalSupply + match_pair_WeightedPool_299_fst, swapFee = sp.fst(self.data.feeCache)), self.data.weightedProtocolFeesLib, sp.TPair(sp.TNat, sp.TNat)).open_some(message = 808)) # nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP 13;     # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GET 10;     # address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP 14;     # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        CAR;        # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        CAR;        # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GET 5;      # pair nat nat : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        CAR;        # nat : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP 4;      # nat : nat : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP 16;     # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : nat : nat : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GET 5;      # pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat) : nat : nat : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GET 4;      # nat : nat : nat : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        ADD;        # nat : nat : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        PAIR;       # pair nat nat : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP 14;     # @parameter%afterJoinPool : pair nat nat : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        CAR;        # pair (map %amountsIn nat nat) (pair (map %balances nat nat) (nat %invariant)) : pair nat nat : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GET 4;      # nat : pair nat nat : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP 14;     # map nat nat : nat : pair nat nat : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        PAIR;       # pair (map nat nat) nat : pair nat nat : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        PAIR;       # pair (pair (map nat nat) nat) (pair nat nat) : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP 14;     # @parameter%afterJoinPool : pair (pair (map nat nat) nat) (pair nat nat) : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GET 6;      # nat : pair (pair (map nat nat) nat) (pair nat nat) : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP 5;      # nat : nat : pair (pair (map nat nat) nat) (pair nat nat) : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP 17;     # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : nat : nat : pair (pair (map nat nat) nat) (pair nat nat) : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GET 5;      # pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat) : nat : nat : pair (pair (map nat nat) nat) (pair nat nat) : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GET 4;      # nat : nat : nat : pair (pair (map nat nat) nat) (pair nat nat) : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        ADD;        # nat : nat : pair (pair (map nat nat) nat) (pair nat nat) : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        ADD;        # nat : pair (pair (map nat nat) nat) (pair nat nat) : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP 12;     # map nat nat : nat : pair (pair (map nat nat) nat) (pair nat nat) : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        PAIR;       # pair (map nat nat) nat : pair (pair (map nat nat) nat) (pair nat nat) : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP 13;     # map nat nat : pair (map nat nat) nat : pair (pair (map nat nat) nat) (pair nat nat) : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        PAIR;       # pair (map nat nat) (pair (map nat nat) nat) : pair (pair (map nat nat) nat) (pair nat nat) : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        PAIR;       # pair (pair (map nat nat) (pair (map nat nat) nat)) (pair (pair (map nat nat) nat) (pair nat nat)) : address : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        VIEW "getPostJoinExitProtocolFees" (pair nat nat); # option (pair nat nat) : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        IF_NONE
                          {
                            PUSH int 808; # int : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        # self.data.entries[12] = sp.snd(compute_ExternalWeightedProtocolFees_54.value) # @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DIG 13;     # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                        UNPAIR;     # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                        UNPAIR;     # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                        UNPAIR;     # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                        UNPAIR;     # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                        SWAP;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                        UNPAIR;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                        SWAP;       # big_map int nat : big_map address (pair (map address nat) nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                        DUP 7;      # @some : big_map int nat : big_map address (pair (map address nat) nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                        CDR;        # nat : big_map int nat : big_map address (pair (map address nat) nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                        SOME;       # option nat : big_map int nat : big_map address (pair (map address nat) nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                        PUSH int 12; # int : option nat : big_map int nat : big_map address (pair (map address nat) nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                        UPDATE;     # big_map int nat : big_map address (pair (map address nat) nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                        SWAP;       # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                        PAIR;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                        SWAP;       # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                        PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                        PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                        PAIR;       # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                        PAIR;       # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool
                        DUG 13;     # @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        # compute_WeightedPool_327 = sp.local("compute_WeightedPool_327", sp.fst(compute_ExternalWeightedProtocolFees_54.value)) # @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP;        # @some : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        CAR;        # nat : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        # if compute_WeightedPool_327.value > 0: # nat : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        PUSH nat 0; # nat : nat : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP 2;      # nat : nat : nat : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        COMPARE;    # int : nat : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GT;         # bool : nat : @some : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        IF
                          {
                            SWAP;       # @some : nat : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DROP;       # nat : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            SWAP;       # nat : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DROP;       # nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            SWAP;       # nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DROP;       # nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            SWAP;       # nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DROP;       # nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            SWAP;       # @some : nat : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DROP;       # nat : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            SWAP;       # option (map nat (option address)) : nat : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DROP;       # nat : big_map int nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            SWAP;       # big_map int nat : nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DROP;       # nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            SWAP;       # nat : nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DROP;       # nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            SWAP;       # nat : nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DROP;       # nat : map nat nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            SWAP;       # map nat nat : nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DROP;       # nat : map nat nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            SWAP;       # map nat nat : nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DROP;       # nat : map nat nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            SWAP;       # map nat nat : nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DROP;       # nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            # if ~ (self.data.balances.contains(self.data.protocolFeesCollector)): # nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DUP 3;      # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            CAR;        # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            CAR;        # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            CAR;        # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            GET 3;      # big_map address (pair (map address nat) nat) : nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DUP 4;      # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : big_map address (pair (map address nat) nat) : nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : big_map address (pair (map address nat) nat) : nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            CAR;        # pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode)) : big_map address (pair (map address nat) nat) : nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            CAR;        # address : big_map address (pair (map address nat) nat) : nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            MEM;        # bool : nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            IF
                              {}
                              {
                                # self.data.balances[self.data.protocolFeesCollector] = sp.record(approvals = {}, balance = 0) # nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                                DUP 3;      # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                                UNPAIR;     # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                                UNPAIR;     # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                                UNPAIR;     # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                                UNPAIR;     # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                                SWAP;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                                UNPAIR;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                                PUSH (option (pair (map address nat) nat)) (Some (Pair {} 0)); # option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                                DIG 9;      # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool
                                GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool
                                CAR;        # pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode)) : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool
                                CAR;        # address : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool
                                UPDATE;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool
                                PAIR;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool
                                SWAP;       # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool
                                PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool
                                PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool
                                PAIR;       # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool
                                PAIR;       # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : nat : @parameter%afterJoinPool
                                DUG 2;      # nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                              }; # nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            # self.data.balances[self.data.protocolFeesCollector].balance += compute_WeightedPool_327.value # nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DUP 3;      # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            UNPAIR;     # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            UNPAIR;     # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            UNPAIR;     # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            UNPAIR;     # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            SWAP;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            UNPAIR;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DUP;        # big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DIG 9;      # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool
                            GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool
                            CAR;        # pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode)) : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool
                            CAR;        # address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool
                            DUP;        # address : address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool
                            DUG 2;      # address : big_map address (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool
                            GET;        # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool
                            IF_NONE
                              {
                                PUSH int 123; # int : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool
                            DUP;        # @some : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool
                            CDR;        # nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool
                            DUP 10;     # nat : nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool
                            ADD;        # nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool
                            UPDATE 2;   # @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool
                            SOME;       # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool
                            SWAP;       # address : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool
                            UPDATE;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool
                            PAIR;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool
                            SWAP;       # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool
                            PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool
                            PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool
                            PAIR;       # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : nat : @parameter%afterJoinPool
                            SWAP;       # pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : @parameter%afterJoinPool
                            # self.data.totalSupply += compute_WeightedPool_327.value # pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : @parameter%afterJoinPool
                            UNPAIR;     # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : @parameter%afterJoinPool
                            SWAP;       # pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : @parameter%afterJoinPool
                            UNPAIR;     # pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : @parameter%afterJoinPool
                            UNPAIR;     # big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (map nat (pair address (option nat))) nat : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : @parameter%afterJoinPool
                            SWAP;       # pair (map nat (pair address (option nat))) nat : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : @parameter%afterJoinPool
                            UNPAIR;     # map nat (pair address (option nat)) : nat : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : @parameter%afterJoinPool
                            SWAP;       # nat : map nat (pair address (option nat)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : @parameter%afterJoinPool
                            DIG 6;      # nat : nat : map nat (pair address (option nat)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                            ADD;        # nat : map nat (pair address (option nat)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                            SWAP;       # map nat (pair address (option nat)) : nat : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                            PAIR;       # pair (map nat (pair address (option nat))) nat : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                            SWAP;       # big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (map nat (pair address (option nat))) nat : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                            PAIR;       # pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                            PAIR;       # pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                            SWAP;       # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                            PAIR;       # pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                            SWAP;       # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            PAIR;       # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @parameter%afterJoinPool
                            SWAP;       # @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                          }
                          {
                            DROP 13;    # @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                          }; # @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        # if ~ (self.data.balances.contains(params.recipient)): # @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP 2;      # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        CAR;        # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        CAR;        # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        CAR;        # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GET 3;      # big_map address (pair (map address nat) nat) : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP 2;      # @parameter%afterJoinPool : big_map address (pair (map address nat) nat) : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GET 5;      # address : big_map address (pair (map address nat) nat) : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        MEM;        # bool : @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        IF
                          {}
                          {
                            SWAP;       # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @parameter%afterJoinPool
                            # self.data.balances[params.recipient] = sp.record(approvals = {}, balance = 0) # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @parameter%afterJoinPool
                            UNPAIR;     # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            UNPAIR;     # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            UNPAIR;     # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            UNPAIR;     # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            SWAP;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            UNPAIR;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            PUSH (option (pair (map address nat) nat)) (Some (Pair {} 0)); # option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            DUP 8;      # @parameter%afterJoinPool : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            GET 5;      # address : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            UPDATE;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            PAIR;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            SWAP;       # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            PAIR;       # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            PAIR;       # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @parameter%afterJoinPool
                            SWAP;       # @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                          }; # @parameter%afterJoinPool : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        SWAP;       # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @parameter%afterJoinPool
                        # self.data.balances[params.recipient].balance += params.sptAmountOut # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @parameter%afterJoinPool
                        UNPAIR;     # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        UNPAIR;     # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        UNPAIR;     # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        UNPAIR;     # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        SWAP;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        UNPAIR;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        DUP;        # big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        DUP 8;      # @parameter%afterJoinPool : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        GET 5;      # address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        DUP;        # address : address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        DUG 2;      # address : big_map address (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        GET;        # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        IF_NONE
                          {
                            PUSH int 123; # int : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        DUP;        # @some : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        CDR;        # nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        DUP 10;     # @parameter%afterJoinPool : nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        GET 6;      # nat : nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        ADD;        # nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        UPDATE 2;   # @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        SOME;       # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        SWAP;       # address : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        UPDATE;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        PAIR;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        SWAP;       # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        PAIR;       # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%afterJoinPool
                        SWAP;       # pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                        # self.data.totalSupply += params.sptAmountOut # pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                        UNPAIR;     # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                        SWAP;       # pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                        UNPAIR;     # pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                        UNPAIR;     # big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (map nat (pair address (option nat))) nat : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                        SWAP;       # pair (map nat (pair address (option nat))) nat : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                        UNPAIR;     # map nat (pair address (option nat)) : nat : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                        SWAP;       # nat : map nat (pair address (option nat)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%afterJoinPool
                        DIG 6;      # @parameter%afterJoinPool : nat : map nat (pair address (option nat)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                        GET 6;      # nat : nat : map nat (pair address (option nat)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                        ADD;        # nat : map nat (pair address (option nat)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                        SWAP;       # map nat (pair address (option nat)) : nat : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                        PAIR;       # pair (map nat (pair address (option nat))) nat : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                        SWAP;       # big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (map nat (pair address (option nat))) nat : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                        PAIR;       # pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                        PAIR;       # pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                        SWAP;       # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                        PAIR;       # pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                        SWAP;       # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                        PAIR;       # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                      }; # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                  }; # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
              }; # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
            NIL operation; # list operation : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
          }
          {
            IF_LEFT
              {
                DIG 2;      # lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) : @parameter%approve : @storage
                DROP;       # @parameter%approve : @storage
                # == approve ==
                # sp.verify(sp.amount == sp.tez(0), 'FA1.2_TezSentToEntrypoint') # @parameter%approve : @storage
                PUSH mutez 0; # mutez : @parameter%approve : @storage
                AMOUNT;     # @amount : mutez : @parameter%approve : @storage
                COMPARE;    # int : @parameter%approve : @storage
                EQ;         # bool : @parameter%approve : @storage
                IF
                  {}
                  {
                    PUSH string "FA1.2_TezSentToEntrypoint"; # string : @parameter%approve : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%approve : @storage
                # if ~ (self.data.balances.contains(sp.sender)): # @parameter%approve : @storage
                DUP 2;      # @storage : @parameter%approve : @storage
                CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%approve : @storage
                CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @parameter%approve : @storage
                CAR;        # pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat)) : @parameter%approve : @storage
                GET 3;      # big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%approve : @storage
                SENDER;     # @sender : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%approve : @storage
                MEM;        # bool : @parameter%approve : @storage
                IF
                  {}
                  {
                    SWAP;       # @storage : @parameter%approve
                    # self.data.balances[sp.sender] = sp.record(approvals = {}, balance = 0) # @storage : @parameter%approve
                    UNPAIR;     # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%approve
                    UNPAIR;     # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%approve
                    UNPAIR;     # pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%approve
                    UNPAIR;     # address : pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%approve
                    SWAP;       # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%approve
                    UNPAIR;     # big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%approve
                    PUSH (option (pair (map address nat) nat)) (Some (Pair {} 0)); # option (pair (map address nat) nat) : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%approve
                    SENDER;     # @sender : option (pair (map address nat) nat) : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%approve
                    UPDATE;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%approve
                    PAIR;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%approve
                    SWAP;       # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%approve
                    PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%approve
                    PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%approve
                    PAIR;       # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%approve
                    PAIR;       # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @parameter%approve
                    SWAP;       # @parameter%approve : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                  }; # @parameter%approve : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                # sp.verify((self.data.balances[sp.sender].approvals.get(params.spender, default_value = 0) == 0) | (params.value == 0), 'FA1.2_UnsafeAllowanceChange') # @parameter%approve : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                PUSH nat 0; # nat : @parameter%approve : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                DUP 3;      # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : nat : @parameter%approve : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                CAR;        # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : @parameter%approve : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                CAR;        # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : nat : @parameter%approve : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                CAR;        # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : nat : @parameter%approve : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                GET 3;      # big_map address (pair (map address nat) nat) : nat : @parameter%approve : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                SENDER;     # @sender : big_map address (pair (map address nat) nat) : nat : @parameter%approve : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                GET;        # option (pair (map address nat) nat) : nat : @parameter%approve : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                IF_NONE
                  {
                    PUSH int 77; # int : nat : @parameter%approve : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : nat : @parameter%approve : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                CAR;        # map address nat : nat : @parameter%approve : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                DUP 3;      # @parameter%approve : map address nat : nat : @parameter%approve : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                CAR;        # address : map address nat : nat : @parameter%approve : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                GET;        # option nat : nat : @parameter%approve : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                IF_NONE
                  {
                    PUSH nat 0; # nat : nat : @parameter%approve : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                  }
                  {}; # nat : nat : @parameter%approve : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                COMPARE;    # int : @parameter%approve : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                EQ;         # bool : @parameter%approve : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                IF
                  {
                    PUSH bool True; # bool : @parameter%approve : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                  }
                  {
                    PUSH nat 0; # nat : @parameter%approve : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    DUP 2;      # @parameter%approve : nat : @parameter%approve : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    CDR;        # nat : nat : @parameter%approve : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    COMPARE;    # int : @parameter%approve : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    EQ;         # bool : @parameter%approve : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                  }; # bool : @parameter%approve : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                IF
                  {}
                  {
                    PUSH string "FA1.2_UnsafeAllowanceChange"; # string : @parameter%approve : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    FAILWITH;   # FAILED
                  }; # @parameter%approve : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                SWAP;       # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @parameter%approve
                # self.data.balances[sp.sender].approvals[params.spender] = params.value # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @parameter%approve
                UNPAIR;     # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%approve
                UNPAIR;     # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%approve
                UNPAIR;     # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%approve
                UNPAIR;     # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%approve
                SWAP;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%approve
                UNPAIR;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%approve
                DUP;        # big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%approve
                SENDER;     # @sender : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%approve
                DUP;        # @sender : @sender : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%approve
                DUG 2;      # @sender : big_map address (pair (map address nat) nat) : @sender : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%approve
                GET;        # option (pair (map address nat) nat) : @sender : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%approve
                IF_NONE
                  {
                    PUSH int 81; # int : @sender : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%approve
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @sender : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%approve
                DUP;        # @some : @some : @sender : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%approve
                CAR;        # map address nat : @some : @sender : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%approve
                DUP 10;     # @parameter%approve : map address nat : @some : @sender : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%approve
                CDR;        # nat : map address nat : @some : @sender : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%approve
                SOME;       # option nat : map address nat : @some : @sender : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%approve
                DIG 10;     # @parameter%approve : option nat : map address nat : @some : @sender : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                CAR;        # address : option nat : map address nat : @some : @sender : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                UPDATE;     # map address nat : @some : @sender : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                UPDATE 1;   # @some : @sender : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                SOME;       # option (pair (map address nat) nat) : @sender : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                SWAP;       # @sender : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                UPDATE;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                PAIR;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                SWAP;       # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                PAIR;       # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                PAIR;       # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                NIL operation; # list operation : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
              }
              {
                IF_LEFT
                  {
                    # == disableRecoveryMode ==
                    # sp.verify(self.data.admin == sp.set_type_expr(sp.sender, sp.TAddress), 'ONLY_ADMIN') # @parameter%disableRecoveryMode : @storage : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    SENDER;     # @sender : @parameter%disableRecoveryMode : @storage : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    DUP 3;      # @storage : @sender : @parameter%disableRecoveryMode : @storage : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @sender : @parameter%disableRecoveryMode : @storage : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @sender : @parameter%disableRecoveryMode : @storage : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    CAR;        # pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat)) : @sender : @parameter%disableRecoveryMode : @storage : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    CAR;        # address : @sender : @parameter%disableRecoveryMode : @storage : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    COMPARE;    # int : @parameter%disableRecoveryMode : @storage : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    EQ;         # bool : @parameter%disableRecoveryMode : @storage : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    IF
                      {}
                      {
                        PUSH string "ONLY_ADMIN"; # string : @parameter%disableRecoveryMode : @storage : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                        FAILWITH;   # FAILED
                      }; # @parameter%disableRecoveryMode : @storage : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    # sp.verify(self.data.recoveryMode == True, 438) # @parameter%disableRecoveryMode : @storage : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    PUSH bool True; # bool : @parameter%disableRecoveryMode : @storage : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    DUP 3;      # @storage : bool : @parameter%disableRecoveryMode : @storage : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : bool : @parameter%disableRecoveryMode : @storage : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    CAR;        # pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode)) : bool : @parameter%disableRecoveryMode : @storage : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    GET 4;      # bool : bool : @parameter%disableRecoveryMode : @storage : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    COMPARE;    # int : @parameter%disableRecoveryMode : @storage : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    EQ;         # bool : @parameter%disableRecoveryMode : @storage : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    IF
                      {}
                      {
                        PUSH int 438; # int : @parameter%disableRecoveryMode : @storage : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                        FAILWITH;   # FAILED
                      }; # @parameter%disableRecoveryMode : @storage : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    SWAP;       # @storage : @parameter%disableRecoveryMode : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    # self.data.recoveryMode = False # @storage : @parameter%disableRecoveryMode : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    UNPAIR;     # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%disableRecoveryMode : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    SWAP;       # pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%disableRecoveryMode : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    UNPAIR;     # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%disableRecoveryMode : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    UNPAIR;     # pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode)) : pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)) : pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%disableRecoveryMode : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    UNPAIR;     # address : pair (option %rateProviders (map nat (option address))) (bool %recoveryMode) : pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)) : pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%disableRecoveryMode : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    SWAP;       # pair (option %rateProviders (map nat (option address))) (bool %recoveryMode) : address : pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)) : pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%disableRecoveryMode : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    CAR;        # option (map nat (option address)) : address : pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)) : pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%disableRecoveryMode : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    PUSH bool False; # bool : option (map nat (option address)) : address : pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)) : pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%disableRecoveryMode : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    SWAP;       # option (map nat (option address)) : bool : address : pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)) : pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%disableRecoveryMode : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    PAIR;       # pair (option (map nat (option address))) bool : address : pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)) : pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%disableRecoveryMode : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    SWAP;       # address : pair (option (map nat (option address))) bool : pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)) : pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%disableRecoveryMode : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    PAIR;       # pair address (pair (option (map nat (option address))) bool) : pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)) : pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%disableRecoveryMode : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    PAIR;       # pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%disableRecoveryMode : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    PAIR;       # pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%disableRecoveryMode : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    SWAP;       # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%disableRecoveryMode : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    PAIR;       # pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @parameter%disableRecoveryMode : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    SWAP;       # @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    # if True:
                    # compute_BaseWeightedPool_49 = sp.local("compute_BaseWeightedPool_49", sp.view("getPoolTokens", self.data.poolId.open_some(), self.data.vault, sp.TPair(sp.TMap(sp.TNat, sp.TPair(sp.TAddress, sp.TOption(sp.TNat))), sp.TMap(sp.TNat, sp.TNat))).open_some(message = 813)) # @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    DUP 2;      # pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    GET 7;      # address : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    DUP 3;      # pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : address : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : address : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    GET 7;      # option (pair address nat) : address : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    IF_NONE
                      {
                        PUSH int 49; # int : address : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : address : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    VIEW "getPoolTokens" (pair (map nat (pair address (option nat))) (map nat nat)); # option (pair (map nat (pair address (option nat))) (map nat nat)) : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    IF_NONE
                      {
                        PUSH int 813; # int : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    # compute_BaseWeightedPool_54 = sp.local("compute_BaseWeightedPool_54", self.data.scaling_helpers[0]((sp.snd(compute_BaseWeightedPool_49.value), self.data.scalingFactors, self.data.fixedPoint[20]))) # @some : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    DUP 3;      # pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    GET 3;      # pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    GET 5;      # big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    PUSH int 0; # int : big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    GET;        # option (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    IF_NONE
                      {
                        PUSH int 54; # int : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    DUP 4;      # pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @some : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @some : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    GET 6;      # big_map nat (lambda (pair nat nat) nat) : @some : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    PUSH nat 20; # nat : big_map nat (lambda (pair nat nat) nat) : @some : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    GET;        # option (lambda (pair nat nat) nat) : @some : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    IF_NONE
                      {
                        PUSH int 55; # int : @some : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @some : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    DUP 5;      # pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @some : @some : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    GET 3;      # pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : @some : @some : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    GET 3;      # map nat nat : @some : @some : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    PAIR;       # pair (map nat nat) @some : @some : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    DUP 3;      # @some : pair (map nat nat) @some : @some : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    CDR;        # map nat nat : pair (map nat nat) @some : @some : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    PAIR;       # pair (map nat nat) (pair (map nat nat) @some) : @some : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    EXEC;       # map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    # compute_ExternalWeightedMath_93 = sp.local("compute_ExternalWeightedMath_93", sp.view("calculateInvariant", sp.record(balances = compute_BaseWeightedPool_54.value, normalizedWeights = self.data.normalizedWeights), self.data.weightedMathLib, sp.TNat).open_some(message = 802)) # map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    DUP 4;      # pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    GET 9;      # address : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    DUP 5;      # pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : address : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : address : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    GET 5;      # map nat nat : address : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    DUP 3;      # map nat nat : map nat nat : address : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    PAIR;       # pair (map nat nat) (map nat nat) : address : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    VIEW "calculateInvariant" nat; # option nat : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    IF_NONE
                      {
                        PUSH int 802; # int : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    # self.data.entries[12] = compute_ExternalWeightedMath_93.value # @some : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    DIG 4;      # pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @some : map nat nat : @some : @parameter%disableRecoveryMode : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    UNPAIR;     # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : map nat nat : @some : @parameter%disableRecoveryMode : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    UNPAIR;     # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : map nat nat : @some : @parameter%disableRecoveryMode : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    UNPAIR;     # pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : map nat nat : @some : @parameter%disableRecoveryMode : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    UNPAIR;     # address : pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : map nat nat : @some : @parameter%disableRecoveryMode : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    SWAP;       # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : map nat nat : @some : @parameter%disableRecoveryMode : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    UNPAIR;     # big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : map nat nat : @some : @parameter%disableRecoveryMode : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    SWAP;       # big_map int nat : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : map nat nat : @some : @parameter%disableRecoveryMode : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    DUP 7;      # @some : big_map int nat : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : map nat nat : @some : @parameter%disableRecoveryMode : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    SOME;       # option nat : big_map int nat : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : map nat nat : @some : @parameter%disableRecoveryMode : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    PUSH int 12; # int : option nat : big_map int nat : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : map nat nat : @some : @parameter%disableRecoveryMode : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    UPDATE;     # big_map int nat : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : map nat nat : @some : @parameter%disableRecoveryMode : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    SWAP;       # big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : map nat nat : @some : @parameter%disableRecoveryMode : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    PAIR;       # pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : map nat nat : @some : @parameter%disableRecoveryMode : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    SWAP;       # address : pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : map nat nat : @some : @parameter%disableRecoveryMode : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    PAIR;       # pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : map nat nat : @some : @parameter%disableRecoveryMode : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    PAIR;       # pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : map nat nat : @some : @parameter%disableRecoveryMode : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    PAIR;       # pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : map nat nat : @some : @parameter%disableRecoveryMode : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    PAIR;       # pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @some : map nat nat : @some : @parameter%disableRecoveryMode : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    DUG 4;      # @some : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    # if self.data.exemptFromYieldFees == False: # @some : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    PUSH bool False; # bool : @some : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    DUP 6;      # pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : bool : @some : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    CAR;        # pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : bool : @some : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    CAR;        # pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : bool : @some : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    GET 3;      # bool : bool : @some : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    COMPARE;    # int : @some : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    EQ;         # bool : @some : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    IF
                      {
                        # compute_ExternalWeightedProtocolFees_60 = sp.local("compute_ExternalWeightedProtocolFees_60", sp.view("getRateProduct", sp.record(normalizedWeights = self.data.normalizedWeights, rateProviders = self.data.rateProviders.open_some()), self.data.weightedProtocolFeesLib, sp.TNat).open_some(message = 809)) # @some : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                        DUP 5;      # pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @some : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                        GET 10;     # address : @some : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                        DUP 6;      # pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : address : @some : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                        GET 3;      # pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : address : @some : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                        CAR;        # pair address (pair (option (map nat (option address))) bool) : address : @some : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                        GET 3;      # option (map nat (option address)) : address : @some : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                        IF_NONE
                          {
                            PUSH int 395; # int : address : @some : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : address : @some : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                        DUP 7;      # pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @some : address : @some : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                        CAR;        # pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : address : @some : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                        GET 5;      # map nat nat : @some : address : @some : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                        PAIR;       # pair (map nat nat) @some : address : @some : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                        VIEW "getRateProduct" nat; # option nat : @some : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                        IF_NONE
                          {
                            PUSH int 809; # int : @some : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @some : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                        # if compute_ExternalWeightedProtocolFees_60.value > self.data.entries[11]: # @some : @some : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                        DUP 6;      # pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @some : @some : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                        CAR;        # pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : @some : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                        CAR;        # pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @some : @some : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                        CAR;        # pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat)) : @some : @some : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                        GET 4;      # big_map int nat : @some : @some : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                        PUSH int 11; # int : big_map int nat : @some : @some : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                        GET;        # option nat : @some : @some : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                        IF_NONE
                          {
                            PUSH int 390; # int : @some : @some : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @some : @some : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                        DUP 2;      # @some : @some : @some : @some : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                        COMPARE;    # int : @some : @some : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                        GT;         # bool : @some : @some : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                        IF
                          {
                            SWAP;       # @some : @some : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                            DROP;       # @some : map nat nat : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                            SWAP;       # map nat nat : @some : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                            DROP;       # @some : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                            SWAP;       # @some : @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                            DROP;       # @some : @parameter%disableRecoveryMode : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                            SWAP;       # @parameter%disableRecoveryMode : @some : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                            DROP;       # @some : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                            DIG 2;      # lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) : @some : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DROP;       # @some : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            SWAP;       # pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @some
                            # self.data.entries[11] = compute_ExternalWeightedProtocolFees_60.value # pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @some
                            UNPAIR;     # pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some
                            UNPAIR;     # pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some
                            UNPAIR;     # pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some
                            UNPAIR;     # address : pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some
                            SWAP;       # pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some
                            UNPAIR;     # big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some
                            SWAP;       # big_map int nat : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some
                            DIG 6;      # @some : big_map int nat : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                            SOME;       # option nat : big_map int nat : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                            PUSH int 11; # int : option nat : big_map int nat : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                            UPDATE;     # big_map int nat : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                            SWAP;       # big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                            PAIR;       # pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                            SWAP;       # address : pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                            PAIR;       # pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                            PAIR;       # pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                            PAIR;       # pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                            PAIR;       # pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                          }
                          {
                            DROP 5;     # pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                            SWAP;       # lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            DROP;       # pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                          }; # pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                      }
                      {
                        DROP 4;     # pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                        SWAP;       # lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DROP;       # pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                      }; # pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    # sp.emit(False, tag = "RecoveryModeStateChanged") # pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    NIL operation; # list operation : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    PUSH bool False; # bool : list operation : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    EMIT %RecoveryModeStateChanged bool; # operation : list operation : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    CONS;       # list operation : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                  }
                  {
                    DROP;       # @storage : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                    SWAP;       # lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) : @storage
                    DROP;       # @storage
                    # == enableRecoveryMode ==
                    # sp.verify(self.data.admin == sp.set_type_expr(sp.sender, sp.TAddress), 'ONLY_ADMIN') # @storage
                    SENDER;     # @sender : @storage
                    DUP 2;      # @storage : @sender : @storage
                    CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @sender : @storage
                    CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @sender : @storage
                    CAR;        # pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat)) : @sender : @storage
                    CAR;        # address : @sender : @storage
                    COMPARE;    # int : @storage
                    EQ;         # bool : @storage
                    IF
                      {}
                      {
                        PUSH string "ONLY_ADMIN"; # string : @storage
                        FAILWITH;   # FAILED
                      }; # @storage
                    # sp.verify(self.data.recoveryMode == False, 437) # @storage
                    PUSH bool False; # bool : @storage
                    DUP 2;      # @storage : bool : @storage
                    GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : bool : @storage
                    CAR;        # pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode)) : bool : @storage
                    GET 4;      # bool : bool : @storage
                    COMPARE;    # int : @storage
                    EQ;         # bool : @storage
                    IF
                      {}
                      {
                        PUSH int 437; # int : @storage
                        FAILWITH;   # FAILED
                      }; # @storage
                    # self.data.recoveryMode = True # @storage
                    UNPAIR;     # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                    SWAP;       # pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                    UNPAIR;     # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                    UNPAIR;     # pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode)) : pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)) : pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                    UNPAIR;     # address : pair (option %rateProviders (map nat (option address))) (bool %recoveryMode) : pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)) : pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                    SWAP;       # pair (option %rateProviders (map nat (option address))) (bool %recoveryMode) : address : pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)) : pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                    CAR;        # option (map nat (option address)) : address : pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)) : pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                    PUSH bool True; # bool : option (map nat (option address)) : address : pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)) : pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                    SWAP;       # option (map nat (option address)) : bool : address : pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)) : pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                    PAIR;       # pair (option (map nat (option address))) bool : address : pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)) : pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                    SWAP;       # address : pair (option (map nat (option address))) bool : pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)) : pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                    PAIR;       # pair address (pair (option (map nat (option address))) bool) : pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)) : pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                    PAIR;       # pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                    PAIR;       # pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                    SWAP;       # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                    PAIR;       # pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    # if False:
                    # sp.emit(True, tag = "RecoveryModeStateChanged") # pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    NIL operation; # list operation : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    PUSH bool True; # bool : list operation : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    EMIT %RecoveryModeStateChanged bool; # operation : list operation : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    CONS;       # list operation : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                  }; # list operation : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
              }; # list operation : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
          }; # list operation : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
      }
      {
        IF_LEFT
          {
            IF_LEFT
              {
                DROP;       # @storage : lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address))))))
                SWAP;       # lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) : @storage
                DROP;       # @storage
                # == initializePool ==
                # sp.verify(self.data.initialized == False) # @storage
                PUSH bool False; # bool : @storage
                DUP 2;      # @storage : bool : @storage
                CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : bool : @storage
                GET 3;      # pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : bool : @storage
                GET 3;      # bool : bool : @storage
                COMPARE;    # int : @storage
                EQ;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.initialized == False"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # compute_PoolRegistrationLib_44 = sp.local("compute_PoolRegistrationLib_44", sp.view("getNextPoolNonce", sp.unit, self.data.vault, sp.TNat).open_some(message = 814)) # @storage
                DUP;        # @storage : @storage
                GET 7;      # address : @storage
                UNIT;       # unit : address : @storage
                VIEW "getNextPoolNonce" nat; # option nat : @storage
                IF_NONE
                  {
                    PUSH int 814; # int : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @storage
                # sp.transfer(sp.unit, sp.tez(0), sp.contract(sp.TUnit, self.data.vault, entrypoint='registerPool').open_some(message = 'registerPoolFail')) # @some : @storage
                NIL operation; # list operation : @some : @storage
                DUP 3;      # @storage : list operation : @some : @storage
                GET 7;      # address : list operation : @some : @storage
                CONTRACT %registerPool unit; # option (contract unit) : list operation : @some : @storage
                IF_NONE
                  {
                    PUSH string "registerPoolFail"; # string : list operation : @some : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list operation : @some : @storage
                PUSH mutez 0; # mutez : @some : list operation : @some : @storage
                UNIT;       # unit : mutez : @some : list operation : @some : @storage
                TRANSFER_TOKENS; # operation : list operation : @some : @storage
                CONS;       # list operation : @some : @storage
                # sp.transfer(sp.record(assetManagers = sp.none, poolId = (sp.self_address, compute_PoolRegistrationLib_44.value), tokens = self.data.tokens), sp.tez(0), sp.contract(sp.TRecord(assetManagers = sp.TOption(sp.TMap(sp.TNat, sp.TAddress)), poolId = sp.TPair(sp.TAddress, sp.TNat), tokens = sp.TMap(sp.TNat, sp.TPair(sp.TAddress, sp.TOption(sp.TNat)))).layout(("assetManagers", ("poolId", "tokens"))), self.data.vault, entrypoint='registerTokens').open_some(message = 'registerTokensFail')) # list operation : @some : @storage
                DUP 3;      # @storage : list operation : @some : @storage
                GET 7;      # address : list operation : @some : @storage
                CONTRACT %registerTokens (pair (option %assetManagers (map nat address)) (pair (pair %poolId address nat) (map %tokens nat (pair address (option nat))))); # option (contract (pair (option %assetManagers (map nat address)) (pair (pair %poolId address nat) (map %tokens nat (pair address (option nat)))))) : list operation : @some : @storage
                IF_NONE
                  {
                    PUSH string "registerTokensFail"; # string : list operation : @some : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list operation : @some : @storage
                PUSH mutez 0; # mutez : @some : list operation : @some : @storage
                DUP 5;      # @storage : mutez : @some : list operation : @some : @storage
                GET 5;      # pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply)) : mutez : @some : list operation : @some : @storage
                GET 3;      # map nat (pair address (option nat)) : mutez : @some : list operation : @some : @storage
                DUP 5;      # @some : map nat (pair address (option nat)) : mutez : @some : list operation : @some : @storage
                SELF_ADDRESS; # @self : @some : map nat (pair address (option nat)) : mutez : @some : list operation : @some : @storage
                PAIR;       # pair @self @some : map nat (pair address (option nat)) : mutez : @some : list operation : @some : @storage
                NONE (map nat address); # option (map nat address) : pair @self @some : map nat (pair address (option nat)) : mutez : @some : list operation : @some : @storage
                PAIR 3;     # pair (option (map nat address)) (pair (pair @self @some) (map nat (pair address (option nat)))) : mutez : @some : list operation : @some : @storage
                TRANSFER_TOKENS; # operation : list operation : @some : @storage
                CONS;       # list operation : @some : @storage
                # self.data.poolId = sp.some((sp.self_address, compute_PoolRegistrationLib_44.value)) # list operation : @some : @storage
                DIG 2;      # @storage : list operation : @some
                UNPAIR;     # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : list operation : @some
                UNPAIR;     # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : list operation : @some
                SWAP;       # pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : list operation : @some
                UNPAIR;     # pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)) : pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : list operation : @some
                SWAP;       # pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)) : pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : list operation : @some
                UNPAIR;     # map nat nat : pair (option %poolId (pair address nat)) (option %proposed_admin address) : pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : list operation : @some
                SWAP;       # pair (option %poolId (pair address nat)) (option %proposed_admin address) : map nat nat : pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : list operation : @some
                CDR;        # option address : map nat nat : pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : list operation : @some
                DIG 6;      # @some : option address : map nat nat : pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : list operation
                SELF_ADDRESS; # @self : @some : option address : map nat nat : pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : list operation
                PAIR;       # pair @self @some : option address : map nat nat : pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : list operation
                SOME;       # option (pair @self @some) : option address : map nat nat : pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : list operation
                PAIR;       # pair (option (pair @self @some)) (option address) : map nat nat : pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : list operation
                SWAP;       # map nat nat : pair (option (pair @self @some)) (option address) : pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : list operation
                PAIR;       # pair (map nat nat) (pair (option (pair @self @some)) (option address)) : pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : list operation
                SWAP;       # pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : pair (map nat nat) (pair (option (pair @self @some)) (option address)) : pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : list operation
                # self.data.initialized = True # pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : pair (map nat nat) (pair (option (pair @self @some)) (option address)) : pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : list operation
                UNPAIR;     # lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : pair (bool %initialized) (big_map %metadata string bytes) : pair (map nat nat) (pair (option (pair @self @some)) (option address)) : pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : list operation
                SWAP;       # pair (bool %initialized) (big_map %metadata string bytes) : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : pair (map nat nat) (pair (option (pair @self @some)) (option address)) : pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : list operation
                CDR;        # big_map string bytes : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : pair (map nat nat) (pair (option (pair @self @some)) (option address)) : pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : list operation
                PUSH bool True; # bool : big_map string bytes : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : pair (map nat nat) (pair (option (pair @self @some)) (option address)) : pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : list operation
                PAIR;       # pair bool (big_map string bytes) : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : pair (map nat nat) (pair (option (pair @self @some)) (option address)) : pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : list operation
                SWAP;       # lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : pair bool (big_map string bytes) : pair (map nat nat) (pair (option (pair @self @some)) (option address)) : pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : list operation
                PAIR;       # pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes)) : pair (map nat nat) (pair (option (pair @self @some)) (option address)) : pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : list operation
                PAIR;       # pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair @self @some)) (option address))) : pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : list operation
                SWAP;       # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair @self @some)) (option address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : list operation
                PAIR;       # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair @self @some)) (option address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : list operation
                PAIR;       # pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair @self @some)) (option address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : list operation
                SWAP;       # list operation : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair @self @some)) (option address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
              }
              {
                IF_LEFT
                  {
                    DIG 2;      # lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) : @parameter%run_lambda : @storage
                    DROP;       # @parameter%run_lambda : @storage
                    # == run_lambda ==
                    # sp.verify(self.data.admin == sp.set_type_expr(sp.sender, sp.TAddress), 'ONLY_ADMIN') # @parameter%run_lambda : @storage
                    SENDER;     # @sender : @parameter%run_lambda : @storage
                    DUP 3;      # @storage : @sender : @parameter%run_lambda : @storage
                    CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @sender : @parameter%run_lambda : @storage
                    CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @sender : @parameter%run_lambda : @storage
                    CAR;        # pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat)) : @sender : @parameter%run_lambda : @storage
                    CAR;        # address : @sender : @parameter%run_lambda : @storage
                    COMPARE;    # int : @parameter%run_lambda : @storage
                    EQ;         # bool : @parameter%run_lambda : @storage
                    IF
                      {}
                      {
                        PUSH string "ONLY_ADMIN"; # string : @parameter%run_lambda : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%run_lambda : @storage
                    # for op in params(sp.unit): ... # @parameter%run_lambda : @storage
                    NIL operation; # list operation : @parameter%run_lambda : @storage
                    UNIT;       # unit : list operation : @parameter%run_lambda : @storage
                    DIG 2;      # @parameter%run_lambda : unit : list operation : @storage
                    DUG 3;      # unit : list operation : @storage : @parameter%run_lambda
                    PAIR 3;     # pair unit (pair (list operation) @storage) : @parameter%run_lambda
                    EXEC;       # pair (list operation) (pair (list operation) (pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))))
                    UNPAIR 3;   # list operation : list operation : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    ITER
                      {
                        # sp.operations().push(op) # operation : list operation : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        CONS;       # list operation : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                      }; # list operation : pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                  }
                  {
                    DIG 2;      # lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) : @parameter%setSwapFeePercentage : @storage
                    DROP;       # @parameter%setSwapFeePercentage : @storage
                    # == setSwapFeePercentage ==
                    # sp.verify(self.data.settings.paused == False, 'ONLY_UNPAUSED') # @parameter%setSwapFeePercentage : @storage
                    PUSH bool False; # bool : @parameter%setSwapFeePercentage : @storage
                    DUP 3;      # @storage : bool : @parameter%setSwapFeePercentage : @storage
                    GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : bool : @parameter%setSwapFeePercentage : @storage
                    GET 6;      # bool : bool : @parameter%setSwapFeePercentage : @storage
                    COMPARE;    # int : @parameter%setSwapFeePercentage : @storage
                    EQ;         # bool : @parameter%setSwapFeePercentage : @storage
                    IF
                      {}
                      {
                        PUSH string "ONLY_UNPAUSED"; # string : @parameter%setSwapFeePercentage : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setSwapFeePercentage : @storage
                    # sp.verify(self.data.admin == sp.set_type_expr(sp.sender, sp.TAddress), 'ONLY_ADMIN') # @parameter%setSwapFeePercentage : @storage
                    SENDER;     # @sender : @parameter%setSwapFeePercentage : @storage
                    DUP 3;      # @storage : @sender : @parameter%setSwapFeePercentage : @storage
                    CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @sender : @parameter%setSwapFeePercentage : @storage
                    CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @sender : @parameter%setSwapFeePercentage : @storage
                    CAR;        # pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat)) : @sender : @parameter%setSwapFeePercentage : @storage
                    CAR;        # address : @sender : @parameter%setSwapFeePercentage : @storage
                    COMPARE;    # int : @parameter%setSwapFeePercentage : @storage
                    EQ;         # bool : @parameter%setSwapFeePercentage : @storage
                    IF
                      {}
                      {
                        PUSH string "ONLY_ADMIN"; # string : @parameter%setSwapFeePercentage : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setSwapFeePercentage : @storage
                    # sp.verify(params >= 1000000000000, 203) # @parameter%setSwapFeePercentage : @storage
                    PUSH nat 1000000000000; # nat : @parameter%setSwapFeePercentage : @storage
                    DUP 2;      # @parameter%setSwapFeePercentage : nat : @parameter%setSwapFeePercentage : @storage
                    COMPARE;    # int : @parameter%setSwapFeePercentage : @storage
                    GE;         # bool : @parameter%setSwapFeePercentage : @storage
                    IF
                      {}
                      {
                        PUSH int 203; # int : @parameter%setSwapFeePercentage : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setSwapFeePercentage : @storage
                    # sp.verify(params <= 100000000000000000, 202) # @parameter%setSwapFeePercentage : @storage
                    PUSH nat 100000000000000000; # nat : @parameter%setSwapFeePercentage : @storage
                    DUP 2;      # @parameter%setSwapFeePercentage : nat : @parameter%setSwapFeePercentage : @storage
                    COMPARE;    # int : @parameter%setSwapFeePercentage : @storage
                    LE;         # bool : @parameter%setSwapFeePercentage : @storage
                    IF
                      {}
                      {
                        PUSH int 202; # int : @parameter%setSwapFeePercentage : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setSwapFeePercentage : @storage
                    SWAP;       # @storage : @parameter%setSwapFeePercentage
                    # self.data.entries[13] = params # @storage : @parameter%setSwapFeePercentage
                    UNPAIR;     # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%setSwapFeePercentage
                    UNPAIR;     # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%setSwapFeePercentage
                    UNPAIR;     # pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%setSwapFeePercentage
                    UNPAIR;     # address : pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%setSwapFeePercentage
                    SWAP;       # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%setSwapFeePercentage
                    UNPAIR;     # big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%setSwapFeePercentage
                    SWAP;       # big_map int nat : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%setSwapFeePercentage
                    DUP 7;      # @parameter%setSwapFeePercentage : big_map int nat : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%setSwapFeePercentage
                    SOME;       # option nat : big_map int nat : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%setSwapFeePercentage
                    PUSH int 13; # int : option nat : big_map int nat : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%setSwapFeePercentage
                    UPDATE;     # big_map int nat : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%setSwapFeePercentage
                    SWAP;       # big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%setSwapFeePercentage
                    PAIR;       # pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%setSwapFeePercentage
                    SWAP;       # address : pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%setSwapFeePercentage
                    PAIR;       # pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%setSwapFeePercentage
                    PAIR;       # pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%setSwapFeePercentage
                    PAIR;       # pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%setSwapFeePercentage
                    PAIR;       # pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @parameter%setSwapFeePercentage
                    SWAP;       # @parameter%setSwapFeePercentage : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    # sp.emit(params, tag = "SwapFeePercentageChanged") # @parameter%setSwapFeePercentage : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    EMIT %SwapFeePercentageChanged nat; # operation : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    NIL operation; # list operation : operation : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    SWAP;       # operation : list operation : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    CONS;       # list operation : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                  }; # list operation : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
              }; # list operation : pair (pair (pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
          }
          {
            DIG 2;      # lambda (pair (option (pair address nat)) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) (pair unit (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair nat (map string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair address (pair address address)))))) : @parameter.right.right : @storage
            DROP;       # @parameter.right.right : @storage
            IF_LEFT
              {
                IF_LEFT
                  {
                    # == set_paused ==
                    # sp.verify(self.data.admin == sp.set_type_expr(sp.sender, sp.TAddress), 'ONLY_ADMIN') # @parameter%set_paused : @storage
                    SENDER;     # @sender : @parameter%set_paused : @storage
                    DUP 3;      # @storage : @sender : @parameter%set_paused : @storage
                    CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @sender : @parameter%set_paused : @storage
                    CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @sender : @parameter%set_paused : @storage
                    CAR;        # pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat)) : @sender : @parameter%set_paused : @storage
                    CAR;        # address : @sender : @parameter%set_paused : @storage
                    COMPARE;    # int : @parameter%set_paused : @storage
                    EQ;         # bool : @parameter%set_paused : @storage
                    IF
                      {}
                      {
                        PUSH string "ONLY_ADMIN"; # string : @parameter%set_paused : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%set_paused : @storage
                    SWAP;       # @storage : @parameter%set_paused
                    # self.data.settings.paused = params # @storage : @parameter%set_paused
                    UNPAIR;     # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%set_paused
                    SWAP;       # pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%set_paused
                    UNPAIR;     # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%set_paused
                    UNPAIR;     # pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode)) : pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)) : pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%set_paused
                    SWAP;       # pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)) : pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode)) : pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%set_paused
                    UNPAIR;     # map nat nat : pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings) : pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode)) : pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%set_paused
                    SWAP;       # pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings) : map nat nat : pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode)) : pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%set_paused
                    CAR;        # big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : map nat nat : pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode)) : pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%set_paused
                    DIG 5;      # @parameter%set_paused : big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : map nat nat : pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode)) : pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                    SWAP;       # big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : @parameter%set_paused : map nat nat : pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode)) : pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                    PAIR;       # pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) @parameter%set_paused : map nat nat : pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode)) : pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                    SWAP;       # map nat nat : pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) @parameter%set_paused : pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode)) : pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                    PAIR;       # pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) @parameter%set_paused) : pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode)) : pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                    SWAP;       # pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode)) : pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) @parameter%set_paused) : pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                    PAIR;       # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) @parameter%set_paused)) : pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                    PAIR;       # pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) @parameter%set_paused))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))
                    SWAP;       # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) @parameter%set_paused))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                    PAIR;       # pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) @parameter%set_paused))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                  }
                  {
                    # == transfer ==
                    # result = sp.local("result", False)
                    # if sp.sender == self.data.vault: # @parameter%transfer : @storage
                    DUP 2;      # @storage : @parameter%transfer : @storage
                    GET 7;      # address : @parameter%transfer : @storage
                    SENDER;     # @sender : address : @parameter%transfer : @storage
                    COMPARE;    # int : @parameter%transfer : @storage
                    EQ;         # bool : @parameter%transfer : @storage
                    IF
                      {
                        # result.value = True # @parameter%transfer : @storage
                        PUSH bool True; # bool : @parameter%transfer : @storage
                      }
                      {
                        # result.value = self.data.balances[params.from_].approvals.get(sp.sender, default_value = 0) >= params.value # @parameter%transfer : @storage
                        DUP;        # @parameter%transfer : @parameter%transfer : @storage
                        GET 4;      # nat : @parameter%transfer : @storage
                        DUP 3;      # @storage : nat : @parameter%transfer : @storage
                        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : @parameter%transfer : @storage
                        CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : nat : @parameter%transfer : @storage
                        CAR;        # pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat)) : nat : @parameter%transfer : @storage
                        GET 3;      # big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%transfer : @storage
                        DUP 3;      # @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%transfer : @storage
                        CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%transfer : @storage
                        GET;        # option (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%transfer : @storage
                        IF_NONE
                          {
                            PUSH int 77; # int : nat : @parameter%transfer : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : @parameter%transfer : @storage
                        CAR;        # map address nat : nat : @parameter%transfer : @storage
                        SENDER;     # @sender : map address nat : nat : @parameter%transfer : @storage
                        GET;        # option nat : nat : @parameter%transfer : @storage
                        IF_NONE
                          {
                            PUSH nat 0; # nat : nat : @parameter%transfer : @storage
                          }
                          {}; # nat : nat : @parameter%transfer : @storage
                        COMPARE;    # int : @parameter%transfer : @storage
                        GE;         # bool : @parameter%transfer : @storage
                      }; # bool : @parameter%transfer : @storage
                    # sp.verify((params.from_ == sp.sender) | result.value, 'FA1.2_NotEnoughAllowance') # bool : @parameter%transfer : @storage
                    SENDER;     # @sender : bool : @parameter%transfer : @storage
                    DUP 3;      # @parameter%transfer : @sender : bool : @parameter%transfer : @storage
                    CAR;        # address : @sender : bool : @parameter%transfer : @storage
                    COMPARE;    # int : bool : @parameter%transfer : @storage
                    EQ;         # bool : bool : @parameter%transfer : @storage
                    IF
                      {
                        DROP;       # @parameter%transfer : @storage
                        PUSH bool True; # bool : @parameter%transfer : @storage
                      }
                      {}; # bool : @parameter%transfer : @storage
                    IF
                      {}
                      {
                        PUSH string "FA1.2_NotEnoughAllowance"; # string : @parameter%transfer : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%transfer : @storage
                    # sp.verify(sp.amount == sp.tez(0), 'FA1.2_TezSentToEntrypoint') # @parameter%transfer : @storage
                    PUSH mutez 0; # mutez : @parameter%transfer : @storage
                    AMOUNT;     # @amount : mutez : @parameter%transfer : @storage
                    COMPARE;    # int : @parameter%transfer : @storage
                    EQ;         # bool : @parameter%transfer : @storage
                    IF
                      {}
                      {
                        PUSH string "FA1.2_TezSentToEntrypoint"; # string : @parameter%transfer : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%transfer : @storage
                    # if ~ (self.data.balances.contains(params.from_)): # @parameter%transfer : @storage
                    DUP 2;      # @storage : @parameter%transfer : @storage
                    CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%transfer : @storage
                    CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @parameter%transfer : @storage
                    CAR;        # pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat)) : @parameter%transfer : @storage
                    GET 3;      # big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%transfer : @storage
                    DUP 2;      # @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%transfer : @storage
                    CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%transfer : @storage
                    MEM;        # bool : @parameter%transfer : @storage
                    IF
                      {}
                      {
                        SWAP;       # @storage : @parameter%transfer
                        # self.data.balances[params.from_] = sp.record(approvals = {}, balance = 0) # @storage : @parameter%transfer
                        UNPAIR;     # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                        UNPAIR;     # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                        UNPAIR;     # pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                        UNPAIR;     # address : pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                        SWAP;       # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                        UNPAIR;     # big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                        PUSH (option (pair (map address nat) nat)) (Some (Pair {} 0)); # option (pair (map address nat) nat) : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                        DUP 8;      # @parameter%transfer : option (pair (map address nat) nat) : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                        CAR;        # address : option (pair (map address nat) nat) : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                        UPDATE;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                        PAIR;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                        SWAP;       # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                        PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                        PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                        PAIR;       # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                        PAIR;       # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @parameter%transfer
                        SWAP;       # @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                      }; # @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    # if ~ (self.data.balances.contains(params.to_)): # @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    DUP 2;      # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    CAR;        # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    CAR;        # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    CAR;        # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    GET 3;      # big_map address (pair (map address nat) nat) : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    DUP 2;      # @parameter%transfer : big_map address (pair (map address nat) nat) : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    GET 3;      # address : big_map address (pair (map address nat) nat) : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    MEM;        # bool : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    IF
                      {}
                      {
                        SWAP;       # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @parameter%transfer
                        # self.data.balances[params.to_] = sp.record(approvals = {}, balance = 0) # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @parameter%transfer
                        UNPAIR;     # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                        UNPAIR;     # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                        UNPAIR;     # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                        UNPAIR;     # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                        SWAP;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                        UNPAIR;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                        PUSH (option (pair (map address nat) nat)) (Some (Pair {} 0)); # option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                        DUP 8;      # @parameter%transfer : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                        GET 3;      # address : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                        UPDATE;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                        PAIR;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                        SWAP;       # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                        PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                        PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                        PAIR;       # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                        PAIR;       # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @parameter%transfer
                        SWAP;       # @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                      }; # @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    # sp.verify(self.data.balances[params.from_].balance >= params.value, 'FA1.2_NotEnoughBalance') # @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    DUP;        # @parameter%transfer : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    GET 4;      # nat : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    DUP 3;      # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : nat : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    CAR;        # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    CAR;        # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : nat : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    CAR;        # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : nat : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    GET 3;      # big_map address (pair (map address nat) nat) : nat : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    DUP 3;      # @parameter%transfer : big_map address (pair (map address nat) nat) : nat : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    CAR;        # address : big_map address (pair (map address nat) nat) : nat : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    GET;        # option (pair (map address nat) nat) : nat : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    IF_NONE
                      {
                        PUSH int 59; # int : nat : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    CDR;        # nat : nat : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    COMPARE;    # int : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    GE;         # bool : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    IF
                      {}
                      {
                        PUSH string "FA1.2_NotEnoughBalance"; # string : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        FAILWITH;   # FAILED
                      }; # @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    # self.data.balances[params.from_].balance = sp.as_nat(self.data.balances[params.from_].balance - params.value) # @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    DUP;        # @parameter%transfer : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    GET 4;      # nat : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    DUP 3;      # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : nat : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    CAR;        # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    CAR;        # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : nat : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    CAR;        # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : nat : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    GET 3;      # big_map address (pair (map address nat) nat) : nat : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    DUP 3;      # @parameter%transfer : big_map address (pair (map address nat) nat) : nat : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    CAR;        # address : big_map address (pair (map address nat) nat) : nat : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    GET;        # option (pair (map address nat) nat) : nat : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    IF_NONE
                      {
                        PUSH int 62; # int : nat : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    CDR;        # nat : nat : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    SUB;        # int : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    ISNAT;      # option nat : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    IF_NONE
                      {
                        PUSH int 61; # int : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    DIG 2;      # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @some : @parameter%transfer
                    UNPAIR;     # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%transfer
                    UNPAIR;     # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%transfer
                    UNPAIR;     # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%transfer
                    UNPAIR;     # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%transfer
                    SWAP;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%transfer
                    UNPAIR;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%transfer
                    DUP;        # big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%transfer
                    DUP 9;      # @parameter%transfer : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%transfer
                    CAR;        # address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%transfer
                    DUP;        # address : address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%transfer
                    DUG 2;      # address : big_map address (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%transfer
                    GET;        # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%transfer
                    IF_NONE
                      {
                        PUSH int 61; # int : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%transfer
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @parameter%transfer
                    DIG 8;      # @some : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                    UPDATE 2;   # @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                    SOME;       # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                    SWAP;       # address : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                    UPDATE;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                    # self.data.balances[params.to_].balance += params.value # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                    DUP;        # big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                    DUP 8;      # @parameter%transfer : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                    GET 3;      # address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                    DUP;        # address : address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                    DUG 2;      # address : big_map address (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                    GET;        # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                    IF_NONE
                      {
                        PUSH int 63; # int : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                    DUP;        # @some : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                    CDR;        # nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                    DUP 10;     # @parameter%transfer : nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                    GET 4;      # nat : nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                    ADD;        # nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                    UPDATE 2;   # @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                    SOME;       # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                    SWAP;       # address : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                    UPDATE;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                    PAIR;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                    SWAP;       # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                    PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                    PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                    PAIR;       # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                    PAIR;       # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @parameter%transfer
                    SWAP;       # @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    # if params.from_ != sp.sender: # @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    SENDER;     # @sender : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    DUP 2;      # @parameter%transfer : @sender : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    CAR;        # address : @sender : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    COMPARE;    # int : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    NEQ;        # bool : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    IF
                      {
                        # self.data.balances[params.from_].approvals[sp.sender] = sp.as_nat(self.data.balances[params.from_].approvals[sp.sender] - params.value) # @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP 2;      # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        UNPAIR;     # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        UNPAIR;     # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        UNPAIR;     # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        UNPAIR;     # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        SWAP;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        UNPAIR;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP;        # big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP 8;      # @parameter%transfer : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        CAR;        # address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP;        # address : address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUG 2;      # address : big_map address (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GET;        # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        IF_NONE
                          {
                            PUSH int 66; # int : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP;        # @some : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        CAR;        # map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP 10;     # @parameter%transfer : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        GET 4;      # nat : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DIG 11;     # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : nat : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                        CAR;        # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                        CAR;        # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : nat : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                        CAR;        # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : nat : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                        GET 3;      # big_map address (pair (map address nat) nat) : nat : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer
                        DIG 11;     # @parameter%transfer : big_map address (pair (map address nat) nat) : nat : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                        CAR;        # address : big_map address (pair (map address nat) nat) : nat : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                        GET;        # option (pair (map address nat) nat) : nat : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                        IF_NONE
                          {
                            PUSH int 67; # int : nat : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                        CAR;        # map address nat : nat : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                        SENDER;     # @sender : map address nat : nat : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                        GET;        # option nat : nat : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                        IF_NONE
                          {
                            PUSH int 67; # int : nat : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                        SUB;        # int : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                        ISNAT;      # option nat : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                        IF_NONE
                          {
                            PUSH int 66; # int : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                        SOME;       # option nat : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                        SENDER;     # @sender : option nat : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                        UPDATE;     # map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                        UPDATE 1;   # @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                        SOME;       # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                        SWAP;       # address : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                        UPDATE;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                        PAIR;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                        SWAP;       # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                        PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                        PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                        PAIR;       # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                        PAIR;       # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                      }
                      {
                        DROP;       # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                      }; # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                  }; # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
              }
              {
                IF_LEFT
                  {
                    # == transfer_admin ==
                    # sp.verify(self.data.admin == sp.set_type_expr(sp.sender, sp.TAddress), 'ONLY_ADMIN') # @parameter%transfer_admin : @storage
                    SENDER;     # @sender : @parameter%transfer_admin : @storage
                    DUP 3;      # @storage : @sender : @parameter%transfer_admin : @storage
                    CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @sender : @parameter%transfer_admin : @storage
                    CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @sender : @parameter%transfer_admin : @storage
                    CAR;        # pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat)) : @sender : @parameter%transfer_admin : @storage
                    CAR;        # address : @sender : @parameter%transfer_admin : @storage
                    COMPARE;    # int : @parameter%transfer_admin : @storage
                    EQ;         # bool : @parameter%transfer_admin : @storage
                    IF
                      {}
                      {
                        PUSH string "ONLY_ADMIN"; # string : @parameter%transfer_admin : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%transfer_admin : @storage
                    SWAP;       # @storage : @parameter%transfer_admin
                    # self.data.proposed_admin = sp.some(params) # @storage : @parameter%transfer_admin
                    UNPAIR;     # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer_admin
                    UNPAIR;     # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer_admin
                    SWAP;       # pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer_admin
                    UNPAIR;     # pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)) : pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer_admin
                    SWAP;       # pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)) : pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer_admin
                    UNPAIR;     # map nat nat : pair (option %poolId (pair address nat)) (option %proposed_admin address) : pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer_admin
                    SWAP;       # pair (option %poolId (pair address nat)) (option %proposed_admin address) : map nat nat : pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer_admin
                    CAR;        # option (pair address nat) : map nat nat : pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @parameter%transfer_admin
                    DIG 5;      # @parameter%transfer_admin : option (pair address nat) : map nat nat : pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                    SOME;       # option address : option (pair address nat) : map nat nat : pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                    SWAP;       # option (pair address nat) : option address : map nat nat : pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                    PAIR;       # pair (option (pair address nat)) (option address) : map nat nat : pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                    SWAP;       # map nat nat : pair (option (pair address nat)) (option address) : pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                    PAIR;       # pair (map nat nat) (pair (option (pair address nat)) (option address)) : pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                    SWAP;       # pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : pair (map nat nat) (pair (option (pair address nat)) (option address)) : pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                    PAIR;       # pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))) : pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                    SWAP;       # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                    PAIR;       # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                    PAIR;       # pair (pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                  }
                  {
                    # == updateProtocolFeePercentageCache ==
                    # sp.verify(self.data.settings.paused == False, 'ONLY_UNPAUSED') # @parameter%updateProtocolFeePercentageCache : @storage
                    PUSH bool False; # bool : @parameter%updateProtocolFeePercentageCache : @storage
                    DUP 3;      # @storage : bool : @parameter%updateProtocolFeePercentageCache : @storage
                    GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : bool : @parameter%updateProtocolFeePercentageCache : @storage
                    GET 6;      # bool : bool : @parameter%updateProtocolFeePercentageCache : @storage
                    COMPARE;    # int : @parameter%updateProtocolFeePercentageCache : @storage
                    EQ;         # bool : @parameter%updateProtocolFeePercentageCache : @storage
                    IF
                      {}
                      {
                        PUSH string "ONLY_UNPAUSED"; # string : @parameter%updateProtocolFeePercentageCache : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%updateProtocolFeePercentageCache : @storage
                    # compute_WeightedPool_365 = sp.local("compute_WeightedPool_365", self.data.totalSupply) # @parameter%updateProtocolFeePercentageCache : @storage
                    DUP 2;      # @storage : @parameter%updateProtocolFeePercentageCache : @storage
                    GET 5;      # pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply)) : @parameter%updateProtocolFeePercentageCache : @storage
                    GET 4;      # nat : @parameter%updateProtocolFeePercentageCache : @storage
                    # compute_BaseWeightedPool_49 = sp.local("compute_BaseWeightedPool_49", sp.view("getPoolTokens", self.data.poolId.open_some(), self.data.vault, sp.TPair(sp.TMap(sp.TNat, sp.TPair(sp.TAddress, sp.TOption(sp.TNat))), sp.TMap(sp.TNat, sp.TNat))).open_some(message = 813)) # nat : @parameter%updateProtocolFeePercentageCache : @storage
                    DUP 3;      # @storage : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    GET 7;      # address : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    DUP 4;      # @storage : address : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : address : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    GET 7;      # option (pair address nat) : address : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    IF_NONE
                      {
                        PUSH int 49; # int : address : nat : @parameter%updateProtocolFeePercentageCache : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : address : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    VIEW "getPoolTokens" (pair (map nat (pair address (option nat))) (map nat nat)); # option (pair (map nat (pair address (option nat))) (map nat nat)) : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    IF_NONE
                      {
                        PUSH int 813; # int : nat : @parameter%updateProtocolFeePercentageCache : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    # compute_BaseWeightedPool_54 = sp.local("compute_BaseWeightedPool_54", self.data.scaling_helpers[0]((sp.snd(compute_BaseWeightedPool_49.value), self.data.scalingFactors, self.data.fixedPoint[20]))) # @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    DUP 4;      # @storage : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    GET 5;      # big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    PUSH int 0; # int : big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    GET;        # option (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    IF_NONE
                      {
                        PUSH int 54; # int : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    DUP 5;      # @storage : @some : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @some : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    GET 6;      # big_map nat (lambda (pair nat nat) nat) : @some : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    PUSH nat 20; # nat : big_map nat (lambda (pair nat nat) nat) : @some : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    GET;        # option (lambda (pair nat nat) nat) : @some : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    IF_NONE
                      {
                        PUSH int 55; # int : @some : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @some : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    DUP 6;      # @storage : @some : @some : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : @some : @some : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    GET 3;      # map nat nat : @some : @some : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    PAIR;       # pair (map nat nat) @some : @some : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    DUP 3;      # @some : pair (map nat nat) @some : @some : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    CDR;        # map nat nat : pair (map nat nat) @some : @some : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    PAIR;       # pair (map nat nat) (pair (map nat nat) @some) : @some : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    EXEC;       # map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    # compute_ExternalWeightedMath_93 = sp.local("compute_ExternalWeightedMath_93", sp.view("calculateInvariant", sp.record(balances = compute_BaseWeightedPool_54.value, normalizedWeights = self.data.normalizedWeights), self.data.weightedMathLib, sp.TNat).open_some(message = 802)) # map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    DUP 5;      # @storage : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    GET 9;      # address : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    DUP 6;      # @storage : address : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : address : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    GET 5;      # map nat nat : address : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    DUP 3;      # map nat nat : map nat nat : address : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    PAIR;       # pair (map nat nat) (map nat nat) : address : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    VIEW "calculateInvariant" nat; # option nat : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    IF_NONE
                      {
                        PUSH int 802; # int : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    # compute_WeightedPool_371 = sp.local("compute_WeightedPool_371", self.data.scalingFactors) # @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    DUP 6;      # @storage : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    GET 3;      # map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    # match_pair_WeightedPoolProtocolFees_55_fst, match_pair_WeightedPoolProtocolFees_55_snd = sp.match_tuple(self.data.feeCache, "match_pair_WeightedPoolProtocolFees_55_fst", "match_pair_WeightedPoolProtocolFees_55_snd") # map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    DUP 7;      # @storage : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    GET 5;      # pair nat nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    UNPAIR;     # nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    # compute_WeightedPoolProtocolFees_57 = sp.local("compute_WeightedPoolProtocolFees_57", self.data.entries) # nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    DUP 9;      # @storage : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    CAR;        # pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat)) : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    GET 4;      # big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    # compute_WeightedPoolProtocolFees_64 = sp.local("compute_WeightedPoolProtocolFees_64", self.data.rateProviders) # big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    DUP 10;     # @storage : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    CAR;        # pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    GET 3;      # option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    # compute_ExternalWeightedProtocolFees_48 = sp.local("compute_ExternalWeightedProtocolFees_48", sp.view("getPreJoinExitProtocolFees", sp.record(athRateProduct = compute_WeightedPoolProtocolFees_57.value[11], exemptFromYieldFees = self.data.exemptFromYieldFees, normalizedWeights = compute_WeightedPool_371.value, postJoinExitInvariant = compute_WeightedPoolProtocolFees_57.value[12], preJoinExitInvariant = compute_ExternalWeightedMath_93.value, preJoinExitSupply = compute_WeightedPool_365.value, rateProviders = compute_WeightedPoolProtocolFees_64.value, swapFee = match_pair_WeightedPoolProtocolFees_55_fst, yieldFee = match_pair_WeightedPoolProtocolFees_55_snd), self.data.weightedProtocolFeesLib, sp.TPair(sp.TNat, sp.TNat)).open_some(message = 807)) # option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    DUP 11;     # @storage : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    GET 10;     # address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    DUP 5;      # nat : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    DUP 5;      # nat : nat : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    PAIR;       # pair nat nat : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    DUP 3;      # option (map nat (option address)) : pair nat nat : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    PAIR;       # pair (option (map nat (option address))) (pair nat nat) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    DUP 11;     # nat : pair (option (map nat (option address))) (pair nat nat) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    DUP 9;      # @some : nat : pair (option (map nat (option address))) (pair nat nat) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    PAIR;       # pair @some nat : pair (option (map nat (option address))) (pair nat nat) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    PAIR;       # pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    DUP 4;      # big_map int nat : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    PUSH int 12; # int : big_map int nat : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    GET;        # option nat : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    IF_NONE
                      {
                        PUSH int 62; # int : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    DUP 8;      # map nat nat : @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    PAIR;       # pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    DUP 14;     # @storage : pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    GET 3;      # bool : pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    DUP 6;      # big_map int nat : bool : pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    PUSH int 11; # int : big_map int nat : bool : pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    GET;        # option nat : bool : pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    IF_NONE
                      {
                        PUSH int 65; # int : bool : pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : bool : pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    PAIR;       # pair @some bool : pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    PAIR;       # pair (pair @some bool) (pair (map nat nat) @some) : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    PAIR;       # pair (pair (pair @some bool) (pair (map nat nat) @some)) (pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat))) : address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    VIEW "getPreJoinExitProtocolFees" (pair nat nat); # option (pair nat nat) : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    IF_NONE
                      {
                        PUSH int 807; # int : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    # if sp.fst(compute_ExternalWeightedProtocolFees_48.value) > 0: # @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    PUSH nat 0; # nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    DUP 2;      # @some : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    CAR;        # nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    COMPARE;    # int : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    GT;         # bool : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                    IF
                      {
                        # if ~ (self.data.balances.contains(self.data.protocolFeesCollector)): # @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                        DUP 12;     # @storage : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                        CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                        CAR;        # pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat)) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                        GET 3;      # big_map address (pair (map %approvals address nat) (nat %balance)) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                        DUP 13;     # @storage : big_map address (pair (map %approvals address nat) (nat %balance)) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                        GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : big_map address (pair (map %approvals address nat) (nat %balance)) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                        CAR;        # pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode)) : big_map address (pair (map %approvals address nat) (nat %balance)) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                        CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                        MEM;        # bool : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                        IF
                          {}
                          {
                            # self.data.balances[self.data.protocolFeesCollector] = sp.record(approvals = {}, balance = 0) # @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                            DUP 12;     # @storage : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                            UNPAIR;     # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                            UNPAIR;     # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                            UNPAIR;     # pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                            UNPAIR;     # address : pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                            SWAP;       # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                            UNPAIR;     # big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                            PUSH (option (pair (map address nat) nat)) (Some (Pair {} 0)); # option (pair (map address nat) nat) : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : @storage
                            DIG 18;     # @storage : option (pair (map address nat) nat) : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                            GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : option (pair (map address nat) nat) : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                            CAR;        # pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode)) : option (pair (map address nat) nat) : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                            CAR;        # address : option (pair (map address nat) nat) : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                            UPDATE;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                            PAIR;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                            SWAP;       # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                            PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                            PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                            PAIR;       # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                            PAIR;       # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                            DUG 11;     # @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                          }; # @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        # self.data.balances[self.data.protocolFeesCollector].balance += sp.fst(compute_ExternalWeightedProtocolFees_48.value) # @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP 12;     # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        UNPAIR;     # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        UNPAIR;     # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        UNPAIR;     # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        UNPAIR;     # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        SWAP;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        UNPAIR;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DUP;        # big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DIG 18;     # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        CAR;        # pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode)) : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        CAR;        # address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        DUP;        # address : address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        DUG 2;      # address : big_map address (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        GET;        # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        IF_NONE
                          {
                            PUSH int 123; # int : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        DUP;        # @some : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        CDR;        # nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        DUP 10;     # @some : nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        CAR;        # nat : nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        ADD;        # nat : @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        UPDATE 2;   # @some : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        SOME;       # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        SWAP;       # address : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        UPDATE;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        PAIR;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        SWAP;       # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        PAIR;       # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        SWAP;       # pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        # self.data.totalSupply += sp.fst(compute_ExternalWeightedProtocolFees_48.value) # pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        UNPAIR;     # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        SWAP;       # pair (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        UNPAIR;     # pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        UNPAIR;     # big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (map %tokens nat (pair address (option nat))) (nat %totalSupply) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        SWAP;       # pair (map %tokens nat (pair address (option nat))) (nat %totalSupply) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        UNPAIR;     # map nat (pair address (option nat)) : nat : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        SWAP;       # nat : map nat (pair address (option nat)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        DUP 7;      # @some : nat : map nat (pair address (option nat)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        CAR;        # nat : nat : map nat (pair address (option nat)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        ADD;        # nat : map nat (pair address (option nat)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        SWAP;       # map nat (pair address (option nat)) : nat : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        PAIR;       # pair (map nat (pair address (option nat))) nat : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        SWAP;       # big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (map nat (pair address (option nat))) nat : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        PAIR;       # pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat) : pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        PAIR;       # pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        SWAP;       # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        PAIR;       # pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        SWAP;       # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        PAIR;       # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                        DUG 11;     # @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                      }
                      {}; # @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    # self.data.entries[12] = compute_ExternalWeightedMath_93.value # @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    DIG 11;     # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                    UNPAIR;     # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                    UNPAIR;     # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                    UNPAIR;     # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                    UNPAIR;     # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                    SWAP;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                    UNPAIR;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                    SWAP;       # big_map int nat : big_map address (pair (map address nat) nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                    DUP 13;     # @some : big_map int nat : big_map address (pair (map address nat) nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                    SOME;       # option nat : big_map int nat : big_map address (pair (map address nat) nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                    PUSH int 12; # int : option nat : big_map int nat : big_map address (pair (map address nat) nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                    UPDATE;     # big_map int nat : big_map address (pair (map address nat) nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                    SWAP;       # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                    PAIR;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                    SWAP;       # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                    PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                    PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                    PAIR;       # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                    PAIR;       # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache
                    DUG 11;     # @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    # if self.data.entries[11] > 0: # @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    PUSH nat 0; # nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    DUP 13;     # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    CAR;        # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    CAR;        # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    CAR;        # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    GET 4;      # big_map int nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    PUSH int 11; # int : big_map int nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    GET;        # option nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    IF_NONE
                      {
                        PUSH int 380; # int : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    COMPARE;    # int : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    GT;         # bool : @some : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    IF
                      {
                        SWAP;       # option (map nat (option address)) : @some : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DROP;       # @some : big_map int nat : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        SWAP;       # big_map int nat : @some : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DROP;       # @some : nat : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        SWAP;       # nat : @some : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DROP;       # @some : nat : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        SWAP;       # nat : @some : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DROP;       # @some : map nat nat : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        SWAP;       # map nat nat : @some : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DROP;       # @some : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        SWAP;       # @some : @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DROP;       # @some : map nat nat : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        SWAP;       # map nat nat : @some : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DROP;       # @some : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        SWAP;       # @some : @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DROP;       # @some : nat : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        SWAP;       # nat : @some : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DROP;       # @some : @parameter%updateProtocolFeePercentageCache : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        SWAP;       # @parameter%updateProtocolFeePercentageCache : @some : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        DROP;       # @some : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        SWAP;       # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @some
                        # self.data.entries[11] = sp.snd(compute_ExternalWeightedProtocolFees_48.value) # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @some
                        UNPAIR;     # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some
                        UNPAIR;     # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some
                        UNPAIR;     # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some
                        UNPAIR;     # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some
                        SWAP;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some
                        UNPAIR;     # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some
                        SWAP;       # big_map int nat : big_map address (pair (map address nat) nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some
                        DIG 6;      # @some : big_map int nat : big_map address (pair (map address nat) nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                        CDR;        # nat : big_map int nat : big_map address (pair (map address nat) nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                        SOME;       # option nat : big_map int nat : big_map address (pair (map address nat) nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                        PUSH int 11; # int : option nat : big_map int nat : big_map address (pair (map address nat) nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                        UPDATE;     # big_map int nat : big_map address (pair (map address nat) nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                        SWAP;       # big_map address (pair (map address nat) nat) : big_map int nat : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                        PAIR;       # pair (big_map address (pair (map address nat) nat)) (big_map int nat) : address : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                        SWAP;       # address : pair (big_map address (pair (map address nat) nat)) (big_map int nat) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                        PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                        PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                        PAIR;       # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                        PAIR;       # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                      }
                      {
                        DROP 11;    # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                      }; # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    # compute_ProtocolFeesCollector_23 = sp.local("compute_ProtocolFeesCollector_23", sp.view("getSwapFeePercentage", sp.unit, self.data.protocolFeesCollector, sp.TNat).open_some(message = 816)) # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    DUP;        # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    CAR;        # pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode)) : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    CAR;        # address : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    UNIT;       # unit : address : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    VIEW "getSwapFeePercentage" nat; # option nat : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    IF_NONE
                      {
                        PUSH int 816; # int : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    # compute_ProtocolFeesCollector_26 = sp.local("compute_ProtocolFeesCollector_26", sp.view("getYieldFeePercentage", sp.unit, self.data.protocolFeesCollector, sp.TNat).open_some(message = 817)) # @some : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    DUP 2;      # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @some : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : @some : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    CAR;        # pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode)) : @some : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    CAR;        # address : @some : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    UNIT;       # unit : address : @some : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    VIEW "getYieldFeePercentage" nat; # option nat : @some : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    IF_NONE
                      {
                        PUSH int 817; # int : @some : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @some : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    # self.data.feeCache = (compute_ProtocolFeesCollector_23.value, compute_ProtocolFeesCollector_26.value) # @some : @some : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                    DIG 2;      # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))) : @some : @some
                    UNPAIR;     # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @some
                    UNPAIR;     # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @some
                    UNPAIR;     # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @some
                    SWAP;       # pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))) : pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @some
                    UNPAIR;     # bool : pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)) : pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @some
                    SWAP;       # pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)) : bool : pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @some
                    CDR;        # big_map nat (lambda (pair nat nat) nat) : bool : pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some : @some
                    DIG 5;      # @some : big_map nat (lambda (pair nat nat) nat) : bool : pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))) : @some
                    DIG 6;      # @some : @some : big_map nat (lambda (pair nat nat) nat) : bool : pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                    PAIR;       # pair @some @some : big_map nat (lambda (pair nat nat) nat) : bool : pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                    PAIR;       # pair (pair @some @some) (big_map nat (lambda (pair nat nat) nat)) : bool : pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                    SWAP;       # bool : pair (pair @some @some) (big_map nat (lambda (pair nat nat) nat)) : pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                    PAIR;       # pair bool (pair (pair @some @some) (big_map nat (lambda (pair nat nat) nat))) : pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                    SWAP;       # pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat)) : pair bool (pair (pair @some @some) (big_map nat (lambda (pair nat nat) nat))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                    PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair @some @some) (big_map nat (lambda (pair nat nat) nat)))) : pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                    PAIR;       # pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair @some @some) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))
                    PAIR;       # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair @some @some) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
                  }; # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings)))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
              }; # pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
            NIL operation; # list operation : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
          }; # list operation : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
      }; # list operation : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
    NIL operation; # list operation : list operation : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
    SWAP;       # list operation : list operation : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
    ITER
      {
        CONS;       # list operation : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
      }; # list operation : pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib)))))
    PAIR;       # pair (list operation) (pair (pair (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map int nat))) (pair bool (pair (pair nat nat) (big_map nat (lambda (pair nat nat) nat))))) (pair (pair (lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair bool (big_map string bytes))) (pair (map nat nat) (pair (option (pair address nat)) (option address))))) (pair (pair (pair address (pair (option (map nat (option address))) bool)) (pair (map nat nat) (pair (big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) bool))) (pair (pair (big_map nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map nat (pair address (option nat))) nat)) (pair (address %vault) (pair (address %weightedMathLib) (address %weightedProtocolFeesLib))))))
  };
view
  "beforeExitPool" (pair (map %balances nat nat) (pair %userData (pair (option %amountsOut (map nat nat)) (pair (nat %kind) (option %maxSPTAmountIn nat))) (pair (bool %recoveryModeExit) (pair (option %sptAmountIn nat) (option %tokenIndex nat))))) (pair nat (pair (map nat nat) nat))
  {
    UNPAIR;     # @parameter : @storage
    # sp.verify(self.data.settings.paused == False, 'ONLY_UNPAUSED') # @parameter : @storage
    PUSH bool False; # bool : @parameter : @storage
    DUP 3;      # @storage : bool : @parameter : @storage
    GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : bool : @parameter : @storage
    GET 6;      # bool : bool : @parameter : @storage
    COMPARE;    # int : @parameter : @storage
    EQ;         # bool : @parameter : @storage
    IF
      {}
      {
        PUSH string "ONLY_UNPAUSED"; # string : @parameter : @storage
        FAILWITH;   # FAILED
      }; # @parameter : @storage
    # result = sp.local("result", (0, {}, 0)) # @parameter : @storage
    PUSH (pair nat (pair (map nat nat) nat)) (Pair 0 (Pair {} 0)); # pair nat (pair (map nat nat) nat) : @parameter : @storage
    # if params.userData.recoveryModeExit: # pair nat (pair (map nat nat) nat) : @parameter : @storage
    DUP 2;      # @parameter : pair nat (pair (map nat nat) nat) : @parameter : @storage
    GET 5;      # bool : pair nat (pair (map nat nat) nat) : @parameter : @storage
    IF
      {
        # sp.verify(self.data.recoveryMode == True, 438) # pair nat (pair (map nat nat) nat) : @parameter : @storage
        PUSH bool True; # bool : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 4;      # @storage : bool : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : bool : pair nat (pair (map nat nat) nat) : @parameter : @storage
        CAR;        # pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode)) : bool : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 4;      # bool : bool : pair nat (pair (map nat nat) nat) : @parameter : @storage
        COMPARE;    # int : pair nat (pair (map nat nat) nat) : @parameter : @storage
        EQ;         # bool : pair nat (pair (map nat nat) nat) : @parameter : @storage
        IF
          {}
          {
            PUSH int 438; # int : pair nat (pair (map nat nat) nat) : @parameter : @storage
            FAILWITH;   # FAILED
          }; # pair nat (pair (map nat nat) nat) : @parameter : @storage
        # compute_BasePoolMath_54 = sp.local("compute_BasePoolMath_54", {}, sp.TMap(sp.TNat, sp.TNat)) # pair nat (pair (map nat nat) nat) : @parameter : @storage
        EMPTY_MAP nat nat; # map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        # for i in sp.range(0, sp.len(params.balances)): ... (sp.TNat) # map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 3;      # @parameter : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        CAR;        # map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        SIZE;       # nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        PUSH nat 0; # nat : nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP;        # nat : nat : nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 3;      # nat : nat : nat : nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        COMPARE;    # int : nat : nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GT;         # bool : nat : nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        LOOP
          {
            # compute_BasePoolMath_54.value[i] = self.data.fixedPoint[20]((params.balances[i], self.data.fixedPoint[22]((params.userData.sptAmountIn.open_some(), self.data.totalSupply)))) # nat : nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DIG 2;      # map nat nat : nat : nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 6;      # @storage : map nat nat : nat : nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : map nat nat : nat : nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : map nat nat : nat : nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET 6;      # big_map nat (lambda (pair nat nat) nat) : map nat nat : nat : nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            PUSH nat 20; # nat : big_map nat (lambda (pair nat nat) nat) : map nat nat : nat : nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET;        # option (lambda (pair nat nat) nat) : map nat nat : nat : nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            IF_NONE
              {
                PUSH int 56; # int : map nat nat : nat : nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : map nat nat : nat : nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 7;      # @storage : @some : map nat nat : nat : nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : map nat nat : nat : nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @some : map nat nat : nat : nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET 6;      # big_map nat (lambda (pair nat nat) nat) : @some : map nat nat : nat : nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            PUSH nat 22; # nat : big_map nat (lambda (pair nat nat) nat) : @some : map nat nat : nat : nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET;        # option (lambda (pair nat nat) nat) : @some : map nat nat : nat : nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            IF_NONE
              {
                PUSH int 52; # int : @some : map nat nat : nat : nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : @some : map nat nat : nat : nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 8;      # @storage : @some : @some : map nat nat : nat : nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET 5;      # pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply)) : @some : @some : map nat nat : nat : nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET 4;      # nat : @some : @some : map nat nat : nat : nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 8;      # @parameter : nat : @some : @some : map nat nat : nat : nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET 7;      # option nat : nat : @some : @some : map nat nat : nat : nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            IF_NONE
              {
                PUSH int 498; # int : nat : @some : @some : map nat nat : nat : nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : nat : @some : @some : map nat nat : nat : nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            PAIR;       # pair @some nat : @some : @some : map nat nat : nat : nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            EXEC;       # nat : @some : map nat nat : nat : nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 7;      # @parameter : nat : @some : map nat nat : nat : nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            CAR;        # map nat nat : nat : @some : map nat nat : nat : nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 5;      # nat : map nat nat : nat : @some : map nat nat : nat : nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET;        # option nat : nat : @some : map nat nat : nat : nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            IF_NONE
              {
                PUSH int 56; # int : nat : @some : map nat nat : nat : nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : nat : @some : map nat nat : nat : nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            PAIR;       # pair @some nat : @some : map nat nat : nat : nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            EXEC;       # nat : map nat nat : nat : nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            SOME;       # option nat : map nat nat : nat : nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 3;      # nat : option nat : map nat nat : nat : nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            UPDATE;     # map nat nat : nat : nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUG 2;      # nat : nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            # loop step # nat : nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            PUSH nat 1; # nat : nat : nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            ADD;        # nat : nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP;        # nat : nat : nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 3;      # nat : nat : nat : nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            COMPARE;    # int : nat : nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GT;         # bool : nat : nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
          }; # nat : nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DROP 2;     # map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        SWAP;       # pair nat (pair (map nat nat) nat) : map nat nat : @parameter : @storage
        DROP;       # map nat nat : @parameter : @storage
        DIG 2;      # @storage : map nat nat : @parameter
        DROP;       # map nat nat : @parameter
        # result.value = (params.userData.sptAmountIn.open_some(), compute_BasePoolMath_54.value, 0) # map nat nat : @parameter
        PUSH nat 0; # nat : map nat nat : @parameter
        SWAP;       # map nat nat : nat : @parameter
        PAIR;       # pair (map nat nat) nat : @parameter
        SWAP;       # @parameter : pair (map nat nat) nat
        GET 7;      # option nat : pair (map nat nat) nat
        IF_NONE
          {
            PUSH int 498; # int : pair (map nat nat) nat
            FAILWITH;   # FAILED
          }
          {}; # @some : pair (map nat nat) nat
        PAIR;       # pair @some (pair (map nat nat) nat)
      }
      {
        # compute_BasePool_446 = sp.local("compute_BasePool_446", self.data.scaling_helpers[0]((params.balances, self.data.scalingFactors, self.data.fixedPoint[20]))) # pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 3;      # @storage : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 5;      # big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : pair nat (pair (map nat nat) nat) : @parameter : @storage
        PUSH int 0; # int : big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET;        # option (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : pair nat (pair (map nat nat) nat) : @parameter : @storage
        IF_NONE
          {
            PUSH int 446; # int : pair nat (pair (map nat nat) nat) : @parameter : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 4;      # @storage : @some : pair nat (pair (map nat nat) nat) : @parameter : @storage
        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : pair nat (pair (map nat nat) nat) : @parameter : @storage
        CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @some : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 6;      # big_map nat (lambda (pair nat nat) nat) : @some : pair nat (pair (map nat nat) nat) : @parameter : @storage
        PUSH nat 20; # nat : big_map nat (lambda (pair nat nat) nat) : @some : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET;        # option (lambda (pair nat nat) nat) : @some : pair nat (pair (map nat nat) nat) : @parameter : @storage
        IF_NONE
          {
            PUSH int 447; # int : @some : pair nat (pair (map nat nat) nat) : @parameter : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : @some : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 5;      # @storage : @some : @some : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : @some : @some : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 3;      # map nat nat : @some : @some : pair nat (pair (map nat nat) nat) : @parameter : @storage
        PAIR;       # pair (map nat nat) @some : @some : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 4;      # @parameter : pair (map nat nat) @some : @some : pair nat (pair (map nat nat) nat) : @parameter : @storage
        CAR;        # map nat nat : pair (map nat nat) @some : @some : pair nat (pair (map nat nat) nat) : @parameter : @storage
        PAIR;       # pair (map nat nat) (pair (map nat nat) @some) : @some : pair nat (pair (map nat nat) nat) : @parameter : @storage
        EXEC;       # map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        # compute_ExternalWeightedMath_93 = sp.local("compute_ExternalWeightedMath_93", sp.view("calculateInvariant", sp.record(balances = compute_BasePool_446.value, normalizedWeights = self.data.normalizedWeights), self.data.weightedMathLib, sp.TNat).open_some(message = 802)) # map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 4;      # @storage : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 9;      # address : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 5;      # @storage : address : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : address : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 5;      # map nat nat : address : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 3;      # map nat nat : map nat nat : address : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        PAIR;       # pair (map nat nat) (map nat nat) : address : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        VIEW "calculateInvariant" nat; # option nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        IF_NONE
          {
            PUSH int 802; # int : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        # match_pair_WeightedPoolProtocolFees_55_fst, match_pair_WeightedPoolProtocolFees_55_snd = sp.match_tuple(self.data.feeCache, "match_pair_WeightedPoolProtocolFees_55_fst", "match_pair_WeightedPoolProtocolFees_55_snd") # @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 5;      # @storage : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 5;      # pair nat nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        UNPAIR;     # nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        # compute_WeightedPoolProtocolFees_57 = sp.local("compute_WeightedPoolProtocolFees_57", self.data.entries) # nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 7;      # @storage : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        CAR;        # pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat)) : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 4;      # big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        # compute_WeightedPoolProtocolFees_64 = sp.local("compute_WeightedPoolProtocolFees_64", self.data.rateProviders) # big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 8;      # @storage : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        CAR;        # pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 3;      # option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        # compute_ExternalWeightedProtocolFees_48 = sp.local("compute_ExternalWeightedProtocolFees_48", sp.view("getPreJoinExitProtocolFees", sp.record(athRateProduct = compute_WeightedPoolProtocolFees_57.value[11], exemptFromYieldFees = self.data.exemptFromYieldFees, normalizedWeights = self.data.normalizedWeights, postJoinExitInvariant = compute_WeightedPoolProtocolFees_57.value[12], preJoinExitInvariant = compute_ExternalWeightedMath_93.value, preJoinExitSupply = self.data.totalSupply, rateProviders = compute_WeightedPoolProtocolFees_64.value, swapFee = match_pair_WeightedPoolProtocolFees_55_fst, yieldFee = match_pair_WeightedPoolProtocolFees_55_snd), self.data.weightedProtocolFeesLib, sp.TPair(sp.TNat, sp.TNat)).open_some(message = 807)) # option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 9;      # @storage : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 10;     # address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 5;      # nat : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 5;      # nat : nat : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        PAIR;       # pair nat nat : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 3;      # option (map nat (option address)) : pair nat nat : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        PAIR;       # pair (option (map nat (option address))) (pair nat nat) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 11;     # @storage : pair (option (map nat (option address))) (pair nat nat) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 5;      # pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply)) : pair (option (map nat (option address))) (pair nat nat) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 4;      # nat : pair (option (map nat (option address))) (pair nat nat) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 8;      # @some : nat : pair (option (map nat (option address))) (pair nat nat) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        PAIR;       # pair @some nat : pair (option (map nat (option address))) (pair nat nat) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        PAIR;       # pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 4;      # big_map int nat : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        PUSH int 12; # int : big_map int nat : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET;        # option nat : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        IF_NONE
          {
            PUSH int 62; # int : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 12;     # @storage : @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 5;      # map nat nat : @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        PAIR;       # pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 12;     # @storage : pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 3;      # bool : pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 6;      # big_map int nat : bool : pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        PUSH int 11; # int : big_map int nat : bool : pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET;        # option nat : bool : pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        IF_NONE
          {
            PUSH int 65; # int : bool : pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : bool : pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        PAIR;       # pair @some bool : pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        PAIR;       # pair (pair @some bool) (pair (map nat nat) @some) : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        PAIR;       # pair (pair (pair @some bool) (pair (map nat nat) @some)) (pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat))) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        VIEW "getPreJoinExitProtocolFees" (pair nat nat); # option (pair nat nat) : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        IF_NONE
          {
            PUSH int 807; # int : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        # match_pair_WeightedPool_283_fst, match_pair_WeightedPool_283_snd = sp.match_tuple((sp.fst(compute_ExternalWeightedProtocolFees_48.value), sp.snd(compute_ExternalWeightedProtocolFees_48.value)), "match_pair_WeightedPool_283_fst", "match_pair_WeightedPool_283_snd") # @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP;        # @some : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        CDR;        # nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 2;      # @some : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        CAR;        # nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        # doExit = sp.local("doExit", (0, {})) # nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        PUSH (pair nat (map nat nat)) (Pair 0 {}); # pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        # if params.userData.kind == 4: # pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        PUSH nat 4; # nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 13;     # @parameter : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 3;      # pair (option %amountsOut (map nat nat)) (pair (nat %kind) (option %maxSPTAmountIn nat)) : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 3;      # nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        COMPARE;    # int : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        EQ;         # bool : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        IF
          {
            # sp.verify(params.userData.tokenIndex.open_some() < sp.len(compute_BasePool_446.value), 100) # pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 10;     # map nat nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            SIZE;       # nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 13;     # @parameter : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET 8;      # option nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            IF_NONE
              {
                PUSH int 426; # int : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            COMPARE;    # int : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            LT;         # bool : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            IF
              {}
              {
                PUSH int 100; # int : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                FAILWITH;   # FAILED
              }; # pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            # compute_ExternalWeightedMath_137 = sp.local("compute_ExternalWeightedMath_137", sp.view("calcTokenOutGivenExactSptIn", sp.record(balance = compute_BasePool_446.value[params.userData.tokenIndex.open_some()], normalizedWeight = self.data.normalizedWeights[params.userData.tokenIndex.open_some()], sptAmountIn = params.userData.sptAmountIn.open_some(), sptTotalSupply = self.data.totalSupply + match_pair_WeightedPool_283_fst, swapFeePercentage = self.data.entries[13]), self.data.weightedMathLib, sp.TNat).open_some(message = 806)) # pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 13;     # @storage : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET 9;      # address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 14;     # @storage : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            CAR;        # pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat)) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET 4;      # big_map int nat : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            PUSH int 13; # int : big_map int nat : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET;        # option nat : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            IF_NONE
              {
                PUSH int 439; # int : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 4;      # nat : @some : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 16;     # @storage : nat : @some : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET 5;      # pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply)) : nat : @some : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET 4;      # nat : nat : @some : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            ADD;        # nat : @some : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            PAIR;       # pair nat @some : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 14;     # @parameter : pair nat @some : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET 7;      # option nat : pair nat @some : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            IF_NONE
              {
                PUSH int 498; # int : pair nat @some : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : pair nat @some : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            PAIR;       # pair @some (pair nat @some) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 15;     # @storage : pair @some (pair nat @some) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair @some (pair nat @some) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET 5;      # map nat nat : pair @some (pair nat @some) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 15;     # @parameter : map nat nat : pair @some (pair nat @some) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET 8;      # option nat : map nat nat : pair @some (pair nat @some) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            IF_NONE
              {
                PUSH int 426; # int : map nat nat : pair @some (pair nat @some) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : map nat nat : pair @some (pair nat @some) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET;        # option nat : pair @some (pair nat @some) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            IF_NONE
              {
                PUSH int 436; # int : pair @some (pair nat @some) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : pair @some (pair nat @some) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 13;     # map nat nat : @some : pair @some (pair nat @some) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 16;     # @parameter : map nat nat : @some : pair @some (pair nat @some) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET 8;      # option nat : map nat nat : @some : pair @some (pair nat @some) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            IF_NONE
              {
                PUSH int 426; # int : map nat nat : @some : pair @some (pair nat @some) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : map nat nat : @some : pair @some (pair nat @some) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET;        # option nat : @some : pair @some (pair nat @some) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            IF_NONE
              {
                PUSH int 435; # int : @some : pair @some (pair nat @some) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : @some : pair @some (pair nat @some) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            PAIR;       # pair @some @some : pair @some (pair nat @some) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            PAIR;       # pair (pair @some @some) (pair @some (pair nat @some)) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            VIEW "calcTokenOutGivenExactSptIn" nat; # option nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            IF_NONE
              {
                PUSH int 806; # int : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            # compute_BaseWeightedPool_445 = sp.local("compute_BaseWeightedPool_445", {}, sp.TMap(sp.TNat, sp.TNat)) # @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            EMPTY_MAP nat nat; # map nat nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            # for x in sp.range(0, sp.len(compute_BasePool_446.value)): ... (sp.TNat) # map nat nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 12;     # map nat nat : map nat nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            SIZE;       # nat : map nat nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            PUSH nat 0; # nat : nat : map nat nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP;        # nat : nat : nat : map nat nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 3;      # nat : nat : nat : nat : map nat nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            COMPARE;    # int : nat : nat : map nat nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GT;         # bool : nat : nat : map nat nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            LOOP
              {
                # compute_BaseWeightedPool_445.value[x] = 0 # nat : nat : map nat nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                DIG 2;      # map nat nat : nat : nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                PUSH (option nat) (Some 0); # option nat : map nat nat : nat : nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                DUP 3;      # nat : option nat : map nat nat : nat : nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                UPDATE;     # map nat nat : nat : nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                DUG 2;      # nat : nat : map nat nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                # loop step # nat : nat : map nat nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                PUSH nat 1; # nat : nat : nat : map nat nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                ADD;        # nat : nat : map nat nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                DUP;        # nat : nat : nat : map nat nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                DUP 3;      # nat : nat : nat : nat : map nat nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                COMPARE;    # int : nat : nat : map nat nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                GT;         # bool : nat : nat : map nat nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
              }; # nat : nat : map nat nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DROP 2;     # map nat nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DIG 2;      # pair nat (map nat nat) : map nat nat : @some : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DROP;       # map nat nat : @some : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            SWAP;       # @some : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            # compute_BaseWeightedPool_445.value[params.userData.tokenIndex.open_some()] = compute_ExternalWeightedMath_137.value # @some : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            SOME;       # option nat : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 13;     # @parameter : option nat : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET 8;      # option nat : option nat : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            IF_NONE
              {
                PUSH int 426; # int : option nat : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : option nat : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            UPDATE;     # map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            # doExit.value = (params.userData.sptAmountIn.open_some(), compute_BaseWeightedPool_445.value) # map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 12;     # @parameter : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET 7;      # option nat : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            IF_NONE
              {
                PUSH int 498; # int : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            PAIR;       # pair @some (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
          }
          {}; # pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        # if params.userData.kind == 5: # pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        PUSH nat 5; # nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 13;     # @parameter : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 3;      # pair (option %amountsOut (map nat nat)) (pair (nat %kind) (option %maxSPTAmountIn nat)) : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 3;      # nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        COMPARE;    # int : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        EQ;         # bool : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        IF
          {
            # compute_BasePoolMath_54 = sp.local("compute_BasePoolMath_54", {}, sp.TMap(sp.TNat, sp.TNat)) # pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            EMPTY_MAP nat nat; # map nat nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            # for i in sp.range(0, sp.len(compute_BasePool_446.value)): ... (sp.TNat) # map nat nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 11;     # map nat nat : map nat nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            SIZE;       # nat : map nat nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            PUSH nat 0; # nat : nat : map nat nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP;        # nat : nat : nat : map nat nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 3;      # nat : nat : nat : nat : map nat nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            COMPARE;    # int : nat : nat : map nat nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GT;         # bool : nat : nat : map nat nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            LOOP
              {
                # compute_BasePoolMath_54.value[i] = self.data.fixedPoint[20]((compute_BasePool_446.value[i], self.data.fixedPoint[22]((params.userData.sptAmountIn.open_some(), self.data.totalSupply + match_pair_WeightedPool_283_fst)))) # nat : nat : map nat nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                DIG 2;      # map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                DUP 16;     # @storage : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                GET 6;      # big_map nat (lambda (pair nat nat) nat) : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                PUSH nat 20; # nat : big_map nat (lambda (pair nat nat) nat) : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                GET;        # option (lambda (pair nat nat) nat) : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                IF_NONE
                  {
                    PUSH int 56; # int : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                DUP 17;     # @storage : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                GET 6;      # big_map nat (lambda (pair nat nat) nat) : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                PUSH nat 22; # nat : big_map nat (lambda (pair nat nat) nat) : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                GET;        # option (lambda (pair nat nat) nat) : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                IF_NONE
                  {
                    PUSH int 52; # int : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                DUP 7;      # nat : @some : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                DUP 19;     # @storage : nat : @some : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                GET 5;      # pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply)) : nat : @some : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                GET 4;      # nat : nat : @some : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                ADD;        # nat : @some : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                DUP 18;     # @parameter : nat : @some : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                GET 7;      # option nat : nat : @some : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                IF_NONE
                  {
                    PUSH int 498; # int : nat : @some : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : nat : @some : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                PAIR;       # pair @some nat : @some : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                EXEC;       # nat : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                DUP 15;     # map nat nat : nat : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                DUP 5;      # nat : map nat nat : nat : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                GET;        # option nat : nat : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                IF_NONE
                  {
                    PUSH int 56; # int : nat : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : nat : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                PAIR;       # pair @some nat : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                EXEC;       # nat : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                SOME;       # option nat : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                DUP 3;      # nat : option nat : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                UPDATE;     # map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                DUG 2;      # nat : nat : map nat nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                # loop step # nat : nat : map nat nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                PUSH nat 1; # nat : nat : nat : map nat nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                ADD;        # nat : nat : map nat nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                DUP;        # nat : nat : nat : map nat nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                DUP 3;      # nat : nat : nat : nat : map nat nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                COMPARE;    # int : nat : nat : map nat nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                GT;         # bool : nat : nat : map nat nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
              }; # nat : nat : map nat nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DROP 2;     # map nat nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            SWAP;       # pair nat (map nat nat) : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DROP;       # map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            # doExit.value = (params.userData.sptAmountIn.open_some(), compute_BasePoolMath_54.value) # map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 12;     # @parameter : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET 7;      # option nat : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            IF_NONE
              {
                PUSH int 498; # int : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            PAIR;       # pair @some (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
          }
          {}; # pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        # if params.userData.kind == 6: # pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        PUSH nat 6; # nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 13;     # @parameter : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 3;      # pair (option %amountsOut (map nat nat)) (pair (nat %kind) (option %maxSPTAmountIn nat)) : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 3;      # nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        COMPARE;    # int : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        EQ;         # bool : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        IF
          {
            DROP;       # nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            SWAP;       # nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DROP;       # nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            SWAP;       # @some : nat : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DROP;       # nat : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            SWAP;       # option (map nat (option address)) : nat : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DROP;       # nat : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            SWAP;       # big_map int nat : nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DROP;       # nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            SWAP;       # nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DROP;       # nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            SWAP;       # nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DROP;       # nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DIG 3;      # pair nat (pair (map nat nat) nat) : nat : @some : map nat nat : @parameter : @storage
            DROP;       # nat : @some : map nat nat : @parameter : @storage
            # sp.verify(sp.len(compute_BasePool_446.value) == sp.len(params.userData.amountsOut.open_some())) # nat : @some : map nat nat : @parameter : @storage
            DUP 4;      # @parameter : nat : @some : map nat nat : @parameter : @storage
            GET 3;      # pair (option %amountsOut (map nat nat)) (pair (nat %kind) (option %maxSPTAmountIn nat)) : nat : @some : map nat nat : @parameter : @storage
            CAR;        # option (map nat nat) : nat : @some : map nat nat : @parameter : @storage
            IF_NONE
              {
                PUSH int 468; # int : nat : @some : map nat nat : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : nat : @some : map nat nat : @parameter : @storage
            SIZE;       # nat : nat : @some : map nat nat : @parameter : @storage
            DUP 4;      # map nat nat : nat : nat : @some : map nat nat : @parameter : @storage
            SIZE;       # nat : nat : nat : @some : map nat nat : @parameter : @storage
            COMPARE;    # int : nat : @some : map nat nat : @parameter : @storage
            EQ;         # bool : nat : @some : map nat nat : @parameter : @storage
            IF
              {}
              {
                PUSH string "WrongCondition: sp.len(compute_BasePool_446.value) == sp.len(params.userData.amountsOut.open_some())"; # string : nat : @some : map nat nat : @parameter : @storage
                FAILWITH;   # FAILED
              }; # nat : @some : map nat nat : @parameter : @storage
            # compute_BaseWeightedPool_472 = sp.local("compute_BaseWeightedPool_472", self.data.scaling_helpers[0]((params.userData.amountsOut.open_some(), self.data.scalingFactors, self.data.fixedPoint[20]))) # nat : @some : map nat nat : @parameter : @storage
            DUP 5;      # @storage : nat : @some : map nat nat : @parameter : @storage
            GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : nat : @some : map nat nat : @parameter : @storage
            GET 5;      # big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : nat : @some : map nat nat : @parameter : @storage
            PUSH int 0; # int : big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : nat : @some : map nat nat : @parameter : @storage
            GET;        # option (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : nat : @some : map nat nat : @parameter : @storage
            IF_NONE
              {
                PUSH int 472; # int : nat : @some : map nat nat : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : nat : @some : map nat nat : @parameter : @storage
            DUP 6;      # @storage : @some : nat : @some : map nat nat : @parameter : @storage
            CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : nat : @some : map nat nat : @parameter : @storage
            CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @some : nat : @some : map nat nat : @parameter : @storage
            GET 6;      # big_map nat (lambda (pair nat nat) nat) : @some : nat : @some : map nat nat : @parameter : @storage
            PUSH nat 20; # nat : big_map nat (lambda (pair nat nat) nat) : @some : nat : @some : map nat nat : @parameter : @storage
            GET;        # option (lambda (pair nat nat) nat) : @some : nat : @some : map nat nat : @parameter : @storage
            IF_NONE
              {
                PUSH int 473; # int : @some : nat : @some : map nat nat : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : @some : nat : @some : map nat nat : @parameter : @storage
            DUP 7;      # @storage : @some : @some : nat : @some : map nat nat : @parameter : @storage
            GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : @some : @some : nat : @some : map nat nat : @parameter : @storage
            GET 3;      # map nat nat : @some : @some : nat : @some : map nat nat : @parameter : @storage
            PAIR;       # pair (map nat nat) @some : @some : nat : @some : map nat nat : @parameter : @storage
            DUP 6;      # @parameter : pair (map nat nat) @some : @some : nat : @some : map nat nat : @parameter : @storage
            GET 3;      # pair (option %amountsOut (map nat nat)) (pair (nat %kind) (option %maxSPTAmountIn nat)) : pair (map nat nat) @some : @some : nat : @some : map nat nat : @parameter : @storage
            CAR;        # option (map nat nat) : pair (map nat nat) @some : @some : nat : @some : map nat nat : @parameter : @storage
            IF_NONE
              {
                PUSH int 468; # int : pair (map nat nat) @some : @some : nat : @some : map nat nat : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : pair (map nat nat) @some : @some : nat : @some : map nat nat : @parameter : @storage
            PAIR;       # pair @some (pair (map nat nat) @some) : @some : nat : @some : map nat nat : @parameter : @storage
            EXEC;       # map nat nat : nat : @some : map nat nat : @parameter : @storage
            # compute_ExternalWeightedMath_115 = sp.local("compute_ExternalWeightedMath_115", sp.view("calcSptInGivenExactTokensOut", sp.record(amountsOut = compute_BaseWeightedPool_472.value, balances = compute_BasePool_446.value, normalizedWeights = self.data.normalizedWeights, swapFeePercentage = self.data.entries[13], totalSupply = self.data.totalSupply + match_pair_WeightedPool_283_fst), self.data.weightedMathLib, sp.TNat).open_some(message = 804)) # map nat nat : nat : @some : map nat nat : @parameter : @storage
            DUP 6;      # @storage : map nat nat : nat : @some : map nat nat : @parameter : @storage
            GET 9;      # address : map nat nat : nat : @some : map nat nat : @parameter : @storage
            DIG 2;      # nat : address : map nat nat : @some : map nat nat : @parameter : @storage
            DUP 7;      # @storage : nat : address : map nat nat : @some : map nat nat : @parameter : @storage
            GET 5;      # pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply)) : nat : address : map nat nat : @some : map nat nat : @parameter : @storage
            GET 4;      # nat : nat : address : map nat nat : @some : map nat nat : @parameter : @storage
            ADD;        # nat : address : map nat nat : @some : map nat nat : @parameter : @storage
            DUP 7;      # @storage : nat : address : map nat nat : @some : map nat nat : @parameter : @storage
            CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : address : map nat nat : @some : map nat nat : @parameter : @storage
            CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : nat : address : map nat nat : @some : map nat nat : @parameter : @storage
            CAR;        # pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat)) : nat : address : map nat nat : @some : map nat nat : @parameter : @storage
            GET 4;      # big_map int nat : nat : address : map nat nat : @some : map nat nat : @parameter : @storage
            PUSH int 13; # int : big_map int nat : nat : address : map nat nat : @some : map nat nat : @parameter : @storage
            GET;        # option nat : nat : address : map nat nat : @some : map nat nat : @parameter : @storage
            IF_NONE
              {
                PUSH int 482; # int : nat : address : map nat nat : @some : map nat nat : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : nat : address : map nat nat : @some : map nat nat : @parameter : @storage
            PAIR;       # pair @some nat : address : map nat nat : @some : map nat nat : @parameter : @storage
            DUP 7;      # @storage : pair @some nat : address : map nat nat : @some : map nat nat : @parameter : @storage
            CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair @some nat : address : map nat nat : @some : map nat nat : @parameter : @storage
            GET 5;      # map nat nat : pair @some nat : address : map nat nat : @some : map nat nat : @parameter : @storage
            PAIR;       # pair (map nat nat) (pair @some nat) : address : map nat nat : @some : map nat nat : @parameter : @storage
            DIG 4;      # map nat nat : pair (map nat nat) (pair @some nat) : address : map nat nat : @some : @parameter : @storage
            DUP 4;      # map nat nat : map nat nat : pair (map nat nat) (pair @some nat) : address : map nat nat : @some : @parameter : @storage
            PAIR;       # pair (map nat nat) (map nat nat) : pair (map nat nat) (pair @some nat) : address : map nat nat : @some : @parameter : @storage
            PAIR;       # pair (pair (map nat nat) (map nat nat)) (pair (map nat nat) (pair @some nat)) : address : map nat nat : @some : @parameter : @storage
            VIEW "calcSptInGivenExactTokensOut" nat; # option nat : map nat nat : @some : @parameter : @storage
            IF_NONE
              {
                PUSH int 804; # int : map nat nat : @some : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : map nat nat : @some : @parameter : @storage
            # sp.verify(compute_ExternalWeightedMath_115.value <= params.userData.maxSPTAmountIn.open_some(), 208) # @some : map nat nat : @some : @parameter : @storage
            DIG 3;      # @parameter : @some : map nat nat : @some : @storage
            GET 3;      # pair (option %amountsOut (map nat nat)) (pair (nat %kind) (option %maxSPTAmountIn nat)) : @some : map nat nat : @some : @storage
            GET 4;      # option nat : @some : map nat nat : @some : @storage
            IF_NONE
              {
                PUSH int 486; # int : @some : map nat nat : @some : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : @some : map nat nat : @some : @storage
            DUP 2;      # @some : @some : @some : map nat nat : @some : @storage
            COMPARE;    # int : @some : map nat nat : @some : @storage
            LE;         # bool : @some : map nat nat : @some : @storage
            IF
              {}
              {
                PUSH int 208; # int : @some : map nat nat : @some : @storage
                FAILWITH;   # FAILED
              }; # @some : map nat nat : @some : @storage
            # doExit.value = (compute_ExternalWeightedMath_115.value, compute_BaseWeightedPool_472.value) # @some : map nat nat : @some : @storage
            PAIR;       # pair @some (map nat nat) : @some : @storage
          }
          {
            SWAP;       # nat : pair nat (map nat nat) : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DROP;       # pair nat (map nat nat) : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            SWAP;       # nat : pair nat (map nat nat) : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DROP;       # pair nat (map nat nat) : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            SWAP;       # @some : pair nat (map nat nat) : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DROP;       # pair nat (map nat nat) : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            SWAP;       # option (map nat (option address)) : pair nat (map nat nat) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DROP;       # pair nat (map nat nat) : big_map int nat : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            SWAP;       # big_map int nat : pair nat (map nat nat) : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DROP;       # pair nat (map nat nat) : nat : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            SWAP;       # nat : pair nat (map nat nat) : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DROP;       # pair nat (map nat nat) : nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            SWAP;       # nat : pair nat (map nat nat) : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DROP;       # pair nat (map nat nat) : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DIG 2;      # map nat nat : pair nat (map nat nat) : @some : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DROP;       # pair nat (map nat nat) : @some : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DIG 2;      # pair nat (pair (map nat nat) nat) : pair nat (map nat nat) : @some : @parameter : @storage
            DROP;       # pair nat (map nat nat) : @some : @parameter : @storage
            DIG 2;      # @parameter : pair nat (map nat nat) : @some : @storage
            DROP;       # pair nat (map nat nat) : @some : @storage
          }; # pair nat (map nat nat) : @some : @storage
        # if sp.fst(doExit.value) == 0: # pair nat (map nat nat) : @some : @storage
        PUSH nat 0; # nat : pair nat (map nat nat) : @some : @storage
        DUP 2;      # pair nat (map nat nat) : nat : pair nat (map nat nat) : @some : @storage
        CAR;        # nat : nat : pair nat (map nat nat) : @some : @storage
        COMPARE;    # int : pair nat (map nat nat) : @some : @storage
        EQ;         # bool : pair nat (map nat nat) : @some : @storage
        IF
          {
            PUSH int 336; # int : pair nat (map nat nat) : @some : @storage
            FAILWITH;   # FAILED
          }
          {}; # pair nat (map nat nat) : @some : @storage
        SWAP;       # @some : pair nat (map nat nat) : @storage
        # sptAmountIn, amountsOut, invariant = sp.match_tuple((sp.fst(doExit.value), sp.snd(doExit.value), compute_ExternalWeightedMath_93.value), "sptAmountIn", "amountsOut", "invariant") # @some : pair nat (map nat nat) : @storage
        DUP 2;      # pair nat (map nat nat) : @some : pair nat (map nat nat) : @storage
        CDR;        # map nat nat : @some : pair nat (map nat nat) : @storage
        PAIR;       # pair (map nat nat) @some : pair nat (map nat nat) : @storage
        SWAP;       # pair nat (map nat nat) : pair (map nat nat) @some : @storage
        CAR;        # nat : pair (map nat nat) @some : @storage
        PAIR;       # pair nat (pair (map nat nat) @some) : @storage
        UNPAIR 3;   # nat : map nat nat : @some : @storage
        # compute_BasePool_460 = sp.local("compute_BasePool_460", self.data.scaling_helpers[0]((amountsOut, self.data.scalingFactors, self.data.fixedPoint[22]))) # nat : map nat nat : @some : @storage
        DUP 4;      # @storage : nat : map nat nat : @some : @storage
        GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : nat : map nat nat : @some : @storage
        GET 5;      # big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : nat : map nat nat : @some : @storage
        PUSH int 0; # int : big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : nat : map nat nat : @some : @storage
        GET;        # option (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : nat : map nat nat : @some : @storage
        IF_NONE
          {
            PUSH int 460; # int : nat : map nat nat : @some : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : nat : map nat nat : @some : @storage
        DUP 5;      # @storage : @some : nat : map nat nat : @some : @storage
        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : nat : map nat nat : @some : @storage
        CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @some : nat : map nat nat : @some : @storage
        GET 6;      # big_map nat (lambda (pair nat nat) nat) : @some : nat : map nat nat : @some : @storage
        PUSH nat 22; # nat : big_map nat (lambda (pair nat nat) nat) : @some : nat : map nat nat : @some : @storage
        GET;        # option (lambda (pair nat nat) nat) : @some : nat : map nat nat : @some : @storage
        IF_NONE
          {
            PUSH int 461; # int : @some : nat : map nat nat : @some : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : @some : nat : map nat nat : @some : @storage
        DIG 5;      # @storage : @some : @some : nat : map nat nat : @some
        GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : @some : @some : nat : map nat nat : @some
        GET 3;      # map nat nat : @some : @some : nat : map nat nat : @some
        PAIR;       # pair (map nat nat) @some : @some : nat : map nat nat : @some
        DIG 3;      # map nat nat : pair (map nat nat) @some : @some : nat : @some
        PAIR;       # pair (map nat nat) (pair (map nat nat) @some) : @some : nat : @some
        EXEC;       # map nat nat : nat : @some
        # result.value = (sptAmountIn, compute_BasePool_460.value, invariant) # map nat nat : nat : @some
        DIG 2;      # @some : map nat nat : nat
        SWAP;       # map nat nat : @some : nat
        PAIR;       # pair (map nat nat) @some : nat
        SWAP;       # nat : pair (map nat nat) @some
        PAIR;       # pair nat (pair (map nat nat) @some)
      }; # pair nat (pair (map nat nat) nat)
    # sp.result(result.value) # pair nat (pair (map nat nat) nat)
  };
view
  "beforeJoinPool" (pair (map %balances nat nat) (pair %userData (pair (option %allT nat) (pair (option %amountsIn (map nat nat)) (nat %kind))) (pair (option %minSPTAmountOut nat) (pair (option %sptAmountOut nat) (option %tokenIndex nat))))) (pair nat (pair (map nat nat) nat))
  {
    UNPAIR;     # @parameter : @storage
    # sp.verify(self.data.settings.paused == False, 'ONLY_UNPAUSED') # @parameter : @storage
    PUSH bool False; # bool : @parameter : @storage
    DUP 3;      # @storage : bool : @parameter : @storage
    GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : bool : @parameter : @storage
    GET 6;      # bool : bool : @parameter : @storage
    COMPARE;    # int : @parameter : @storage
    EQ;         # bool : @parameter : @storage
    IF
      {}
      {
        PUSH string "ONLY_UNPAUSED"; # string : @parameter : @storage
        FAILWITH;   # FAILED
      }; # @parameter : @storage
    # result = sp.local("result", (0, {}, 0)) # @parameter : @storage
    PUSH (pair nat (pair (map nat nat) nat)) (Pair 0 (Pair {} 0)); # pair nat (pair (map nat nat) nat) : @parameter : @storage
    # if self.data.totalSupply == 0: # pair nat (pair (map nat nat) nat) : @parameter : @storage
    PUSH nat 0; # nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
    DUP 4;      # @storage : nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
    GET 5;      # pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply)) : nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
    GET 4;      # nat : nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
    COMPARE;    # int : pair nat (pair (map nat nat) nat) : @parameter : @storage
    EQ;         # bool : pair nat (pair (map nat nat) nat) : @parameter : @storage
    IF
      {
        DROP;       # @parameter : @storage
        # sp.verify(params.userData.kind == 0, 206) # @parameter : @storage
        PUSH nat 0; # nat : @parameter : @storage
        DUP 2;      # @parameter : nat : @parameter : @storage
        GET 3;      # pair (option %allT nat) (pair (option %amountsIn (map nat nat)) (nat %kind)) : nat : @parameter : @storage
        GET 4;      # nat : nat : @parameter : @storage
        COMPARE;    # int : @parameter : @storage
        EQ;         # bool : @parameter : @storage
        IF
          {}
          {
            PUSH int 206; # int : @parameter : @storage
            FAILWITH;   # FAILED
          }; # @parameter : @storage
        # sp.verify(sp.len(params.userData.amountsIn.open_some()) == sp.len(self.data.scalingFactors)) # @parameter : @storage
        DUP 2;      # @storage : @parameter : @storage
        GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : @parameter : @storage
        GET 3;      # map nat nat : @parameter : @storage
        SIZE;       # nat : @parameter : @storage
        DUP 2;      # @parameter : nat : @parameter : @storage
        GET 3;      # pair (option %allT nat) (pair (option %amountsIn (map nat nat)) (nat %kind)) : nat : @parameter : @storage
        GET 3;      # option (map nat nat) : nat : @parameter : @storage
        IF_NONE
          {
            PUSH int 167; # int : nat : @parameter : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : nat : @parameter : @storage
        SIZE;       # nat : nat : @parameter : @storage
        COMPARE;    # int : @parameter : @storage
        EQ;         # bool : @parameter : @storage
        IF
          {}
          {
            PUSH string "WrongCondition: sp.len(params.userData.amountsIn.open_some()) == sp.len(self.data.scalingFactors)"; # string : @parameter : @storage
            FAILWITH;   # FAILED
          }; # @parameter : @storage
        # compute_BaseWeightedPool_172 = sp.local("compute_BaseWeightedPool_172", self.data.scaling_helpers[0]((params.userData.amountsIn.open_some(), self.data.scalingFactors, self.data.fixedPoint[20]))) # @parameter : @storage
        DUP 2;      # @storage : @parameter : @storage
        GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : @parameter : @storage
        GET 5;      # big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : @parameter : @storage
        PUSH int 0; # int : big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : @parameter : @storage
        GET;        # option (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : @parameter : @storage
        IF_NONE
          {
            PUSH int 172; # int : @parameter : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : @parameter : @storage
        DUP 3;      # @storage : @some : @parameter : @storage
        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : @parameter : @storage
        CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @some : @parameter : @storage
        GET 6;      # big_map nat (lambda (pair nat nat) nat) : @some : @parameter : @storage
        PUSH nat 20; # nat : big_map nat (lambda (pair nat nat) nat) : @some : @parameter : @storage
        GET;        # option (lambda (pair nat nat) nat) : @some : @parameter : @storage
        IF_NONE
          {
            PUSH int 173; # int : @some : @parameter : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : @some : @parameter : @storage
        DUP 4;      # @storage : @some : @some : @parameter : @storage
        GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : @some : @some : @parameter : @storage
        GET 3;      # map nat nat : @some : @some : @parameter : @storage
        PAIR;       # pair (map nat nat) @some : @some : @parameter : @storage
        DUP 3;      # @parameter : pair (map nat nat) @some : @some : @parameter : @storage
        GET 3;      # pair (option %allT nat) (pair (option %amountsIn (map nat nat)) (nat %kind)) : pair (map nat nat) @some : @some : @parameter : @storage
        GET 3;      # option (map nat nat) : pair (map nat nat) @some : @some : @parameter : @storage
        IF_NONE
          {
            PUSH int 167; # int : pair (map nat nat) @some : @some : @parameter : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : pair (map nat nat) @some : @some : @parameter : @storage
        PAIR;       # pair @some (pair (map nat nat) @some) : @some : @parameter : @storage
        EXEC;       # map nat nat : @parameter : @storage
        # compute_ExternalWeightedMath_93 = sp.local("compute_ExternalWeightedMath_93", sp.view("calculateInvariant", sp.record(balances = compute_BaseWeightedPool_172.value, normalizedWeights = self.data.normalizedWeights), self.data.weightedMathLib, sp.TNat).open_some(message = 802)) # map nat nat : @parameter : @storage
        DUP 3;      # @storage : map nat nat : @parameter : @storage
        GET 9;      # address : map nat nat : @parameter : @storage
        DUP 4;      # @storage : address : map nat nat : @parameter : @storage
        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : address : map nat nat : @parameter : @storage
        GET 5;      # map nat nat : address : map nat nat : @parameter : @storage
        DUP 3;      # map nat nat : map nat nat : address : map nat nat : @parameter : @storage
        PAIR;       # pair (map nat nat) (map nat nat) : address : map nat nat : @parameter : @storage
        VIEW "calculateInvariant" nat; # option nat : map nat nat : @parameter : @storage
        IF_NONE
          {
            PUSH int 802; # int : map nat nat : @parameter : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : map nat nat : @parameter : @storage
        # result.value = (compute_ExternalWeightedMath_93.value * sp.len(params.userData.amountsIn.open_some()), compute_BaseWeightedPool_172.value, compute_ExternalWeightedMath_93.value) # @some : map nat nat : @parameter : @storage
        DUP;        # @some : @some : map nat nat : @parameter : @storage
        DIG 2;      # map nat nat : @some : @some : @parameter : @storage
        PAIR;       # pair (map nat nat) @some : @some : @parameter : @storage
        DIG 2;      # @parameter : pair (map nat nat) @some : @some : @storage
        GET 3;      # pair (option %allT nat) (pair (option %amountsIn (map nat nat)) (nat %kind)) : pair (map nat nat) @some : @some : @storage
        GET 3;      # option (map nat nat) : pair (map nat nat) @some : @some : @storage
        IF_NONE
          {
            PUSH int 167; # int : pair (map nat nat) @some : @some : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : pair (map nat nat) @some : @some : @storage
        SIZE;       # nat : pair (map nat nat) @some : @some : @storage
        DIG 2;      # @some : nat : pair (map nat nat) @some : @storage
        MUL;        # nat : pair (map nat nat) @some : @storage
        PAIR;       # pair nat (pair (map nat nat) @some) : @storage
      }
      {
        # compute_BasePool_400 = sp.local("compute_BasePool_400", self.data.scaling_helpers[0]((params.balances, self.data.scalingFactors, self.data.fixedPoint[20]))) # pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 3;      # @storage : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 5;      # big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : pair nat (pair (map nat nat) nat) : @parameter : @storage
        PUSH int 0; # int : big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET;        # option (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : pair nat (pair (map nat nat) nat) : @parameter : @storage
        IF_NONE
          {
            PUSH int 400; # int : pair nat (pair (map nat nat) nat) : @parameter : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 4;      # @storage : @some : pair nat (pair (map nat nat) nat) : @parameter : @storage
        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : pair nat (pair (map nat nat) nat) : @parameter : @storage
        CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @some : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 6;      # big_map nat (lambda (pair nat nat) nat) : @some : pair nat (pair (map nat nat) nat) : @parameter : @storage
        PUSH nat 20; # nat : big_map nat (lambda (pair nat nat) nat) : @some : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET;        # option (lambda (pair nat nat) nat) : @some : pair nat (pair (map nat nat) nat) : @parameter : @storage
        IF_NONE
          {
            PUSH int 401; # int : @some : pair nat (pair (map nat nat) nat) : @parameter : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : @some : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 5;      # @storage : @some : @some : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : @some : @some : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 3;      # map nat nat : @some : @some : pair nat (pair (map nat nat) nat) : @parameter : @storage
        PAIR;       # pair (map nat nat) @some : @some : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 4;      # @parameter : pair (map nat nat) @some : @some : pair nat (pair (map nat nat) nat) : @parameter : @storage
        CAR;        # map nat nat : pair (map nat nat) @some : @some : pair nat (pair (map nat nat) nat) : @parameter : @storage
        PAIR;       # pair (map nat nat) (pair (map nat nat) @some) : @some : pair nat (pair (map nat nat) nat) : @parameter : @storage
        EXEC;       # map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        # compute_BaseWeightedPool_210 = sp.local("compute_BaseWeightedPool_210", self.data.normalizedWeights) # map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 4;      # @storage : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 5;      # map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        # compute_ExternalWeightedMath_93 = sp.local("compute_ExternalWeightedMath_93", sp.view("calculateInvariant", sp.record(balances = compute_BasePool_400.value, normalizedWeights = compute_BaseWeightedPool_210.value), self.data.weightedMathLib, sp.TNat).open_some(message = 802)) # map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 5;      # @storage : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 9;      # address : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 2;      # map nat nat : address : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 4;      # map nat nat : map nat nat : address : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        PAIR;       # pair (map nat nat) (map nat nat) : address : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        VIEW "calculateInvariant" nat; # option nat : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        IF_NONE
          {
            PUSH int 802; # int : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        # match_pair_WeightedPoolProtocolFees_55_fst, match_pair_WeightedPoolProtocolFees_55_snd = sp.match_tuple(self.data.feeCache, "match_pair_WeightedPoolProtocolFees_55_fst", "match_pair_WeightedPoolProtocolFees_55_snd") # @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 6;      # @storage : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 5;      # pair nat nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        UNPAIR;     # nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        # compute_WeightedPoolProtocolFees_57 = sp.local("compute_WeightedPoolProtocolFees_57", self.data.entries) # nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 8;      # @storage : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        CAR;        # pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat)) : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 4;      # big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        # compute_WeightedPoolProtocolFees_64 = sp.local("compute_WeightedPoolProtocolFees_64", self.data.rateProviders) # big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 9;      # @storage : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        CAR;        # pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 3;      # option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        # compute_ExternalWeightedProtocolFees_48 = sp.local("compute_ExternalWeightedProtocolFees_48", sp.view("getPreJoinExitProtocolFees", sp.record(athRateProduct = compute_WeightedPoolProtocolFees_57.value[11], exemptFromYieldFees = self.data.exemptFromYieldFees, normalizedWeights = compute_BaseWeightedPool_210.value, postJoinExitInvariant = compute_WeightedPoolProtocolFees_57.value[12], preJoinExitInvariant = compute_ExternalWeightedMath_93.value, preJoinExitSupply = self.data.totalSupply, rateProviders = compute_WeightedPoolProtocolFees_64.value, swapFee = match_pair_WeightedPoolProtocolFees_55_fst, yieldFee = match_pair_WeightedPoolProtocolFees_55_snd), self.data.weightedProtocolFeesLib, sp.TPair(sp.TNat, sp.TNat)).open_some(message = 807)) # option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 10;     # @storage : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 10;     # address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 5;      # nat : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 5;      # nat : nat : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        PAIR;       # pair nat nat : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 3;      # option (map nat (option address)) : pair nat nat : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        PAIR;       # pair (option (map nat (option address))) (pair nat nat) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 12;     # @storage : pair (option (map nat (option address))) (pair nat nat) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 5;      # pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply)) : pair (option (map nat (option address))) (pair nat nat) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 4;      # nat : pair (option (map nat (option address))) (pair nat nat) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 8;      # @some : nat : pair (option (map nat (option address))) (pair nat nat) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        PAIR;       # pair @some nat : pair (option (map nat (option address))) (pair nat nat) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        PAIR;       # pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 4;      # big_map int nat : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        PUSH int 12; # int : big_map int nat : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET;        # option nat : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        IF_NONE
          {
            PUSH int 62; # int : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 9;      # map nat nat : @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        PAIR;       # pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 13;     # @storage : pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 3;      # bool : pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 6;      # big_map int nat : bool : pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        PUSH int 11; # int : big_map int nat : bool : pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET;        # option nat : bool : pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        IF_NONE
          {
            PUSH int 65; # int : bool : pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : bool : pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        PAIR;       # pair @some bool : pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        PAIR;       # pair (pair @some bool) (pair (map nat nat) @some) : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        PAIR;       # pair (pair (pair @some bool) (pair (map nat nat) @some)) (pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat))) : address : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        VIEW "getPreJoinExitProtocolFees" (pair nat nat); # option (pair nat nat) : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        IF_NONE
          {
            PUSH int 807; # int : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        # match_pair_WeightedPool_283_fst, match_pair_WeightedPool_283_snd = sp.match_tuple((sp.fst(compute_ExternalWeightedProtocolFees_48.value), sp.snd(compute_ExternalWeightedProtocolFees_48.value)), "match_pair_WeightedPool_283_fst", "match_pair_WeightedPool_283_snd") # @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP;        # @some : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        CDR;        # nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 2;      # @some : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        CAR;        # nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        # doJoin = sp.local("doJoin", (0, {})) # nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        PUSH (pair nat (map nat nat)) (Pair 0 {}); # pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        # if params.userData.kind == 1: # pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        PUSH nat 1; # nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 14;     # @parameter : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 3;      # pair (option %allT nat) (pair (option %amountsIn (map nat nat)) (nat %kind)) : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 4;      # nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        COMPARE;    # int : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        EQ;         # bool : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        IF
          {
            DROP;       # nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            # sp.verify(sp.len(compute_BasePool_400.value) == sp.len(params.userData.amountsIn.open_some())) # nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 12;     # @parameter : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET 3;      # pair (option %allT nat) (pair (option %amountsIn (map nat nat)) (nat %kind)) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET 3;      # option (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            IF_NONE
              {
                PUSH int 167; # int : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            SIZE;       # nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 11;     # map nat nat : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            SIZE;       # nat : nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            COMPARE;    # int : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            EQ;         # bool : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            IF
              {}
              {
                PUSH string "WrongCondition: sp.len(compute_BasePool_400.value) == sp.len(params.userData.amountsIn.open_some())"; # string : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                FAILWITH;   # FAILED
              }; # nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            # compute_BaseWeightedPool_279 = sp.local("compute_BaseWeightedPool_279", self.data.scaling_helpers[0]((params.userData.amountsIn.open_some(), self.data.scalingFactors, self.data.fixedPoint[20]))) # nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 13;     # @storage : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET 5;      # big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            PUSH int 0; # int : big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET;        # option (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            IF_NONE
              {
                PUSH int 279; # int : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 14;     # @storage : @some : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @some : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET 6;      # big_map nat (lambda (pair nat nat) nat) : @some : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            PUSH nat 20; # nat : big_map nat (lambda (pair nat nat) nat) : @some : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET;        # option (lambda (pair nat nat) nat) : @some : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            IF_NONE
              {
                PUSH int 280; # int : @some : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : @some : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 15;     # @storage : @some : @some : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : @some : @some : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET 3;      # map nat nat : @some : @some : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            PAIR;       # pair (map nat nat) @some : @some : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 14;     # @parameter : pair (map nat nat) @some : @some : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET 3;      # pair (option %allT nat) (pair (option %amountsIn (map nat nat)) (nat %kind)) : pair (map nat nat) @some : @some : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET 3;      # option (map nat nat) : pair (map nat nat) @some : @some : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            IF_NONE
              {
                PUSH int 167; # int : pair (map nat nat) @some : @some : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : pair (map nat nat) @some : @some : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            PAIR;       # pair @some (pair (map nat nat) @some) : @some : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            EXEC;       # map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            # compute_ExternalWeightedMath_104 = sp.local("compute_ExternalWeightedMath_104", sp.view("calcSptOutGivenExactTokensIn", sp.record(amountsIn = compute_BaseWeightedPool_279.value, balances = compute_BasePool_400.value, normalizedWeights = compute_BaseWeightedPool_210.value, swapFeePercentage = self.data.entries[13], totalSupply = self.data.totalSupply + match_pair_WeightedPool_283_fst), self.data.weightedMathLib, sp.TNat).open_some(message = 803)) # map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 14;     # @storage : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET 9;      # address : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 3;      # nat : address : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 16;     # @storage : nat : address : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET 5;      # pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply)) : nat : address : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET 4;      # nat : nat : address : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            ADD;        # nat : address : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 16;     # @storage : nat : address : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : address : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : nat : address : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            CAR;        # pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat)) : nat : address : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET 4;      # big_map int nat : nat : address : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            PUSH int 13; # int : big_map int nat : nat : address : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET;        # option nat : nat : address : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            IF_NONE
              {
                PUSH int 289; # int : nat : address : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : nat : address : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            PAIR;       # pair @some nat : address : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 12;     # map nat nat : pair @some nat : address : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            PAIR;       # pair (map nat nat) (pair @some nat) : address : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 13;     # map nat nat : pair (map nat nat) (pair @some nat) : address : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 4;      # map nat nat : map nat nat : pair (map nat nat) (pair @some nat) : address : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            PAIR;       # pair (map nat nat) (map nat nat) : pair (map nat nat) (pair @some nat) : address : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            PAIR;       # pair (pair (map nat nat) (map nat nat)) (pair (map nat nat) (pair @some nat)) : address : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            VIEW "calcSptOutGivenExactTokensIn" nat; # option nat : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            IF_NONE
              {
                PUSH int 803; # int : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            # sp.verify(compute_ExternalWeightedMath_104.value >= params.userData.minSPTAmountOut.open_some(), 208) # @some : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 14;     # @parameter : @some : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET 5;      # option nat : @some : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            IF_NONE
              {
                PUSH int 293; # int : @some : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : @some : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 2;      # @some : @some : @some : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            COMPARE;    # int : @some : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GE;         # bool : @some : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            IF
              {}
              {
                PUSH int 208; # int : @some : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                FAILWITH;   # FAILED
              }; # @some : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            # doJoin.value = (compute_ExternalWeightedMath_104.value, compute_BaseWeightedPool_279.value) # @some : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            PAIR;       # pair @some (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
          }
          {}; # pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        # if params.userData.kind == 2: # pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        PUSH nat 2; # nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 14;     # @parameter : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 3;      # pair (option %allT nat) (pair (option %amountsIn (map nat nat)) (nat %kind)) : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 4;      # nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        COMPARE;    # int : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        EQ;         # bool : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        IF
          {
            # sp.verify(params.userData.tokenIndex.open_some() < sp.len(compute_BasePool_400.value), 100) # pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 11;     # map nat nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            SIZE;       # nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 14;     # @parameter : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET 8;      # option nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            IF_NONE
              {
                PUSH int 303; # int : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            COMPARE;    # int : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            LT;         # bool : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            IF
              {}
              {
                PUSH int 100; # int : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                FAILWITH;   # FAILED
              }; # pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            # compute_ExternalWeightedMath_126 = sp.local("compute_ExternalWeightedMath_126", sp.view("calcTokenInGivenExactSptOut", sp.record(balance = compute_BasePool_400.value[params.userData.tokenIndex.open_some()], normalizedWeight = compute_BaseWeightedPool_210.value[params.userData.tokenIndex.open_some()], sptAmountOut = params.userData.sptAmountOut.open_some(), sptTotalSupply = self.data.totalSupply + match_pair_WeightedPool_283_fst, swapFeePercentage = self.data.entries[13]), self.data.weightedMathLib, sp.TNat).open_some(message = 805)) # pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 14;     # @storage : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET 9;      # address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 15;     # @storage : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            CAR;        # pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat)) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET 4;      # big_map int nat : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            PUSH int 13; # int : big_map int nat : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET;        # option nat : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            IF_NONE
              {
                PUSH int 315; # int : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 4;      # nat : @some : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 17;     # @storage : nat : @some : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET 5;      # pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply)) : nat : @some : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET 4;      # nat : nat : @some : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            ADD;        # nat : @some : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            PAIR;       # pair nat @some : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 15;     # @parameter : pair nat @some : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET 7;      # option nat : pair nat @some : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            IF_NONE
              {
                PUSH int 304; # int : pair nat @some : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : pair nat @some : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            PAIR;       # pair @some (pair nat @some) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 12;     # map nat nat : pair @some (pair nat @some) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 16;     # @parameter : map nat nat : pair @some (pair nat @some) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET 8;      # option nat : map nat nat : pair @some (pair nat @some) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            IF_NONE
              {
                PUSH int 303; # int : map nat nat : pair @some (pair nat @some) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : map nat nat : pair @some (pair nat @some) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET;        # option nat : pair @some (pair nat @some) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            IF_NONE
              {
                PUSH int 312; # int : pair @some (pair nat @some) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : pair @some (pair nat @some) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 14;     # map nat nat : @some : pair @some (pair nat @some) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 17;     # @parameter : map nat nat : @some : pair @some (pair nat @some) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET 8;      # option nat : map nat nat : @some : pair @some (pair nat @some) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            IF_NONE
              {
                PUSH int 303; # int : map nat nat : @some : pair @some (pair nat @some) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : map nat nat : @some : pair @some (pair nat @some) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET;        # option nat : @some : pair @some (pair nat @some) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            IF_NONE
              {
                PUSH int 311; # int : @some : pair @some (pair nat @some) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : @some : pair @some (pair nat @some) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            PAIR;       # pair @some @some : pair @some (pair nat @some) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            PAIR;       # pair (pair @some @some) (pair @some (pair nat @some)) : address : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            VIEW "calcTokenInGivenExactSptOut" nat; # option nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            IF_NONE
              {
                PUSH int 805; # int : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            # compute_BaseWeightedPool_320 = sp.local("compute_BaseWeightedPool_320", {}, sp.TMap(sp.TNat, sp.TNat)) # @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            EMPTY_MAP nat nat; # map nat nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            # for x in sp.range(0, sp.len(compute_BasePool_400.value)): ... (sp.TNat) # map nat nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 13;     # map nat nat : map nat nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            SIZE;       # nat : map nat nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            PUSH nat 0; # nat : nat : map nat nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP;        # nat : nat : nat : map nat nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 3;      # nat : nat : nat : nat : map nat nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            COMPARE;    # int : nat : nat : map nat nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GT;         # bool : nat : nat : map nat nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            LOOP
              {
                # compute_BaseWeightedPool_320.value[x] = 0 # nat : nat : map nat nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                DIG 2;      # map nat nat : nat : nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                PUSH (option nat) (Some 0); # option nat : map nat nat : nat : nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                DUP 3;      # nat : option nat : map nat nat : nat : nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                UPDATE;     # map nat nat : nat : nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                DUG 2;      # nat : nat : map nat nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                # loop step # nat : nat : map nat nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                PUSH nat 1; # nat : nat : nat : map nat nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                ADD;        # nat : nat : map nat nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                DUP;        # nat : nat : nat : map nat nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                DUP 3;      # nat : nat : nat : nat : map nat nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                COMPARE;    # int : nat : nat : map nat nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                GT;         # bool : nat : nat : map nat nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
              }; # nat : nat : map nat nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DROP 2;     # map nat nat : @some : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DIG 2;      # pair nat (map nat nat) : map nat nat : @some : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DROP;       # map nat nat : @some : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            SWAP;       # @some : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            # compute_BaseWeightedPool_320.value[params.userData.tokenIndex.open_some()] = compute_ExternalWeightedMath_126.value # @some : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            SOME;       # option nat : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 14;     # @parameter : option nat : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET 8;      # option nat : option nat : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            IF_NONE
              {
                PUSH int 303; # int : option nat : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : option nat : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            UPDATE;     # map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            # doJoin.value = (params.userData.sptAmountOut.open_some(), compute_BaseWeightedPool_320.value) # map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 13;     # @parameter : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GET 7;      # option nat : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            IF_NONE
              {
                PUSH int 304; # int : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            PAIR;       # pair @some (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
          }
          {}; # pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        # if params.userData.kind == 3: # pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        PUSH nat 3; # nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        DUP 14;     # @parameter : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 3;      # pair (option %allT nat) (pair (option %amountsIn (map nat nat)) (nat %kind)) : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        GET 4;      # nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        COMPARE;    # int : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        EQ;         # bool : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
        IF
          {
            # compute_BasePoolMath_28 = sp.local("compute_BasePoolMath_28", {}, sp.TMap(sp.TNat, sp.TNat)) # pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            EMPTY_MAP nat nat; # map nat nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            # for i in sp.range(0, sp.len(compute_BasePool_400.value)): ... (sp.TNat) # map nat nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 12;     # map nat nat : map nat nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            SIZE;       # nat : map nat nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            PUSH nat 0; # nat : nat : map nat nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP;        # nat : nat : nat : map nat nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DUP 3;      # nat : nat : nat : nat : map nat nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            COMPARE;    # int : nat : nat : map nat nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            GT;         # bool : nat : nat : map nat nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            LOOP
              {
                # compute_BasePoolMath_28.value[i] = self.data.fixedPoint[21]((compute_BasePool_400.value[i], self.data.fixedPoint[23]((params.userData.allT.open_some(), self.data.totalSupply + match_pair_WeightedPool_283_fst)))) # nat : nat : map nat nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                DIG 2;      # map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                DUP 17;     # @storage : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                GET 6;      # big_map nat (lambda (pair nat nat) nat) : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                PUSH nat 21; # nat : big_map nat (lambda (pair nat nat) nat) : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                GET;        # option (lambda (pair nat nat) nat) : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                IF_NONE
                  {
                    PUSH int 30; # int : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                DUP 18;     # @storage : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                GET 6;      # big_map nat (lambda (pair nat nat) nat) : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                PUSH nat 23; # nat : big_map nat (lambda (pair nat nat) nat) : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                GET;        # option (lambda (pair nat nat) nat) : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                IF_NONE
                  {
                    PUSH int 26; # int : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                DUP 7;      # nat : @some : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                DUP 20;     # @storage : nat : @some : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                GET 5;      # pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply)) : nat : @some : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                GET 4;      # nat : nat : @some : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                ADD;        # nat : @some : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                DUP 19;     # @parameter : nat : @some : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                GET 3;      # pair (option %allT nat) (pair (option %amountsIn (map nat nat)) (nat %kind)) : nat : @some : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                CAR;        # option nat : nat : @some : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                IF_NONE
                  {
                    PUSH int 332; # int : nat : @some : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : nat : @some : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                PAIR;       # pair @some nat : @some : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                EXEC;       # nat : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                DUP 16;     # map nat nat : nat : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                DUP 5;      # nat : map nat nat : nat : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                GET;        # option nat : nat : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                IF_NONE
                  {
                    PUSH int 30; # int : nat : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : nat : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                PAIR;       # pair @some nat : @some : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                EXEC;       # nat : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                SOME;       # option nat : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                DUP 3;      # nat : option nat : map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                UPDATE;     # map nat nat : nat : nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                DUG 2;      # nat : nat : map nat nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                # loop step # nat : nat : map nat nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                PUSH nat 1; # nat : nat : nat : map nat nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                ADD;        # nat : nat : map nat nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                DUP;        # nat : nat : nat : map nat nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                DUP 3;      # nat : nat : nat : nat : map nat nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                COMPARE;    # int : nat : nat : map nat nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
                GT;         # bool : nat : nat : map nat nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
              }; # nat : nat : map nat nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DROP 2;     # map nat nat : pair nat (map nat nat) : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            SWAP;       # pair nat (map nat nat) : map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DROP;       # map nat nat : nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            SWAP;       # nat : map nat nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DROP;       # map nat nat : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            SWAP;       # nat : map nat nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DROP;       # map nat nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            SWAP;       # @some : map nat nat : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DROP;       # map nat nat : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            SWAP;       # option (map nat (option address)) : map nat nat : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DROP;       # map nat nat : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            SWAP;       # big_map int nat : map nat nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DROP;       # map nat nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            SWAP;       # nat : map nat nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DROP;       # map nat nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            SWAP;       # nat : map nat nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DROP;       # map nat nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DIG 2;      # map nat nat : map nat nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DROP;       # map nat nat : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DIG 2;      # map nat nat : map nat nat : @some : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DROP;       # map nat nat : @some : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DIG 2;      # pair nat (pair (map nat nat) nat) : map nat nat : @some : @parameter : @storage
            DROP;       # map nat nat : @some : @parameter : @storage
            # compute_BaseWeightedPool_335 = sp.local("compute_BaseWeightedPool_335", compute_BasePoolMath_28.value)
            # doJoin.value = (params.userData.allT.open_some(), compute_BaseWeightedPool_335.value) # map nat nat : @some : @parameter : @storage
            DIG 2;      # @parameter : map nat nat : @some : @storage
            GET 3;      # pair (option %allT nat) (pair (option %amountsIn (map nat nat)) (nat %kind)) : map nat nat : @some : @storage
            CAR;        # option nat : map nat nat : @some : @storage
            IF_NONE
              {
                PUSH int 332; # int : map nat nat : @some : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : map nat nat : @some : @storage
            PAIR;       # pair @some (map nat nat) : @some : @storage
          }
          {
            SWAP;       # nat : pair nat (map nat nat) : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DROP;       # pair nat (map nat nat) : nat : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            SWAP;       # nat : pair nat (map nat nat) : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DROP;       # pair nat (map nat nat) : @some : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            SWAP;       # @some : pair nat (map nat nat) : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DROP;       # pair nat (map nat nat) : option (map nat (option address)) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            SWAP;       # option (map nat (option address)) : pair nat (map nat nat) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DROP;       # pair nat (map nat nat) : big_map int nat : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            SWAP;       # big_map int nat : pair nat (map nat nat) : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DROP;       # pair nat (map nat nat) : nat : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            SWAP;       # nat : pair nat (map nat nat) : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DROP;       # pair nat (map nat nat) : nat : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            SWAP;       # nat : pair nat (map nat nat) : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DROP;       # pair nat (map nat nat) : @some : map nat nat : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DIG 2;      # map nat nat : pair nat (map nat nat) : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DROP;       # pair nat (map nat nat) : @some : map nat nat : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DIG 2;      # map nat nat : pair nat (map nat nat) : @some : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DROP;       # pair nat (map nat nat) : @some : pair nat (pair (map nat nat) nat) : @parameter : @storage
            DIG 2;      # pair nat (pair (map nat nat) nat) : pair nat (map nat nat) : @some : @parameter : @storage
            DROP;       # pair nat (map nat nat) : @some : @parameter : @storage
            DIG 2;      # @parameter : pair nat (map nat nat) : @some : @storage
            DROP;       # pair nat (map nat nat) : @some : @storage
          }; # pair nat (map nat nat) : @some : @storage
        # if sp.fst(doJoin.value) == 0: # pair nat (map nat nat) : @some : @storage
        PUSH nat 0; # nat : pair nat (map nat nat) : @some : @storage
        DUP 2;      # pair nat (map nat nat) : nat : pair nat (map nat nat) : @some : @storage
        CAR;        # nat : nat : pair nat (map nat nat) : @some : @storage
        COMPARE;    # int : pair nat (map nat nat) : @some : @storage
        EQ;         # bool : pair nat (map nat nat) : @some : @storage
        IF
          {
            PUSH int 310; # int : pair nat (map nat nat) : @some : @storage
            FAILWITH;   # FAILED
          }
          {}; # pair nat (map nat nat) : @some : @storage
        SWAP;       # @some : pair nat (map nat nat) : @storage
        # result.value = (sp.fst(doJoin.value), sp.snd(doJoin.value), compute_ExternalWeightedMath_93.value) # @some : pair nat (map nat nat) : @storage
        DUP 2;      # pair nat (map nat nat) : @some : pair nat (map nat nat) : @storage
        CDR;        # map nat nat : @some : pair nat (map nat nat) : @storage
        PAIR;       # pair (map nat nat) @some : pair nat (map nat nat) : @storage
        SWAP;       # pair nat (map nat nat) : pair (map nat nat) @some : @storage
        CAR;        # nat : pair (map nat nat) @some : @storage
        PAIR;       # pair nat (pair (map nat nat) @some) : @storage
      }; # pair nat (pair (map nat nat) @some) : @storage
    # sptAmountOut, amountsIn, invariant = sp.match_tuple(result.value, "sptAmountOut", "amountsIn", "invariant") # pair nat (pair (map nat nat) @some) : @storage
    UNPAIR 3;   # nat : map nat nat : @some : @storage
    # compute_BasePool_412 = sp.local("compute_BasePool_412", self.data.scaling_helpers[0]((amountsIn, self.data.scalingFactors, self.data.fixedPoint[23]))) # nat : map nat nat : @some : @storage
    DUP 4;      # @storage : nat : map nat nat : @some : @storage
    GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : nat : map nat nat : @some : @storage
    GET 5;      # big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : nat : map nat nat : @some : @storage
    PUSH int 0; # int : big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : nat : map nat nat : @some : @storage
    GET;        # option (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : nat : map nat nat : @some : @storage
    IF_NONE
      {
        PUSH int 412; # int : nat : map nat nat : @some : @storage
        FAILWITH;   # FAILED
      }
      {}; # @some : nat : map nat nat : @some : @storage
    DUP 5;      # @storage : @some : nat : map nat nat : @some : @storage
    CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : nat : map nat nat : @some : @storage
    CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @some : nat : map nat nat : @some : @storage
    GET 6;      # big_map nat (lambda (pair nat nat) nat) : @some : nat : map nat nat : @some : @storage
    PUSH nat 23; # nat : big_map nat (lambda (pair nat nat) nat) : @some : nat : map nat nat : @some : @storage
    GET;        # option (lambda (pair nat nat) nat) : @some : nat : map nat nat : @some : @storage
    IF_NONE
      {
        PUSH int 413; # int : @some : nat : map nat nat : @some : @storage
        FAILWITH;   # FAILED
      }
      {}; # @some : @some : nat : map nat nat : @some : @storage
    DIG 5;      # @storage : @some : @some : nat : map nat nat : @some
    GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : @some : @some : nat : map nat nat : @some
    GET 3;      # map nat nat : @some : @some : nat : map nat nat : @some
    PAIR;       # pair (map nat nat) @some : @some : nat : map nat nat : @some
    DIG 3;      # map nat nat : pair (map nat nat) @some : @some : nat : @some
    PAIR;       # pair (map nat nat) (pair (map nat nat) @some) : @some : nat : @some
    EXEC;       # map nat nat : nat : @some
    # sp.result((sptAmountOut, compute_BasePool_412.value, invariant)) # map nat nat : nat : @some
    DIG 2;      # @some : map nat nat : nat
    SWAP;       # map nat nat : @some : nat
    PAIR;       # pair (map nat nat) @some : nat
    SWAP;       # nat : pair (map nat nat) @some
    PAIR;       # pair nat (pair (map nat nat) @some)
  };
view
  "getActualSupply" unit nat
  {
    CDR;        # @storage
    # compute_WeightedPool_341 = sp.local("compute_WeightedPool_341", self.data.totalSupply) # @storage
    DUP;        # @storage : @storage
    GET 5;      # pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply)) : @storage
    GET 4;      # nat : @storage
    # compute_BaseWeightedPool_49 = sp.local("compute_BaseWeightedPool_49", sp.view("getPoolTokens", self.data.poolId.open_some(), self.data.vault, sp.TPair(sp.TMap(sp.TNat, sp.TPair(sp.TAddress, sp.TOption(sp.TNat))), sp.TMap(sp.TNat, sp.TNat))).open_some(message = 813)) # nat : @storage
    DUP 2;      # @storage : nat : @storage
    GET 7;      # address : nat : @storage
    DUP 3;      # @storage : address : nat : @storage
    CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : address : nat : @storage
    GET 7;      # option (pair address nat) : address : nat : @storage
    IF_NONE
      {
        PUSH int 49; # int : address : nat : @storage
        FAILWITH;   # FAILED
      }
      {}; # @some : address : nat : @storage
    VIEW "getPoolTokens" (pair (map nat (pair address (option nat))) (map nat nat)); # option (pair (map nat (pair address (option nat))) (map nat nat)) : nat : @storage
    IF_NONE
      {
        PUSH int 813; # int : nat : @storage
        FAILWITH;   # FAILED
      }
      {}; # @some : nat : @storage
    # compute_BaseWeightedPool_54 = sp.local("compute_BaseWeightedPool_54", self.data.scaling_helpers[0]((sp.snd(compute_BaseWeightedPool_49.value), self.data.scalingFactors, self.data.fixedPoint[20]))) # @some : nat : @storage
    DUP 3;      # @storage : @some : nat : @storage
    GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : @some : nat : @storage
    GET 5;      # big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : @some : nat : @storage
    PUSH int 0; # int : big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : @some : nat : @storage
    GET;        # option (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : @some : nat : @storage
    IF_NONE
      {
        PUSH int 54; # int : @some : nat : @storage
        FAILWITH;   # FAILED
      }
      {}; # @some : @some : nat : @storage
    DUP 4;      # @storage : @some : @some : nat : @storage
    CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : @some : nat : @storage
    CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @some : @some : nat : @storage
    GET 6;      # big_map nat (lambda (pair nat nat) nat) : @some : @some : nat : @storage
    PUSH nat 20; # nat : big_map nat (lambda (pair nat nat) nat) : @some : @some : nat : @storage
    GET;        # option (lambda (pair nat nat) nat) : @some : @some : nat : @storage
    IF_NONE
      {
        PUSH int 55; # int : @some : @some : nat : @storage
        FAILWITH;   # FAILED
      }
      {}; # @some : @some : @some : nat : @storage
    DUP 5;      # @storage : @some : @some : @some : nat : @storage
    GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : @some : @some : @some : nat : @storage
    GET 3;      # map nat nat : @some : @some : @some : nat : @storage
    PAIR;       # pair (map nat nat) @some : @some : @some : nat : @storage
    DIG 2;      # @some : pair (map nat nat) @some : @some : nat : @storage
    CDR;        # map nat nat : pair (map nat nat) @some : @some : nat : @storage
    PAIR;       # pair (map nat nat) (pair (map nat nat) @some) : @some : nat : @storage
    EXEC;       # map nat nat : nat : @storage
    # compute_ExternalWeightedMath_93 = sp.local("compute_ExternalWeightedMath_93", sp.view("calculateInvariant", sp.record(balances = compute_BaseWeightedPool_54.value, normalizedWeights = self.data.normalizedWeights), self.data.weightedMathLib, sp.TNat).open_some(message = 802)) # map nat nat : nat : @storage
    DUP 3;      # @storage : map nat nat : nat : @storage
    GET 9;      # address : map nat nat : nat : @storage
    DUP 4;      # @storage : address : map nat nat : nat : @storage
    CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : address : map nat nat : nat : @storage
    GET 5;      # map nat nat : address : map nat nat : nat : @storage
    DIG 2;      # map nat nat : map nat nat : address : nat : @storage
    PAIR;       # pair (map nat nat) (map nat nat) : address : nat : @storage
    VIEW "calculateInvariant" nat; # option nat : nat : @storage
    IF_NONE
      {
        PUSH int 802; # int : nat : @storage
        FAILWITH;   # FAILED
      }
      {}; # @some : nat : @storage
    # compute_WeightedPool_347 = sp.local("compute_WeightedPool_347", self.data.scalingFactors) # @some : nat : @storage
    DUP 3;      # @storage : @some : nat : @storage
    GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : @some : nat : @storage
    GET 3;      # map nat nat : @some : nat : @storage
    # match_pair_WeightedPoolProtocolFees_55_fst, match_pair_WeightedPoolProtocolFees_55_snd = sp.match_tuple(self.data.feeCache, "match_pair_WeightedPoolProtocolFees_55_fst", "match_pair_WeightedPoolProtocolFees_55_snd") # map nat nat : @some : nat : @storage
    DUP 4;      # @storage : map nat nat : @some : nat : @storage
    CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : map nat nat : @some : nat : @storage
    CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : map nat nat : @some : nat : @storage
    GET 5;      # pair nat nat : map nat nat : @some : nat : @storage
    UNPAIR;     # nat : nat : map nat nat : @some : nat : @storage
    # compute_WeightedPoolProtocolFees_57 = sp.local("compute_WeightedPoolProtocolFees_57", self.data.entries) # nat : nat : map nat nat : @some : nat : @storage
    DUP 6;      # @storage : nat : nat : map nat nat : @some : nat : @storage
    CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : map nat nat : @some : nat : @storage
    CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : nat : nat : map nat nat : @some : nat : @storage
    CAR;        # pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat)) : nat : nat : map nat nat : @some : nat : @storage
    GET 4;      # big_map int nat : nat : nat : map nat nat : @some : nat : @storage
    # compute_WeightedPoolProtocolFees_64 = sp.local("compute_WeightedPoolProtocolFees_64", self.data.rateProviders) # big_map int nat : nat : nat : map nat nat : @some : nat : @storage
    DUP 7;      # @storage : big_map int nat : nat : nat : map nat nat : @some : nat : @storage
    GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : big_map int nat : nat : nat : map nat nat : @some : nat : @storage
    CAR;        # pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode)) : big_map int nat : nat : nat : map nat nat : @some : nat : @storage
    GET 3;      # option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : nat : @storage
    # compute_ExternalWeightedProtocolFees_48 = sp.local("compute_ExternalWeightedProtocolFees_48", sp.view("getPreJoinExitProtocolFees", sp.record(athRateProduct = compute_WeightedPoolProtocolFees_57.value[11], exemptFromYieldFees = self.data.exemptFromYieldFees, normalizedWeights = compute_WeightedPool_347.value, postJoinExitInvariant = compute_WeightedPoolProtocolFees_57.value[12], preJoinExitInvariant = compute_ExternalWeightedMath_93.value, preJoinExitSupply = compute_WeightedPool_341.value, rateProviders = compute_WeightedPoolProtocolFees_64.value, swapFee = match_pair_WeightedPoolProtocolFees_55_fst, yieldFee = match_pair_WeightedPoolProtocolFees_55_snd), self.data.weightedProtocolFeesLib, sp.TPair(sp.TNat, sp.TNat)).open_some(message = 807)) # option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : nat : @storage
    DUP 8;      # @storage : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : nat : @storage
    GET 10;     # address : option (map nat (option address)) : big_map int nat : nat : nat : map nat nat : @some : nat : @storage
    DIG 4;      # nat : address : option (map nat (option address)) : big_map int nat : nat : map nat nat : @some : nat : @storage
    DIG 4;      # nat : nat : address : option (map nat (option address)) : big_map int nat : map nat nat : @some : nat : @storage
    PAIR;       # pair nat nat : address : option (map nat (option address)) : big_map int nat : map nat nat : @some : nat : @storage
    DIG 2;      # option (map nat (option address)) : pair nat nat : address : big_map int nat : map nat nat : @some : nat : @storage
    PAIR;       # pair (option (map nat (option address))) (pair nat nat) : address : big_map int nat : map nat nat : @some : nat : @storage
    DUP 6;      # nat : pair (option (map nat (option address))) (pair nat nat) : address : big_map int nat : map nat nat : @some : nat : @storage
    DIG 5;      # @some : nat : pair (option (map nat (option address))) (pair nat nat) : address : big_map int nat : map nat nat : nat : @storage
    PAIR;       # pair @some nat : pair (option (map nat (option address))) (pair nat nat) : address : big_map int nat : map nat nat : nat : @storage
    PAIR;       # pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : big_map int nat : map nat nat : nat : @storage
    DUP 3;      # big_map int nat : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : big_map int nat : map nat nat : nat : @storage
    PUSH int 12; # int : big_map int nat : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : big_map int nat : map nat nat : nat : @storage
    GET;        # option nat : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : big_map int nat : map nat nat : nat : @storage
    IF_NONE
      {
        PUSH int 62; # int : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : big_map int nat : map nat nat : nat : @storage
        FAILWITH;   # FAILED
      }
      {}; # @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : big_map int nat : map nat nat : nat : @storage
    DIG 4;      # map nat nat : @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : big_map int nat : nat : @storage
    PAIR;       # pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : big_map int nat : nat : @storage
    DIG 5;      # @storage : pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : big_map int nat : nat
    CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : big_map int nat : nat
    CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : big_map int nat : nat
    GET 3;      # bool : pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : big_map int nat : nat
    DIG 4;      # big_map int nat : bool : pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : nat
    PUSH int 11; # int : big_map int nat : bool : pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : nat
    GET;        # option nat : bool : pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : nat
    IF_NONE
      {
        PUSH int 65; # int : bool : pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : nat
        FAILWITH;   # FAILED
      }
      {}; # @some : bool : pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : nat
    PAIR;       # pair @some bool : pair (map nat nat) @some : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : nat
    PAIR;       # pair (pair @some bool) (pair (map nat nat) @some) : pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat)) : address : nat
    PAIR;       # pair (pair (pair @some bool) (pair (map nat nat) @some)) (pair (pair @some nat) (pair (option (map nat (option address))) (pair nat nat))) : address : nat
    VIEW "getPreJoinExitProtocolFees" (pair nat nat); # option (pair nat nat) : nat
    IF_NONE
      {
        PUSH int 807; # int : nat
        FAILWITH;   # FAILED
      }
      {}; # @some : nat
    # sp.result(compute_WeightedPool_341.value + sp.fst(compute_ExternalWeightedProtocolFees_48.value)) # @some : nat
    CAR;        # nat : nat
    ADD;        # nat
  };
view
  "getAllowance" (pair (address %owner) (address %spender)) nat
  {
    UNPAIR;     # @parameter : @storage
    # if self.data.balances.contains(params.owner): # @parameter : @storage
    DUP 2;      # @storage : @parameter : @storage
    CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter : @storage
    CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @parameter : @storage
    CAR;        # pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat)) : @parameter : @storage
    GET 3;      # big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter : @storage
    DUP 2;      # @parameter : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter : @storage
    CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter : @storage
    MEM;        # bool : @parameter : @storage
    IF
      {
        SWAP;       # @storage : @parameter
        # sp.result(self.data.balances[params.owner].approvals.get(params.spender, default_value = 0)) # @storage : @parameter
        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter
        CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @parameter
        CAR;        # pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat)) : @parameter
        GET 3;      # big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter
        DUP 2;      # @parameter : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter
        CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter
        GET;        # option (pair (map %approvals address nat) (nat %balance)) : @parameter
        IF_NONE
          {
            PUSH int 102; # int : @parameter
            FAILWITH;   # FAILED
          }
          {}; # @some : @parameter
        CAR;        # map address nat : @parameter
        SWAP;       # @parameter : map address nat
        CDR;        # address : map address nat
        GET;        # option nat
        IF_NONE
          {
            PUSH nat 0; # nat
          }
          {}; # nat
      }
      {
        DROP 2;     # 
        # sp.result(0) # 
        PUSH nat 0; # nat
      }; # nat
  };
view
  "getBalance" address nat
  {
    UNPAIR;     # @parameter : @storage
    # if self.data.balances.contains(params): # @parameter : @storage
    DUP 2;      # @storage : @parameter : @storage
    CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter : @storage
    CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @parameter : @storage
    CAR;        # pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat)) : @parameter : @storage
    GET 3;      # big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter : @storage
    DUP 2;      # @parameter : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter : @storage
    MEM;        # bool : @parameter : @storage
    IF
      {
        SWAP;       # @storage : @parameter
        # sp.result(self.data.balances[params].balance) # @storage : @parameter
        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter
        CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @parameter
        CAR;        # pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat)) : @parameter
        GET 3;      # big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter
        SWAP;       # @parameter : big_map address (pair (map %approvals address nat) (nat %balance))
        GET;        # option (pair (map %approvals address nat) (nat %balance))
        IF_NONE
          {
            PUSH int 94; # int
            FAILWITH;   # FAILED
          }
          {}; # @some
        CDR;        # nat
      }
      {
        DROP 2;     # 
        # sp.result(0) # 
        PUSH nat 0; # nat
      }; # nat
  };
view
  "getInvariant" unit nat
  {
    CDR;        # @storage
    # compute_BaseWeightedPool_49 = sp.local("compute_BaseWeightedPool_49", sp.view("getPoolTokens", self.data.poolId.open_some(), self.data.vault, sp.TPair(sp.TMap(sp.TNat, sp.TPair(sp.TAddress, sp.TOption(sp.TNat))), sp.TMap(sp.TNat, sp.TNat))).open_some(message = 813)) # @storage
    DUP;        # @storage : @storage
    GET 7;      # address : @storage
    DUP 2;      # @storage : address : @storage
    CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : address : @storage
    GET 7;      # option (pair address nat) : address : @storage
    IF_NONE
      {
        PUSH int 49; # int : address : @storage
        FAILWITH;   # FAILED
      }
      {}; # @some : address : @storage
    VIEW "getPoolTokens" (pair (map nat (pair address (option nat))) (map nat nat)); # option (pair (map nat (pair address (option nat))) (map nat nat)) : @storage
    IF_NONE
      {
        PUSH int 813; # int : @storage
        FAILWITH;   # FAILED
      }
      {}; # @some : @storage
    # compute_BaseWeightedPool_54 = sp.local("compute_BaseWeightedPool_54", self.data.scaling_helpers[0]((sp.snd(compute_BaseWeightedPool_49.value), self.data.scalingFactors, self.data.fixedPoint[20]))) # @some : @storage
    DUP 2;      # @storage : @some : @storage
    GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : @some : @storage
    GET 5;      # big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : @some : @storage
    PUSH int 0; # int : big_map int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : @some : @storage
    GET;        # option (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat)) : @some : @storage
    IF_NONE
      {
        PUSH int 54; # int : @some : @storage
        FAILWITH;   # FAILED
      }
      {}; # @some : @some : @storage
    DUP 3;      # @storage : @some : @some : @storage
    CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : @some : @storage
    CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @some : @some : @storage
    GET 6;      # big_map nat (lambda (pair nat nat) nat) : @some : @some : @storage
    PUSH nat 20; # nat : big_map nat (lambda (pair nat nat) nat) : @some : @some : @storage
    GET;        # option (lambda (pair nat nat) nat) : @some : @some : @storage
    IF_NONE
      {
        PUSH int 55; # int : @some : @some : @storage
        FAILWITH;   # FAILED
      }
      {}; # @some : @some : @some : @storage
    DUP 4;      # @storage : @some : @some : @some : @storage
    GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : @some : @some : @some : @storage
    GET 3;      # map nat nat : @some : @some : @some : @storage
    PAIR;       # pair (map nat nat) @some : @some : @some : @storage
    DIG 2;      # @some : pair (map nat nat) @some : @some : @storage
    CDR;        # map nat nat : pair (map nat nat) @some : @some : @storage
    PAIR;       # pair (map nat nat) (pair (map nat nat) @some) : @some : @storage
    EXEC;       # map nat nat : @storage
    SWAP;       # @storage : map nat nat
    # compute_ExternalWeightedMath_93 = sp.local("compute_ExternalWeightedMath_93", sp.view("calculateInvariant", sp.record(balances = compute_BaseWeightedPool_54.value, normalizedWeights = self.data.normalizedWeights), self.data.weightedMathLib, sp.TNat).open_some(message = 802)) # @storage : map nat nat
    DUP;        # @storage : @storage : map nat nat
    GET 9;      # address : @storage : map nat nat
    SWAP;       # @storage : address : map nat nat
    CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : address : map nat nat
    GET 5;      # map nat nat : address : map nat nat
    DIG 2;      # map nat nat : map nat nat : address
    PAIR;       # pair (map nat nat) (map nat nat) : address
    VIEW "calculateInvariant" nat; # option nat
    IF_NONE
      {
        PUSH int 802; # int
        FAILWITH;   # FAILED
      }
      {}; # @some
    # sp.result(compute_ExternalWeightedMath_93.value) # @some
  };
view
  "getTotalSupply" unit nat
  {
    CDR;        # @storage
    # sp.result(self.data.totalSupply) # @storage
    GET 5;      # pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply))
    GET 4;      # nat
  };
view
  "getVault" unit address
  {
    CDR;        # @storage
    # sp.result(self.data.vault) # @storage
    GET 7;      # address
  };
view
  "onSwap" (pair (nat %balanceTokenIn) (pair (nat %balanceTokenOut) (pair %request (pair (nat %amount) (nat %kind)) (pair (pair %tokenIn address (option nat)) (pair %tokenOut address (option nat)))))) nat
  {
    UNPAIR;     # @parameter : @storage
    # sp.verify(self.data.settings.paused == False, 'ONLY_UNPAUSED') # @parameter : @storage
    PUSH bool False; # bool : @parameter : @storage
    DUP 3;      # @storage : bool : @parameter : @storage
    GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : bool : @parameter : @storage
    GET 6;      # bool : bool : @parameter : @storage
    COMPARE;    # int : @parameter : @storage
    EQ;         # bool : @parameter : @storage
    IF
      {}
      {
        PUSH string "ONLY_UNPAUSED"; # string : @parameter : @storage
        FAILWITH;   # FAILED
      }; # @parameter : @storage
    # compute_BaseMinimalSwapInfoPool_57 = sp.local("compute_BaseMinimalSwapInfoPool_57", self.data.getTokenValue((params.request.tokenIn, self.data.tokens, self.data.scalingFactors))) # @parameter : @storage
    DUP 2;      # @storage : @parameter : @storage
    CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @parameter : @storage
    GET 3;      # pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : @parameter : @storage
    CAR;        # lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : @parameter : @storage
    DUP 3;      # @storage : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : @parameter : @storage
    GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : @parameter : @storage
    GET 3;      # map nat nat : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : @parameter : @storage
    DUP 4;      # @storage : map nat nat : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : @parameter : @storage
    GET 5;      # pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply)) : map nat nat : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : @parameter : @storage
    GET 3;      # map nat (pair address (option nat)) : map nat nat : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : @parameter : @storage
    PAIR;       # pair (map nat (pair address (option nat))) (map nat nat) : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : @parameter : @storage
    DUP 3;      # @parameter : pair (map nat (pair address (option nat))) (map nat nat) : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : @parameter : @storage
    GET 7;      # pair address (option nat) : pair (map nat (pair address (option nat))) (map nat nat) : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : @parameter : @storage
    PAIR;       # pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat)) : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : @parameter : @storage
    EXEC;       # nat : @parameter : @storage
    # compute_BaseMinimalSwapInfoPool_62 = sp.local("compute_BaseMinimalSwapInfoPool_62", self.data.getTokenValue((params.request.tokenOut, self.data.tokens, self.data.scalingFactors))) # nat : @parameter : @storage
    DUP 3;      # @storage : nat : @parameter : @storage
    CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : @parameter : @storage
    GET 3;      # pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : nat : @parameter : @storage
    CAR;        # lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : @parameter : @storage
    DUP 4;      # @storage : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : @parameter : @storage
    GET 3;      # pair (pair (address %protocolFeesCollector) (pair (option %rateProviders (map nat (option address))) (bool %recoveryMode))) (pair (map %scalingFactors nat nat) (pair (big_map %scaling_helpers int (lambda (pair (map nat nat) (pair (map nat nat) (lambda (pair nat nat) nat))) (map nat nat))) (bool %settings))) : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : @parameter : @storage
    GET 3;      # map nat nat : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : @parameter : @storage
    DUP 5;      # @storage : map nat nat : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : @parameter : @storage
    GET 5;      # pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply)) : map nat nat : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : @parameter : @storage
    GET 3;      # map nat (pair address (option nat)) : map nat nat : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : @parameter : @storage
    PAIR;       # pair (map nat (pair address (option nat))) (map nat nat) : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : @parameter : @storage
    DUP 4;      # @parameter : pair (map nat (pair address (option nat))) (map nat nat) : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : @parameter : @storage
    GET 8;      # pair address (option nat) : pair (map nat (pair address (option nat))) (map nat nat) : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : @parameter : @storage
    PAIR;       # pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat)) : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : @parameter : @storage
    EXEC;       # nat : nat : @parameter : @storage
    # compute_BaseMinimalSwapInfoPool_68 = sp.local("compute_BaseMinimalSwapInfoPool_68", self.data.fixedPoint[20]((params.balanceTokenIn, compute_BaseMinimalSwapInfoPool_57.value))) # nat : nat : @parameter : @storage
    DUP 4;      # @storage : nat : nat : @parameter : @storage
    CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : @parameter : @storage
    CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : nat : nat : @parameter : @storage
    GET 6;      # big_map nat (lambda (pair nat nat) nat) : nat : nat : @parameter : @storage
    PUSH nat 20; # nat : big_map nat (lambda (pair nat nat) nat) : nat : nat : @parameter : @storage
    GET;        # option (lambda (pair nat nat) nat) : nat : nat : @parameter : @storage
    IF_NONE
      {
        PUSH int 68; # int : nat : nat : @parameter : @storage
        FAILWITH;   # FAILED
      }
      {}; # @some : nat : nat : @parameter : @storage
    DUP 3;      # nat : @some : nat : nat : @parameter : @storage
    DUP 5;      # @parameter : nat : @some : nat : nat : @parameter : @storage
    CAR;        # nat : nat : @some : nat : nat : @parameter : @storage
    PAIR;       # pair nat nat : @some : nat : nat : @parameter : @storage
    EXEC;       # nat : nat : nat : @parameter : @storage
    # compute_BaseMinimalSwapInfoPool_70 = sp.local("compute_BaseMinimalSwapInfoPool_70", self.data.fixedPoint[20]((params.balanceTokenOut, compute_BaseMinimalSwapInfoPool_62.value))) # nat : nat : nat : @parameter : @storage
    DUP 5;      # @storage : nat : nat : nat : @parameter : @storage
    CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : @parameter : @storage
    CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : nat : nat : nat : @parameter : @storage
    GET 6;      # big_map nat (lambda (pair nat nat) nat) : nat : nat : nat : @parameter : @storage
    PUSH nat 20; # nat : big_map nat (lambda (pair nat nat) nat) : nat : nat : nat : @parameter : @storage
    GET;        # option (lambda (pair nat nat) nat) : nat : nat : nat : @parameter : @storage
    IF_NONE
      {
        PUSH int 70; # int : nat : nat : nat : @parameter : @storage
        FAILWITH;   # FAILED
      }
      {}; # @some : nat : nat : nat : @parameter : @storage
    DUP 3;      # nat : @some : nat : nat : nat : @parameter : @storage
    DUP 6;      # @parameter : nat : @some : nat : nat : nat : @parameter : @storage
    GET 3;      # nat : nat : @some : nat : nat : nat : @parameter : @storage
    PAIR;       # pair nat nat : @some : nat : nat : nat : @parameter : @storage
    EXEC;       # nat : nat : nat : nat : @parameter : @storage
    # swapAmount = sp.local("swapAmount", 0)
    # if params.request.kind == 7: # nat : nat : nat : nat : @parameter : @storage
    PUSH nat 7; # nat : nat : nat : nat : nat : @parameter : @storage
    DUP 6;      # @parameter : nat : nat : nat : nat : nat : @parameter : @storage
    GET 5;      # pair (nat %amount) (nat %kind) : nat : nat : nat : nat : nat : @parameter : @storage
    CDR;        # nat : nat : nat : nat : nat : nat : @parameter : @storage
    COMPARE;    # int : nat : nat : nat : nat : @parameter : @storage
    EQ;         # bool : nat : nat : nat : nat : @parameter : @storage
    IF
      {
        # swapAmount.value = sp.as_nat(params.request.amount - self.data.fixedPoint[21]((params.request.amount, self.data.entries[13]))) # nat : nat : nat : nat : @parameter : @storage
        DUP 6;      # @storage : nat : nat : nat : nat : @parameter : @storage
        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : nat : @parameter : @storage
        CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : nat : nat : nat : nat : @parameter : @storage
        GET 6;      # big_map nat (lambda (pair nat nat) nat) : nat : nat : nat : nat : @parameter : @storage
        PUSH nat 21; # nat : big_map nat (lambda (pair nat nat) nat) : nat : nat : nat : nat : @parameter : @storage
        GET;        # option (lambda (pair nat nat) nat) : nat : nat : nat : nat : @parameter : @storage
        IF_NONE
          {
            PUSH int 483; # int : nat : nat : nat : nat : @parameter : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : nat : nat : nat : nat : @parameter : @storage
        DUP 7;      # @storage : @some : nat : nat : nat : nat : @parameter : @storage
        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : nat : nat : nat : nat : @parameter : @storage
        CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @some : nat : nat : nat : nat : @parameter : @storage
        CAR;        # pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat)) : @some : nat : nat : nat : nat : @parameter : @storage
        GET 4;      # big_map int nat : @some : nat : nat : nat : nat : @parameter : @storage
        PUSH int 13; # int : big_map int nat : @some : nat : nat : nat : nat : @parameter : @storage
        GET;        # option nat : @some : nat : nat : nat : nat : @parameter : @storage
        IF_NONE
          {
            PUSH int 484; # int : @some : nat : nat : nat : nat : @parameter : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : @some : nat : nat : nat : nat : @parameter : @storage
        DUP 7;      # @parameter : @some : @some : nat : nat : nat : nat : @parameter : @storage
        GET 5;      # pair (nat %amount) (nat %kind) : @some : @some : nat : nat : nat : nat : @parameter : @storage
        CAR;        # nat : @some : @some : nat : nat : nat : nat : @parameter : @storage
        PAIR;       # pair nat @some : @some : nat : nat : nat : nat : @parameter : @storage
        EXEC;       # nat : nat : nat : nat : nat : @parameter : @storage
        DUP 6;      # @parameter : nat : nat : nat : nat : nat : @parameter : @storage
        GET 5;      # pair (nat %amount) (nat %kind) : nat : nat : nat : nat : nat : @parameter : @storage
        CAR;        # nat : nat : nat : nat : nat : nat : @parameter : @storage
        SUB;        # int : nat : nat : nat : nat : @parameter : @storage
        ISNAT;      # option nat : nat : nat : nat : nat : @parameter : @storage
        IF_NONE
          {
            PUSH int 485; # int : nat : nat : nat : nat : @parameter : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : nat : nat : nat : nat : @parameter : @storage
        # swapAmount.value = self.data.fixedPoint[20]((swapAmount.value, compute_BaseMinimalSwapInfoPool_57.value)) # @some : nat : nat : nat : nat : @parameter : @storage
        DUP 7;      # @storage : @some : nat : nat : nat : nat : @parameter : @storage
        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : nat : nat : nat : nat : @parameter : @storage
        CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @some : nat : nat : nat : nat : @parameter : @storage
        GET 6;      # big_map nat (lambda (pair nat nat) nat) : @some : nat : nat : nat : nat : @parameter : @storage
        PUSH nat 20; # nat : big_map nat (lambda (pair nat nat) nat) : @some : nat : nat : nat : nat : @parameter : @storage
        GET;        # option (lambda (pair nat nat) nat) : @some : nat : nat : nat : nat : @parameter : @storage
        IF_NONE
          {
            PUSH int 79; # int : @some : nat : nat : nat : nat : @parameter : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : @some : nat : nat : nat : nat : @parameter : @storage
        DIG 5;      # nat : @some : @some : nat : nat : nat : @parameter : @storage
        DIG 2;      # @some : nat : @some : nat : nat : nat : @parameter : @storage
        PAIR;       # pair @some nat : @some : nat : nat : nat : @parameter : @storage
        EXEC;       # nat : nat : nat : nat : @parameter : @storage
        # compute_BaseWeightedPool_98 = sp.local("compute_BaseWeightedPool_98", self.data.getTokenValue((params.request.tokenIn, self.data.tokens, self.data.normalizedWeights))) # nat : nat : nat : nat : @parameter : @storage
        DUP 6;      # @storage : nat : nat : nat : nat : @parameter : @storage
        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : nat : @parameter : @storage
        GET 3;      # pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : nat : nat : nat : nat : @parameter : @storage
        CAR;        # lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : @parameter : @storage
        DUP 7;      # @storage : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : @parameter : @storage
        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : @parameter : @storage
        GET 5;      # map nat nat : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : @parameter : @storage
        DUP 8;      # @storage : map nat nat : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : @parameter : @storage
        GET 5;      # pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply)) : map nat nat : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : @parameter : @storage
        GET 3;      # map nat (pair address (option nat)) : map nat nat : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : @parameter : @storage
        PAIR;       # pair (map nat (pair address (option nat))) (map nat nat) : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : @parameter : @storage
        DUP 7;      # @parameter : pair (map nat (pair address (option nat))) (map nat nat) : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : @parameter : @storage
        GET 7;      # pair address (option nat) : pair (map nat (pair address (option nat))) (map nat nat) : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : @parameter : @storage
        PAIR;       # pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat)) : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : @parameter : @storage
        EXEC;       # nat : nat : nat : nat : nat : @parameter : @storage
        # compute_BaseWeightedPool_104 = sp.local("compute_BaseWeightedPool_104", self.data.getTokenValue((params.request.tokenOut, self.data.tokens, self.data.normalizedWeights))) # nat : nat : nat : nat : nat : @parameter : @storage
        DUP 7;      # @storage : nat : nat : nat : nat : nat : @parameter : @storage
        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : nat : nat : @parameter : @storage
        GET 3;      # pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : nat : nat : nat : nat : nat : @parameter : @storage
        CAR;        # lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : nat : @parameter : @storage
        DUP 8;      # @storage : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : nat : @parameter : @storage
        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : nat : @parameter : @storage
        GET 5;      # map nat nat : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : nat : @parameter : @storage
        DUP 9;      # @storage : map nat nat : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : nat : @parameter : @storage
        GET 5;      # pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply)) : map nat nat : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : nat : @parameter : @storage
        GET 3;      # map nat (pair address (option nat)) : map nat nat : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : nat : @parameter : @storage
        PAIR;       # pair (map nat (pair address (option nat))) (map nat nat) : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : nat : @parameter : @storage
        DIG 7;      # @parameter : pair (map nat (pair address (option nat))) (map nat nat) : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : nat : @storage
        GET 8;      # pair address (option nat) : pair (map nat (pair address (option nat))) (map nat nat) : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : nat : @storage
        PAIR;       # pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat)) : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : nat : @storage
        EXEC;       # nat : nat : nat : nat : nat : nat : @storage
        # compute_ExternalWeightedMath_74 = sp.local("compute_ExternalWeightedMath_74", sp.view("calcOutGivenIn", sp.record(amountIn = swapAmount.value, balanceIn = compute_BaseMinimalSwapInfoPool_68.value, balanceOut = compute_BaseMinimalSwapInfoPool_70.value, weightIn = compute_BaseWeightedPool_98.value, weightOut = compute_BaseWeightedPool_104.value), self.data.weightedMathLib, sp.TNat).open_some(message = 800)) # nat : nat : nat : nat : nat : nat : @storage
        DUP 7;      # @storage : nat : nat : nat : nat : nat : nat : @storage
        GET 9;      # address : nat : nat : nat : nat : nat : nat : @storage
        SWAP;       # nat : address : nat : nat : nat : nat : nat : @storage
        DIG 2;      # nat : nat : address : nat : nat : nat : nat : @storage
        PAIR;       # pair nat nat : address : nat : nat : nat : nat : @storage
        DIG 3;      # nat : pair nat nat : address : nat : nat : nat : @storage
        PAIR;       # pair nat (pair nat nat) : address : nat : nat : nat : @storage
        DIG 3;      # nat : pair nat (pair nat nat) : address : nat : nat : @storage
        DIG 3;      # nat : nat : pair nat (pair nat nat) : address : nat : @storage
        PAIR;       # pair nat nat : pair nat (pair nat nat) : address : nat : @storage
        PAIR;       # pair (pair nat nat) (pair nat (pair nat nat)) : address : nat : @storage
        VIEW "calcOutGivenIn" nat; # option nat : nat : @storage
        IF_NONE
          {
            PUSH int 800; # int : nat : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : nat : @storage
        # swapAmount.value = self.data.fixedPoint[22]((compute_ExternalWeightedMath_74.value, compute_BaseMinimalSwapInfoPool_62.value)) # @some : nat : @storage
        DIG 2;      # @storage : @some : nat
        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : nat
        CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @some : nat
        GET 6;      # big_map nat (lambda (pair nat nat) nat) : @some : nat
        PUSH nat 22; # nat : big_map nat (lambda (pair nat nat) nat) : @some : nat
        GET;        # option (lambda (pair nat nat) nat) : @some : nat
        IF_NONE
          {
            PUSH int 93; # int : @some : nat
            FAILWITH;   # FAILED
          }
          {}; # @some : @some : nat
        DUG 2;      # @some : nat : @some
        PAIR;       # pair @some nat : @some
        EXEC;       # nat
      }
      {
        # swapAmount.value = self.data.fixedPoint[20]((params.request.amount, compute_BaseMinimalSwapInfoPool_62.value)) # nat : nat : nat : nat : @parameter : @storage
        DUP 6;      # @storage : nat : nat : nat : nat : @parameter : @storage
        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : nat : @parameter : @storage
        CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : nat : nat : nat : nat : @parameter : @storage
        GET 6;      # big_map nat (lambda (pair nat nat) nat) : nat : nat : nat : nat : @parameter : @storage
        PUSH nat 20; # nat : big_map nat (lambda (pair nat nat) nat) : nat : nat : nat : nat : @parameter : @storage
        GET;        # option (lambda (pair nat nat) nat) : nat : nat : nat : nat : @parameter : @storage
        IF_NONE
          {
            PUSH int 98; # int : nat : nat : nat : nat : @parameter : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : nat : nat : nat : nat : @parameter : @storage
        DIG 3;      # nat : @some : nat : nat : nat : @parameter : @storage
        DUP 6;      # @parameter : nat : @some : nat : nat : nat : @parameter : @storage
        GET 5;      # pair (nat %amount) (nat %kind) : nat : @some : nat : nat : nat : @parameter : @storage
        CAR;        # nat : nat : @some : nat : nat : nat : @parameter : @storage
        PAIR;       # pair nat nat : @some : nat : nat : nat : @parameter : @storage
        EXEC;       # nat : nat : nat : nat : @parameter : @storage
        # compute_BaseWeightedPool_132 = sp.local("compute_BaseWeightedPool_132", self.data.getTokenValue((params.request.tokenIn, self.data.tokens, self.data.normalizedWeights))) # nat : nat : nat : nat : @parameter : @storage
        DUP 6;      # @storage : nat : nat : nat : nat : @parameter : @storage
        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : nat : @parameter : @storage
        GET 3;      # pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : nat : nat : nat : nat : @parameter : @storage
        CAR;        # lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : @parameter : @storage
        DUP 7;      # @storage : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : @parameter : @storage
        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : @parameter : @storage
        GET 5;      # map nat nat : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : @parameter : @storage
        DUP 8;      # @storage : map nat nat : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : @parameter : @storage
        GET 5;      # pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply)) : map nat nat : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : @parameter : @storage
        GET 3;      # map nat (pair address (option nat)) : map nat nat : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : @parameter : @storage
        PAIR;       # pair (map nat (pair address (option nat))) (map nat nat) : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : @parameter : @storage
        DUP 7;      # @parameter : pair (map nat (pair address (option nat))) (map nat nat) : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : @parameter : @storage
        GET 7;      # pair address (option nat) : pair (map nat (pair address (option nat))) (map nat nat) : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : @parameter : @storage
        PAIR;       # pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat)) : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : @parameter : @storage
        EXEC;       # nat : nat : nat : nat : nat : @parameter : @storage
        # compute_BaseWeightedPool_138 = sp.local("compute_BaseWeightedPool_138", self.data.getTokenValue((params.request.tokenOut, self.data.tokens, self.data.normalizedWeights))) # nat : nat : nat : nat : nat : @parameter : @storage
        DUP 7;      # @storage : nat : nat : nat : nat : nat : @parameter : @storage
        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : nat : nat : nat : nat : @parameter : @storage
        GET 3;      # pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes)) : nat : nat : nat : nat : nat : @parameter : @storage
        CAR;        # lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : nat : @parameter : @storage
        DUP 8;      # @storage : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : nat : @parameter : @storage
        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : nat : @parameter : @storage
        GET 5;      # map nat nat : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : nat : @parameter : @storage
        DUP 9;      # @storage : map nat nat : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : nat : @parameter : @storage
        GET 5;      # pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (pair (map %tokens nat (pair address (option nat))) (nat %totalSupply)) : map nat nat : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : nat : @parameter : @storage
        GET 3;      # map nat (pair address (option nat)) : map nat nat : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : nat : @parameter : @storage
        PAIR;       # pair (map nat (pair address (option nat))) (map nat nat) : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : nat : @parameter : @storage
        DIG 7;      # @parameter : pair (map nat (pair address (option nat))) (map nat nat) : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : nat : @storage
        GET 8;      # pair address (option nat) : pair (map nat (pair address (option nat))) (map nat nat) : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : nat : @storage
        PAIR;       # pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat)) : lambda (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat : nat : nat : nat : nat : nat : @storage
        EXEC;       # nat : nat : nat : nat : nat : nat : @storage
        # compute_ExternalWeightedMath_85 = sp.local("compute_ExternalWeightedMath_85", sp.view("calcInGivenOut", sp.record(amountOut = swapAmount.value, balanceIn = compute_BaseMinimalSwapInfoPool_68.value, balanceOut = compute_BaseMinimalSwapInfoPool_70.value, weightIn = compute_BaseWeightedPool_132.value, weightOut = compute_BaseWeightedPool_138.value), self.data.weightedMathLib, sp.TNat).open_some(message = 801)) # nat : nat : nat : nat : nat : nat : @storage
        DUP 7;      # @storage : nat : nat : nat : nat : nat : nat : @storage
        GET 9;      # address : nat : nat : nat : nat : nat : nat : @storage
        SWAP;       # nat : address : nat : nat : nat : nat : nat : @storage
        DIG 2;      # nat : nat : address : nat : nat : nat : nat : @storage
        PAIR;       # pair nat nat : address : nat : nat : nat : nat : @storage
        DIG 3;      # nat : pair nat nat : address : nat : nat : nat : @storage
        PAIR;       # pair nat (pair nat nat) : address : nat : nat : nat : @storage
        DIG 3;      # nat : pair nat (pair nat nat) : address : nat : nat : @storage
        DIG 3;      # nat : nat : pair nat (pair nat nat) : address : nat : @storage
        PAIR;       # pair nat nat : pair nat (pair nat nat) : address : nat : @storage
        PAIR;       # pair (pair nat nat) (pair nat (pair nat nat)) : address : nat : @storage
        VIEW "calcInGivenOut" nat; # option nat : nat : @storage
        IF_NONE
          {
            PUSH int 801; # int : nat : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : nat : @storage
        # swapAmount.value = self.data.fixedPoint[23]((self.data.fixedPoint[23]((compute_ExternalWeightedMath_85.value, compute_BaseMinimalSwapInfoPool_57.value)), sp.eif(self.data.entries[13] < 1000000000000000000, sp.as_nat(1000000000000000000 - self.data.entries[13]), 0))) # @some : nat : @storage
        DUP 3;      # @storage : @some : nat : @storage
        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : nat : @storage
        CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @some : nat : @storage
        GET 6;      # big_map nat (lambda (pair nat nat) nat) : @some : nat : @storage
        PUSH nat 23; # nat : big_map nat (lambda (pair nat nat) nat) : @some : nat : @storage
        GET;        # option (lambda (pair nat nat) nat) : @some : nat : @storage
        IF_NONE
          {
            PUSH int 479; # int : @some : nat : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : @some : nat : @storage
        PUSH nat 1000000000000000000; # nat : @some : @some : nat : @storage
        DUP 5;      # @storage : nat : @some : @some : nat : @storage
        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : @some : @some : nat : @storage
        CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : nat : @some : @some : nat : @storage
        CAR;        # pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat)) : nat : @some : @some : nat : @storage
        GET 4;      # big_map int nat : nat : @some : @some : nat : @storage
        PUSH int 13; # int : big_map int nat : nat : @some : @some : nat : @storage
        GET;        # option nat : nat : @some : @some : nat : @storage
        IF_NONE
          {
            PUSH int 479; # int : nat : @some : @some : nat : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : nat : @some : @some : nat : @storage
        COMPARE;    # int : @some : @some : nat : @storage
        LT;         # bool : @some : @some : nat : @storage
        IF
          {
            DUP 4;      # @storage : @some : @some : nat : @storage
            CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : @some : @some : nat : @storage
            CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : @some : @some : nat : @storage
            CAR;        # pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat)) : @some : @some : nat : @storage
            GET 4;      # big_map int nat : @some : @some : nat : @storage
            PUSH int 13; # int : big_map int nat : @some : @some : nat : @storage
            GET;        # option nat : @some : @some : nat : @storage
            IF_NONE
              {
                PUSH int 479; # int : @some : @some : nat : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : @some : @some : nat : @storage
            PUSH nat 1000000000000000000; # nat : @some : @some : @some : nat : @storage
            SUB;        # int : @some : @some : nat : @storage
            ISNAT;      # option nat : @some : @some : nat : @storage
            IF_NONE
              {
                PUSH int 178; # int : @some : @some : nat : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : @some : @some : nat : @storage
          }
          {
            PUSH nat 0; # nat : @some : @some : nat : @storage
          }; # nat : @some : @some : nat : @storage
        DIG 4;      # @storage : nat : @some : @some : nat
        CAR;        # pair (pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat))))) (pair (pair (lambda %getTokenValue (pair (pair address (option nat)) (pair (map nat (pair address (option nat))) (map nat nat))) nat) (pair (bool %initialized) (big_map %metadata string bytes))) (pair (map %normalizedWeights nat nat) (pair (option %poolId (pair address nat)) (option %proposed_admin address)))) : nat : @some : @some : nat
        CAR;        # pair (pair (address %admin) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %entries int nat))) (pair (bool %exemptFromYieldFees) (pair (pair %feeCache nat nat) (big_map %fixedPoint nat (lambda (pair nat nat) nat)))) : nat : @some : @some : nat
        GET 6;      # big_map nat (lambda (pair nat nat) nat) : nat : @some : @some : nat
        PUSH nat 23; # nat : big_map nat (lambda (pair nat nat) nat) : nat : @some : @some : nat
        GET;        # option (lambda (pair nat nat) nat) : nat : @some : @some : nat
        IF_NONE
          {
            PUSH int 114; # int : nat : @some : @some : nat
            FAILWITH;   # FAILED
          }
          {}; # @some : nat : @some : @some : nat
        DIG 4;      # nat : @some : nat : @some : @some
        DIG 4;      # @some : nat : @some : nat : @some
        PAIR;       # pair @some nat : @some : nat : @some
        EXEC;       # nat : nat : @some
        PAIR;       # pair nat nat : @some
        EXEC;       # nat
      }; # nat
    # sp.result(swapAmount.value) # nat
  };